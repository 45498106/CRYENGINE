//autogenerated 831 techniques

#include "Common.cfi"

Texture2D cry_tex0 : register(t0);
Texture2D cry_tex1 : register(t1);
Texture2D cry_tex2 : register(t2);
Texture2D cry_tex3 : register(t3);
SamplerState cry_sampler0 : register(s0);
SamplerState cry_sampler1 : register(s1);
SamplerState cry_sampler2 : register(s2);
SamplerState cry_sampler3 : register(s3);


cbuffer CB_VS_TexTG : register(b0) { 
float4 VS_TexTG_mvp[2] : packoffset(c0);
float4 VS_TexTG_texgen[2] : packoffset(c2);
};

//VS_TexTG
void VS_TexTG( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTG_mvp[0]);
    vpos.y = dot(pos, VS_TexTG_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTG_texgen[0]);
    tc0.y = dot(pos, VS_TexTG_texgen[1]);
    
}

//PS_TexTG
void PS_TexTG( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique TexTG
{
	pass p0
	{
		VertexShader = VS_TexTG();
		PixelShader = PS_TexTG();
	}
}


cbuffer CB_VS_TexTGTexDensity : register(b0) { 
float4 VS_TexTGTexDensity_mvp[2] : packoffset(c0);
float4 VS_TexTGTexDensity_texgen[2] : packoffset(c2);
};

//VS_TexTGTexDensity
void VS_TexTGTexDensity( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexDensity_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexDensity_texgen[1]);
    
}

cbuffer CB_PS_TexTGTexDensity : register(b0) { 
float PS_TexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_TexTGTexDensity_textureDims : packoffset(c1);
};

//PS_TexTGTexDensity
void PS_TexTGTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_TexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_TexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_TexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique TexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_TexTGTexDensity();
		PixelShader = PS_TexTGTexDensity();
	}
}


cbuffer CB_VS_TexTGMul : register(b0) { 
float4 VS_TexTGMul_mvp[2] : packoffset(c0);
float4 VS_TexTGMul_texgen[2] : packoffset(c2);
};

//VS_TexTGMul
void VS_TexTGMul( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGMul_texgen[1]);
    
}

//PS_TexTGMul
void PS_TexTGMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGMul
{
	pass p0
	{
		VertexShader = VS_TexTGMul();
		PixelShader = PS_TexTGMul();
	}
}


cbuffer CB_VS_TexTGInv : register(b0) { 
float4 VS_TexTGInv_mvp[2] : packoffset(c0);
float4 VS_TexTGInv_texgen[2] : packoffset(c2);
};

//VS_TexTGInv
void VS_TexTGInv( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGInv_texgen[1]);
    
}

//PS_TexTGInv
void PS_TexTGInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGInv
{
	pass p0
	{
		VertexShader = VS_TexTGInv();
		PixelShader = PS_TexTGInv();
	}
}


cbuffer CB_VS_TexTGEAlpha : register(b0) { 
float4 VS_TexTGEAlpha_mvp[2] : packoffset(c0);
float4 VS_TexTGEAlpha_texgen[2] : packoffset(c2);
};

//VS_TexTGEAlpha
void VS_TexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGEAlpha_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGEAlpha
void PS_TexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGEAlpha();
		PixelShader = PS_TexTGEAlpha();
	}
}


cbuffer CB_VS_TexTGEAlphaTexDensity : register(b0) { 
float4 VS_TexTGEAlphaTexDensity_mvp[2] : packoffset(c0);
float4 VS_TexTGEAlphaTexDensity_texgen[2] : packoffset(c2);
};

//VS_TexTGEAlphaTexDensity
void VS_TexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_TexTGEAlphaTexDensity_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_TexTGEAlphaTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_TexTGEAlphaTexDensity : register(b0) { 
float PS_TexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_TexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_TexTGEAlphaTexDensity
void PS_TexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_TexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_TexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_TexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique TexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_TexTGEAlphaTexDensity();
		PixelShader = PS_TexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_TexTGEAlphaMul : register(b0) { 
float4 VS_TexTGEAlphaMul_mvp[2] : packoffset(c0);
float4 VS_TexTGEAlphaMul_texgen[2] : packoffset(c2);
};

//VS_TexTGEAlphaMul
void VS_TexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGEAlphaMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGEAlphaMul
void PS_TexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGEAlphaMul();
		PixelShader = PS_TexTGEAlphaMul();
	}
}


cbuffer CB_VS_TexTGEAlphaInv : register(b0) { 
float4 VS_TexTGEAlphaInv_mvp[2] : packoffset(c0);
float4 VS_TexTGEAlphaInv_texgen[2] : packoffset(c2);
};

//VS_TexTGEAlphaInv
void VS_TexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGEAlphaInv_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGEAlphaInv
void PS_TexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGEAlphaInv();
		PixelShader = PS_TexTGEAlphaInv();
	}
}


cbuffer CB_VS_TexTGCxform : register(b0) { 
float4 VS_TexTGCxform_cxadd : packoffset(c0);
float4 VS_TexTGCxform_cxmul : packoffset(c1);
float4 VS_TexTGCxform_mvp[2] : packoffset(c2);
float4 VS_TexTGCxform_texgen[2] : packoffset(c4);
};

//VS_TexTGCxform
void VS_TexTGCxform( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxform_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxform_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxform_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxform_texgen[1]);
    

    fucxadd = VS_TexTGCxform_cxadd;
    fucxmul = VS_TexTGCxform_cxmul;
    
}

//PS_TexTGCxform
void PS_TexTGCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique TexTGCxform
{
	pass p0
	{
		VertexShader = VS_TexTGCxform();
		PixelShader = PS_TexTGCxform();
	}
}


cbuffer CB_VS_TexTGCxformMul : register(b0) { 
float4 VS_TexTGCxformMul_cxadd : packoffset(c0);
float4 VS_TexTGCxformMul_cxmul : packoffset(c1);
float4 VS_TexTGCxformMul_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformMul_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformMul
void VS_TexTGCxformMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformMul_texgen[1]);
    

    fucxadd = VS_TexTGCxformMul_cxadd;
    fucxmul = VS_TexTGCxformMul_cxmul;
    
}

//PS_TexTGCxformMul
void PS_TexTGCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_TexTGCxformMul();
		PixelShader = PS_TexTGCxformMul();
	}
}


cbuffer CB_VS_TexTGCxformInv : register(b0) { 
float4 VS_TexTGCxformInv_cxadd : packoffset(c0);
float4 VS_TexTGCxformInv_cxmul : packoffset(c1);
float4 VS_TexTGCxformInv_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformInv_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformInv
void VS_TexTGCxformInv( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformInv_texgen[1]);
    

    fucxadd = VS_TexTGCxformInv_cxadd;
    fucxmul = VS_TexTGCxformInv_cxmul;
    
}

//PS_TexTGCxformInv
void PS_TexTGCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_TexTGCxformInv();
		PixelShader = PS_TexTGCxformInv();
	}
}


cbuffer CB_VS_TexTGCxformEAlpha : register(b0) { 
float4 VS_TexTGCxformEAlpha_cxadd : packoffset(c0);
float4 VS_TexTGCxformEAlpha_cxmul : packoffset(c1);
float4 VS_TexTGCxformEAlpha_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformEAlpha_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformEAlpha
void VS_TexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformEAlpha_texgen[1]);
    

    fucxadd = VS_TexTGCxformEAlpha_cxadd;
    fucxmul = VS_TexTGCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGCxformEAlpha
void PS_TexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGCxformEAlpha();
		PixelShader = PS_TexTGCxformEAlpha();
	}
}


cbuffer CB_VS_TexTGCxformEAlphaMul : register(b0) { 
float4 VS_TexTGCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_TexTGCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_TexTGCxformEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformEAlphaMul
void VS_TexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformEAlphaMul_texgen[1]);
    

    fucxadd = VS_TexTGCxformEAlphaMul_cxadd;
    fucxmul = VS_TexTGCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGCxformEAlphaMul
void PS_TexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGCxformEAlphaMul();
		PixelShader = PS_TexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_TexTGCxformEAlphaInv : register(b0) { 
float4 VS_TexTGCxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_TexTGCxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_TexTGCxformEAlphaInv_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformEAlphaInv
void VS_TexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformEAlphaInv_texgen[1]);
    

    fucxadd = VS_TexTGCxformEAlphaInv_cxadd;
    fucxmul = VS_TexTGCxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGCxformEAlphaInv
void PS_TexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGCxformEAlphaInv();
		PixelShader = PS_TexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_TexTGCxformAc : register(b0) { 
float4 VS_TexTGCxformAc_cxadd : packoffset(c0);
float4 VS_TexTGCxformAc_cxmul : packoffset(c1);
float4 VS_TexTGCxformAc_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformAc_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformAc
void VS_TexTGCxformAc( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformAc_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformAc_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformAc_texgen[1]);
    

    fucxadd = VS_TexTGCxformAc_cxadd;
    fucxmul = VS_TexTGCxformAc_cxmul;
    
}

//PS_TexTGCxformAc
void PS_TexTGCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique TexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_TexTGCxformAc();
		PixelShader = PS_TexTGCxformAc();
	}
}


cbuffer CB_VS_TexTGCxformAcMul : register(b0) { 
float4 VS_TexTGCxformAcMul_cxadd : packoffset(c0);
float4 VS_TexTGCxformAcMul_cxmul : packoffset(c1);
float4 VS_TexTGCxformAcMul_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformAcMul_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformAcMul
void VS_TexTGCxformAcMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformAcMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformAcMul_texgen[1]);
    

    fucxadd = VS_TexTGCxformAcMul_cxadd;
    fucxmul = VS_TexTGCxformAcMul_cxmul;
    
}

//PS_TexTGCxformAcMul
void PS_TexTGCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_TexTGCxformAcMul();
		PixelShader = PS_TexTGCxformAcMul();
	}
}


cbuffer CB_VS_TexTGCxformAcInv : register(b0) { 
float4 VS_TexTGCxformAcInv_cxadd : packoffset(c0);
float4 VS_TexTGCxformAcInv_cxmul : packoffset(c1);
float4 VS_TexTGCxformAcInv_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformAcInv_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformAcInv
void VS_TexTGCxformAcInv( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformAcInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformAcInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformAcInv_texgen[1]);
    

    fucxadd = VS_TexTGCxformAcInv_cxadd;
    fucxmul = VS_TexTGCxformAcInv_cxmul;
    
}

//PS_TexTGCxformAcInv
void PS_TexTGCxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_TexTGCxformAcInv();
		PixelShader = PS_TexTGCxformAcInv();
	}
}


cbuffer CB_VS_TexTGCxformAcEAlpha : register(b0) { 
float4 VS_TexTGCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_TexTGCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_TexTGCxformAcEAlpha_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformAcEAlpha_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformAcEAlpha
void VS_TexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformAcEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformAcEAlpha_texgen[1]);
    

    fucxadd = VS_TexTGCxformAcEAlpha_cxadd;
    fucxmul = VS_TexTGCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGCxformAcEAlpha
void PS_TexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGCxformAcEAlpha();
		PixelShader = PS_TexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_TexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_TexTGCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_TexTGCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_TexTGCxformAcEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformAcEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformAcEAlphaMul
void VS_TexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformAcEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformAcEAlphaMul_texgen[1]);
    

    fucxadd = VS_TexTGCxformAcEAlphaMul_cxadd;
    fucxmul = VS_TexTGCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGCxformAcEAlphaMul
void PS_TexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGCxformAcEAlphaMul();
		PixelShader = PS_TexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_TexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_TexTGCxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_TexTGCxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_TexTGCxformAcEAlphaInv_mvp[2] : packoffset(c2);
float4 VS_TexTGCxformAcEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_TexTGCxformAcEAlphaInv
void VS_TexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGCxformAcEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGCxformAcEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGCxformAcEAlphaInv_texgen[1]);
    

    fucxadd = VS_TexTGCxformAcEAlphaInv_cxadd;
    fucxmul = VS_TexTGCxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGCxformAcEAlphaInv
void PS_TexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGCxformAcEAlphaInv();
		PixelShader = PS_TexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_Vertex : register(b0) { 
float4 VS_Vertex_mvp[2] : packoffset(c0);
};

//VS_Vertex
void VS_Vertex( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_Vertex_mvp[0]);
    vpos.y = dot(pos, VS_Vertex_mvp[1]);
    

    color = acolor;
    
}

//PS_Vertex
void PS_Vertex( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = fcolor;
    
}

technique Vertex
{
	pass p0
	{
		VertexShader = VS_Vertex();
		PixelShader = PS_Vertex();
	}
}


cbuffer CB_VS_VertexMul : register(b0) { 
float4 VS_VertexMul_mvp[2] : packoffset(c0);
};

//VS_VertexMul
void VS_VertexMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexMul_mvp[0]);
    vpos.y = dot(pos, VS_VertexMul_mvp[1]);
    

    color = acolor;
    
}

//PS_VertexMul
void PS_VertexMul( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique VertexMul
{
	pass p0
	{
		VertexShader = VS_VertexMul();
		PixelShader = PS_VertexMul();
	}
}


cbuffer CB_VS_VertexInv : register(b0) { 
float4 VS_VertexInv_mvp[2] : packoffset(c0);
};

//VS_VertexInv
void VS_VertexInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexInv_mvp[0]);
    vpos.y = dot(pos, VS_VertexInv_mvp[1]);
    

    color = acolor;
    
}

//PS_VertexInv
void PS_VertexInv( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique VertexInv
{
	pass p0
	{
		VertexShader = VS_VertexInv();
		PixelShader = PS_VertexInv();
	}
}


cbuffer CB_VS_VertexEAlpha : register(b0) { 
float4 VS_VertexEAlpha_mvp[2] : packoffset(c0);
};

//VS_VertexEAlpha
void VS_VertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_VertexEAlpha_mvp[1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_VertexEAlpha
void PS_VertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique VertexEAlpha
{
	pass p0
	{
		VertexShader = VS_VertexEAlpha();
		PixelShader = PS_VertexEAlpha();
	}
}


cbuffer CB_VS_VertexEAlphaMul : register(b0) { 
float4 VS_VertexEAlphaMul_mvp[2] : packoffset(c0);
};

//VS_VertexEAlphaMul
void VS_VertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_VertexEAlphaMul_mvp[1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_VertexEAlphaMul
void PS_VertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique VertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_VertexEAlphaMul();
		PixelShader = PS_VertexEAlphaMul();
	}
}


cbuffer CB_VS_VertexEAlphaInv : register(b0) { 
float4 VS_VertexEAlphaInv_mvp[2] : packoffset(c0);
};

//VS_VertexEAlphaInv
void VS_VertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_VertexEAlphaInv_mvp[1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_VertexEAlphaInv
void PS_VertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique VertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_VertexEAlphaInv();
		PixelShader = PS_VertexEAlphaInv();
	}
}


cbuffer CB_VS_VertexCxform : register(b0) { 
float4 VS_VertexCxform_cxadd : packoffset(c0);
float4 VS_VertexCxform_cxmul : packoffset(c1);
float4 VS_VertexCxform_mvp[2] : packoffset(c2);
};

//VS_VertexCxform
void VS_VertexCxform( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxform_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxform_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxform_cxadd;
    fucxmul = VS_VertexCxform_cxmul;
    
}

//PS_VertexCxform
void PS_VertexCxform( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique VertexCxform
{
	pass p0
	{
		VertexShader = VS_VertexCxform();
		PixelShader = PS_VertexCxform();
	}
}


cbuffer CB_VS_VertexCxformMul : register(b0) { 
float4 VS_VertexCxformMul_cxadd : packoffset(c0);
float4 VS_VertexCxformMul_cxmul : packoffset(c1);
float4 VS_VertexCxformMul_mvp[2] : packoffset(c2);
};

//VS_VertexCxformMul
void VS_VertexCxformMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformMul_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformMul_cxadd;
    fucxmul = VS_VertexCxformMul_cxmul;
    
}

//PS_VertexCxformMul
void PS_VertexCxformMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique VertexCxformMul
{
	pass p0
	{
		VertexShader = VS_VertexCxformMul();
		PixelShader = PS_VertexCxformMul();
	}
}


cbuffer CB_VS_VertexCxformInv : register(b0) { 
float4 VS_VertexCxformInv_cxadd : packoffset(c0);
float4 VS_VertexCxformInv_cxmul : packoffset(c1);
float4 VS_VertexCxformInv_mvp[2] : packoffset(c2);
};

//VS_VertexCxformInv
void VS_VertexCxformInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformInv_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformInv_cxadd;
    fucxmul = VS_VertexCxformInv_cxmul;
    
}

//PS_VertexCxformInv
void PS_VertexCxformInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique VertexCxformInv
{
	pass p0
	{
		VertexShader = VS_VertexCxformInv();
		PixelShader = PS_VertexCxformInv();
	}
}


cbuffer CB_VS_VertexCxformEAlpha : register(b0) { 
float4 VS_VertexCxformEAlpha_cxadd : packoffset(c0);
float4 VS_VertexCxformEAlpha_cxmul : packoffset(c1);
float4 VS_VertexCxformEAlpha_mvp[2] : packoffset(c2);
};

//VS_VertexCxformEAlpha
void VS_VertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformEAlpha_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformEAlpha_cxadd;
    fucxmul = VS_VertexCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_VertexCxformEAlpha
void PS_VertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique VertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_VertexCxformEAlpha();
		PixelShader = PS_VertexCxformEAlpha();
	}
}


cbuffer CB_VS_VertexCxformEAlphaMul : register(b0) { 
float4 VS_VertexCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_VertexCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_VertexCxformEAlphaMul_mvp[2] : packoffset(c2);
};

//VS_VertexCxformEAlphaMul
void VS_VertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformEAlphaMul_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformEAlphaMul_cxadd;
    fucxmul = VS_VertexCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_VertexCxformEAlphaMul
void PS_VertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique VertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_VertexCxformEAlphaMul();
		PixelShader = PS_VertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_VertexCxformEAlphaInv : register(b0) { 
float4 VS_VertexCxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_VertexCxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_VertexCxformEAlphaInv_mvp[2] : packoffset(c2);
};

//VS_VertexCxformEAlphaInv
void VS_VertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformEAlphaInv_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformEAlphaInv_cxadd;
    fucxmul = VS_VertexCxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_VertexCxformEAlphaInv
void PS_VertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique VertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_VertexCxformEAlphaInv();
		PixelShader = PS_VertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_VertexCxformAc : register(b0) { 
float4 VS_VertexCxformAc_cxadd : packoffset(c0);
float4 VS_VertexCxformAc_cxmul : packoffset(c1);
float4 VS_VertexCxformAc_mvp[2] : packoffset(c2);
};

//VS_VertexCxformAc
void VS_VertexCxformAc( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformAc_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformAc_cxadd;
    fucxmul = VS_VertexCxformAc_cxmul;
    
}

//PS_VertexCxformAc
void PS_VertexCxformAc( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique VertexCxformAc
{
	pass p0
	{
		VertexShader = VS_VertexCxformAc();
		PixelShader = PS_VertexCxformAc();
	}
}


cbuffer CB_VS_VertexCxformAcMul : register(b0) { 
float4 VS_VertexCxformAcMul_cxadd : packoffset(c0);
float4 VS_VertexCxformAcMul_cxmul : packoffset(c1);
float4 VS_VertexCxformAcMul_mvp[2] : packoffset(c2);
};

//VS_VertexCxformAcMul
void VS_VertexCxformAcMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformAcMul_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformAcMul_cxadd;
    fucxmul = VS_VertexCxformAcMul_cxmul;
    
}

//PS_VertexCxformAcMul
void PS_VertexCxformAcMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique VertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_VertexCxformAcMul();
		PixelShader = PS_VertexCxformAcMul();
	}
}


cbuffer CB_VS_VertexCxformAcInv : register(b0) { 
float4 VS_VertexCxformAcInv_cxadd : packoffset(c0);
float4 VS_VertexCxformAcInv_cxmul : packoffset(c1);
float4 VS_VertexCxformAcInv_mvp[2] : packoffset(c2);
};

//VS_VertexCxformAcInv
void VS_VertexCxformAcInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformAcInv_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformAcInv_cxadd;
    fucxmul = VS_VertexCxformAcInv_cxmul;
    
}

//PS_VertexCxformAcInv
void PS_VertexCxformAcInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique VertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_VertexCxformAcInv();
		PixelShader = PS_VertexCxformAcInv();
	}
}


cbuffer CB_VS_VertexCxformAcEAlpha : register(b0) { 
float4 VS_VertexCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_VertexCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_VertexCxformAcEAlpha_mvp[2] : packoffset(c2);
};

//VS_VertexCxformAcEAlpha
void VS_VertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformAcEAlpha_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformAcEAlpha_cxadd;
    fucxmul = VS_VertexCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_VertexCxformAcEAlpha
void PS_VertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique VertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_VertexCxformAcEAlpha();
		PixelShader = PS_VertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_VertexCxformAcEAlphaMul : register(b0) { 
float4 VS_VertexCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_VertexCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_VertexCxformAcEAlphaMul_mvp[2] : packoffset(c2);
};

//VS_VertexCxformAcEAlphaMul
void VS_VertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformAcEAlphaMul_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformAcEAlphaMul_cxadd;
    fucxmul = VS_VertexCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_VertexCxformAcEAlphaMul
void PS_VertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique VertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_VertexCxformAcEAlphaMul();
		PixelShader = PS_VertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_VertexCxformAcEAlphaInv : register(b0) { 
float4 VS_VertexCxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_VertexCxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_VertexCxformAcEAlphaInv_mvp[2] : packoffset(c2);
};

//VS_VertexCxformAcEAlphaInv
void VS_VertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_VertexCxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_VertexCxformAcEAlphaInv_mvp[1]);
    

    color = acolor;
    

    fucxadd = VS_VertexCxformAcEAlphaInv_cxadd;
    fucxmul = VS_VertexCxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_VertexCxformAcEAlphaInv
void PS_VertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique VertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_VertexCxformAcEAlphaInv();
		PixelShader = PS_VertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_TexTGTexTG : register(b0) { 
float4 VS_TexTGTexTG_mvp[2] : packoffset(c0);
float4 VS_TexTGTexTG_texgen[4] : packoffset(c2);
};

//VS_TexTGTexTG
void VS_TexTGTexTG( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTG_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTG_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTG_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTG_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTG_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTG_texgen[3]);
    

      factor = afactor;
    
}

//PS_TexTGTexTG
void PS_TexTGTexTG( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique TexTGTexTG
{
	pass p0
	{
		VertexShader = VS_TexTGTexTG();
		PixelShader = PS_TexTGTexTG();
	}
}


cbuffer CB_VS_TexTGTexTGTexDensity : register(b0) { 
float4 VS_TexTGTexTGTexDensity_mvp[2] : packoffset(c0);
float4 VS_TexTGTexTGTexDensity_texgen[4] : packoffset(c2);
};

//VS_TexTGTexTGTexDensity
void VS_TexTGTexTGTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGTexDensity_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGTexDensity_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGTexDensity_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGTexDensity_texgen[3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_TexTGTexTGTexDensity : register(b0) { 
float PS_TexTGTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_TexTGTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_TexTGTexTGTexDensity
void PS_TexTGTexTGTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_TexTGTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_TexTGTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_TexTGTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique TexTGTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGTexDensity();
		PixelShader = PS_TexTGTexTGTexDensity();
	}
}


cbuffer CB_VS_TexTGTexTGMul : register(b0) { 
float4 VS_TexTGTexTGMul_mvp[2] : packoffset(c0);
float4 VS_TexTGTexTGMul_texgen[4] : packoffset(c2);
};

//VS_TexTGTexTGMul
void VS_TexTGTexTGMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGMul_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGMul_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGMul_texgen[3]);
    

      factor = afactor;
    
}

//PS_TexTGTexTGMul
void PS_TexTGTexTGMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGMul
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGMul();
		PixelShader = PS_TexTGTexTGMul();
	}
}


cbuffer CB_VS_TexTGTexTGInv : register(b0) { 
float4 VS_TexTGTexTGInv_mvp[2] : packoffset(c0);
float4 VS_TexTGTexTGInv_texgen[4] : packoffset(c2);
};

//VS_TexTGTexTGInv
void VS_TexTGTexTGInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGInv_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGInv_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGInv_texgen[3]);
    

      factor = afactor;
    
}

//PS_TexTGTexTGInv
void PS_TexTGTexTGInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGTexTGInv
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGInv();
		PixelShader = PS_TexTGTexTGInv();
	}
}


cbuffer CB_VS_TexTGTexTGEAlpha : register(b0) { 
float4 VS_TexTGTexTGEAlpha_mvp[2] : packoffset(c0);
float4 VS_TexTGTexTGEAlpha_texgen[4] : packoffset(c2);
};

//VS_TexTGTexTGEAlpha
void VS_TexTGTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGEAlpha_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGEAlpha_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGEAlpha_texgen[3]);
    

      factor = afactor;
    
}

//PS_TexTGTexTGEAlpha
void PS_TexTGTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGEAlpha();
		PixelShader = PS_TexTGTexTGEAlpha();
	}
}


cbuffer CB_VS_TexTGTexTGEAlphaTexDensity : register(b0) { 
float4 VS_TexTGTexTGEAlphaTexDensity_mvp[2] : packoffset(c0);
float4 VS_TexTGTexTGEAlphaTexDensity_texgen[4] : packoffset(c2);
};

//VS_TexTGTexTGEAlphaTexDensity
void VS_TexTGTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGEAlphaTexDensity_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGEAlphaTexDensity_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGEAlphaTexDensity_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGEAlphaTexDensity_texgen[3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_TexTGTexTGEAlphaTexDensity : register(b0) { 
float PS_TexTGTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_TexTGTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_TexTGTexTGEAlphaTexDensity
void PS_TexTGTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_TexTGTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_TexTGTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_TexTGTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique TexTGTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGEAlphaTexDensity();
		PixelShader = PS_TexTGTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_TexTGTexTGEAlphaMul : register(b0) { 
float4 VS_TexTGTexTGEAlphaMul_mvp[2] : packoffset(c0);
float4 VS_TexTGTexTGEAlphaMul_texgen[4] : packoffset(c2);
};

//VS_TexTGTexTGEAlphaMul
void VS_TexTGTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGEAlphaMul_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGEAlphaMul_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGEAlphaMul_texgen[3]);
    

      factor = afactor;
    
}

//PS_TexTGTexTGEAlphaMul
void PS_TexTGTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGEAlphaMul();
		PixelShader = PS_TexTGTexTGEAlphaMul();
	}
}


cbuffer CB_VS_TexTGTexTGEAlphaInv : register(b0) { 
float4 VS_TexTGTexTGEAlphaInv_mvp[2] : packoffset(c0);
float4 VS_TexTGTexTGEAlphaInv_texgen[4] : packoffset(c2);
};

//VS_TexTGTexTGEAlphaInv
void VS_TexTGTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGEAlphaInv_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGEAlphaInv_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGEAlphaInv_texgen[3]);
    

      factor = afactor;
    
}

//PS_TexTGTexTGEAlphaInv
void PS_TexTGTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGEAlphaInv();
		PixelShader = PS_TexTGTexTGEAlphaInv();
	}
}


cbuffer CB_VS_TexTGTexTGCxform : register(b0) { 
float4 VS_TexTGTexTGCxform_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxform_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxform_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxform_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxform
void VS_TexTGTexTGCxform( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxform_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxform_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxform_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxform_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxform_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxform_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxform_cxadd;
    fucxmul = VS_TexTGTexTGCxform_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxform
void PS_TexTGTexTGCxform( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxform
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxform();
		PixelShader = PS_TexTGTexTGCxform();
	}
}


cbuffer CB_VS_TexTGTexTGCxformMul : register(b0) { 
float4 VS_TexTGTexTGCxformMul_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformMul_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformMul_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformMul_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformMul
void VS_TexTGTexTGCxformMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformMul_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformMul_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformMul_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformMul_cxadd;
    fucxmul = VS_TexTGTexTGCxformMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformMul
void PS_TexTGTexTGCxformMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformMul();
		PixelShader = PS_TexTGTexTGCxformMul();
	}
}


cbuffer CB_VS_TexTGTexTGCxformInv : register(b0) { 
float4 VS_TexTGTexTGCxformInv_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformInv_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformInv_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformInv_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformInv
void VS_TexTGTexTGCxformInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformInv_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformInv_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformInv_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformInv_cxadd;
    fucxmul = VS_TexTGTexTGCxformInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformInv
void PS_TexTGTexTGCxformInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformInv();
		PixelShader = PS_TexTGTexTGCxformInv();
	}
}


cbuffer CB_VS_TexTGTexTGCxformEAlpha : register(b0) { 
float4 VS_TexTGTexTGCxformEAlpha_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformEAlpha_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformEAlpha_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformEAlpha_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformEAlpha
void VS_TexTGTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformEAlpha_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformEAlpha_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformEAlpha_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformEAlpha_cxadd;
    fucxmul = VS_TexTGTexTGCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformEAlpha
void PS_TexTGTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformEAlpha();
		PixelShader = PS_TexTGTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_TexTGTexTGCxformEAlphaMul : register(b0) { 
float4 VS_TexTGTexTGCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformEAlphaMul_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformEAlphaMul
void VS_TexTGTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformEAlphaMul_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformEAlphaMul_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformEAlphaMul_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformEAlphaMul_cxadd;
    fucxmul = VS_TexTGTexTGCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformEAlphaMul
void PS_TexTGTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformEAlphaMul();
		PixelShader = PS_TexTGTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_TexTGTexTGCxformEAlphaInv : register(b0) { 
float4 VS_TexTGTexTGCxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformEAlphaInv_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformEAlphaInv_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformEAlphaInv
void VS_TexTGTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformEAlphaInv_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformEAlphaInv_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformEAlphaInv_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformEAlphaInv_cxadd;
    fucxmul = VS_TexTGTexTGCxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformEAlphaInv
void PS_TexTGTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformEAlphaInv();
		PixelShader = PS_TexTGTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_TexTGTexTGCxformAc : register(b0) { 
float4 VS_TexTGTexTGCxformAc_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformAc_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformAc_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformAc_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformAc
void VS_TexTGTexTGCxformAc( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformAc_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformAc_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformAc_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformAc_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformAc_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformAc_cxadd;
    fucxmul = VS_TexTGTexTGCxformAc_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformAc
void PS_TexTGTexTGCxformAc( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformAc();
		PixelShader = PS_TexTGTexTGCxformAc();
	}
}


cbuffer CB_VS_TexTGTexTGCxformAcMul : register(b0) { 
float4 VS_TexTGTexTGCxformAcMul_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformAcMul_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformAcMul_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformAcMul_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformAcMul
void VS_TexTGTexTGCxformAcMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformAcMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformAcMul_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformAcMul_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformAcMul_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformAcMul_cxadd;
    fucxmul = VS_TexTGTexTGCxformAcMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformAcMul
void PS_TexTGTexTGCxformAcMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformAcMul();
		PixelShader = PS_TexTGTexTGCxformAcMul();
	}
}


cbuffer CB_VS_TexTGTexTGCxformAcInv : register(b0) { 
float4 VS_TexTGTexTGCxformAcInv_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformAcInv_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformAcInv_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformAcInv_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformAcInv
void VS_TexTGTexTGCxformAcInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformAcInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformAcInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformAcInv_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformAcInv_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformAcInv_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformAcInv_cxadd;
    fucxmul = VS_TexTGTexTGCxformAcInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformAcInv
void PS_TexTGTexTGCxformAcInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformAcInv();
		PixelShader = PS_TexTGTexTGCxformAcInv();
	}
}


cbuffer CB_VS_TexTGTexTGCxformAcEAlpha : register(b0) { 
float4 VS_TexTGTexTGCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformAcEAlpha_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformAcEAlpha_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformAcEAlpha
void VS_TexTGTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformAcEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformAcEAlpha_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformAcEAlpha_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformAcEAlpha_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformAcEAlpha_cxadd;
    fucxmul = VS_TexTGTexTGCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformAcEAlpha
void PS_TexTGTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformAcEAlpha();
		PixelShader = PS_TexTGTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_TexTGTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_TexTGTexTGCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformAcEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformAcEAlphaMul_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformAcEAlphaMul
void VS_TexTGTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformAcEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformAcEAlphaMul_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformAcEAlphaMul_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformAcEAlphaMul_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformAcEAlphaMul_cxadd;
    fucxmul = VS_TexTGTexTGCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformAcEAlphaMul
void PS_TexTGTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformAcEAlphaMul();
		PixelShader = PS_TexTGTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_TexTGTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_TexTGTexTGCxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_TexTGTexTGCxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_TexTGTexTGCxformAcEAlphaInv_mvp[2] : packoffset(c2);
float4 VS_TexTGTexTGCxformAcEAlphaInv_texgen[4] : packoffset(c4);
};

//VS_TexTGTexTGCxformAcEAlphaInv
void VS_TexTGTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGTexTGCxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGTexTGCxformAcEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_TexTGTexTGCxformAcEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGTexTGCxformAcEAlphaInv_texgen[1]);
    tc1.x = dot(pos, VS_TexTGTexTGCxformAcEAlphaInv_texgen[2]);
    tc1.y = dot(pos, VS_TexTGTexTGCxformAcEAlphaInv_texgen[3]);
    

    fucxadd = VS_TexTGTexTGCxformAcEAlphaInv_cxadd;
    fucxmul = VS_TexTGTexTGCxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGTexTGCxformAcEAlphaInv
void PS_TexTGTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGTexTGCxformAcEAlphaInv();
		PixelShader = PS_TexTGTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_TexTGVertex : register(b0) { 
float4 VS_TexTGVertex_mvp[2] : packoffset(c0);
float4 VS_TexTGVertex_texgen[2] : packoffset(c2);
};

//VS_TexTGVertex
void VS_TexTGVertex( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertex_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertex_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertex_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertex_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGVertex
void PS_TexTGVertex( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique TexTGVertex
{
	pass p0
	{
		VertexShader = VS_TexTGVertex();
		PixelShader = PS_TexTGVertex();
	}
}


cbuffer CB_VS_TexTGVertexTexDensity : register(b0) { 
float4 VS_TexTGVertexTexDensity_mvp[2] : packoffset(c0);
float4 VS_TexTGVertexTexDensity_texgen[2] : packoffset(c2);
};

//VS_TexTGVertexTexDensity
void VS_TexTGVertexTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexTexDensity_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_TexTGVertexTexDensity : register(b0) { 
float PS_TexTGVertexTexDensity_mipLevels : packoffset(c0);
float2 PS_TexTGVertexTexDensity_textureDims : packoffset(c1);
};

//PS_TexTGVertexTexDensity
void PS_TexTGVertexTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_TexTGVertexTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_TexTGVertexTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_TexTGVertexTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique TexTGVertexTexDensity
{
	pass p0
	{
		VertexShader = VS_TexTGVertexTexDensity();
		PixelShader = PS_TexTGVertexTexDensity();
	}
}


cbuffer CB_VS_TexTGVertexMul : register(b0) { 
float4 VS_TexTGVertexMul_mvp[2] : packoffset(c0);
float4 VS_TexTGVertexMul_texgen[2] : packoffset(c2);
};

//VS_TexTGVertexMul
void VS_TexTGVertexMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexMul_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGVertexMul
void PS_TexTGVertexMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexMul
{
	pass p0
	{
		VertexShader = VS_TexTGVertexMul();
		PixelShader = PS_TexTGVertexMul();
	}
}


cbuffer CB_VS_TexTGVertexInv : register(b0) { 
float4 VS_TexTGVertexInv_mvp[2] : packoffset(c0);
float4 VS_TexTGVertexInv_texgen[2] : packoffset(c2);
};

//VS_TexTGVertexInv
void VS_TexTGVertexInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexInv_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexInv_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGVertexInv
void PS_TexTGVertexInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGVertexInv
{
	pass p0
	{
		VertexShader = VS_TexTGVertexInv();
		PixelShader = PS_TexTGVertexInv();
	}
}


cbuffer CB_VS_TexTGVertexEAlpha : register(b0) { 
float4 VS_TexTGVertexEAlpha_mvp[2] : packoffset(c0);
float4 VS_TexTGVertexEAlpha_texgen[2] : packoffset(c2);
};

//VS_TexTGVertexEAlpha
void VS_TexTGVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexEAlpha_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexEAlpha_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGVertexEAlpha
void PS_TexTGVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGVertexEAlpha();
		PixelShader = PS_TexTGVertexEAlpha();
	}
}


cbuffer CB_VS_TexTGVertexEAlphaTexDensity : register(b0) { 
float4 VS_TexTGVertexEAlphaTexDensity_mvp[2] : packoffset(c0);
float4 VS_TexTGVertexEAlphaTexDensity_texgen[2] : packoffset(c2);
};

//VS_TexTGVertexEAlphaTexDensity
void VS_TexTGVertexEAlphaTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexEAlphaTexDensity_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexEAlphaTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_TexTGVertexEAlphaTexDensity : register(b0) { 
float PS_TexTGVertexEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_TexTGVertexEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_TexTGVertexEAlphaTexDensity
void PS_TexTGVertexEAlphaTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_TexTGVertexEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_TexTGVertexEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_TexTGVertexEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique TexTGVertexEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_TexTGVertexEAlphaTexDensity();
		PixelShader = PS_TexTGVertexEAlphaTexDensity();
	}
}


cbuffer CB_VS_TexTGVertexEAlphaMul : register(b0) { 
float4 VS_TexTGVertexEAlphaMul_mvp[2] : packoffset(c0);
float4 VS_TexTGVertexEAlphaMul_texgen[2] : packoffset(c2);
};

//VS_TexTGVertexEAlphaMul
void VS_TexTGVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexEAlphaMul_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexEAlphaMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGVertexEAlphaMul
void PS_TexTGVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGVertexEAlphaMul();
		PixelShader = PS_TexTGVertexEAlphaMul();
	}
}


cbuffer CB_VS_TexTGVertexEAlphaInv : register(b0) { 
float4 VS_TexTGVertexEAlphaInv_mvp[2] : packoffset(c0);
float4 VS_TexTGVertexEAlphaInv_texgen[2] : packoffset(c2);
};

//VS_TexTGVertexEAlphaInv
void VS_TexTGVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexEAlphaInv_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexEAlphaInv_texgen[1]);
    

      factor = afactor;
    
}

//PS_TexTGVertexEAlphaInv
void PS_TexTGVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGVertexEAlphaInv();
		PixelShader = PS_TexTGVertexEAlphaInv();
	}
}


cbuffer CB_VS_TexTGVertexCxform : register(b0) { 
float4 VS_TexTGVertexCxform_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxform_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxform_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxform_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxform
void VS_TexTGVertexCxform( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxform_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxform_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxform_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxform_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxform_cxadd;
    fucxmul = VS_TexTGVertexCxform_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxform
void PS_TexTGVertexCxform( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxform
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxform();
		PixelShader = PS_TexTGVertexCxform();
	}
}


cbuffer CB_VS_TexTGVertexCxformMul : register(b0) { 
float4 VS_TexTGVertexCxformMul_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformMul_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformMul_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformMul_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformMul
void VS_TexTGVertexCxformMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformMul_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformMul_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformMul_cxadd;
    fucxmul = VS_TexTGVertexCxformMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformMul
void PS_TexTGVertexCxformMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformMul();
		PixelShader = PS_TexTGVertexCxformMul();
	}
}


cbuffer CB_VS_TexTGVertexCxformInv : register(b0) { 
float4 VS_TexTGVertexCxformInv_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformInv_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformInv_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformInv_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformInv
void VS_TexTGVertexCxformInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformInv_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformInv_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformInv_cxadd;
    fucxmul = VS_TexTGVertexCxformInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformInv
void PS_TexTGVertexCxformInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformInv();
		PixelShader = PS_TexTGVertexCxformInv();
	}
}


cbuffer CB_VS_TexTGVertexCxformEAlpha : register(b0) { 
float4 VS_TexTGVertexCxformEAlpha_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformEAlpha_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformEAlpha_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformEAlpha_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformEAlpha
void VS_TexTGVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformEAlpha_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformEAlpha_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformEAlpha_cxadd;
    fucxmul = VS_TexTGVertexCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformEAlpha
void PS_TexTGVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformEAlpha();
		PixelShader = PS_TexTGVertexCxformEAlpha();
	}
}


cbuffer CB_VS_TexTGVertexCxformEAlphaMul : register(b0) { 
float4 VS_TexTGVertexCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformEAlphaMul
void VS_TexTGVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformEAlphaMul_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformEAlphaMul_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformEAlphaMul_cxadd;
    fucxmul = VS_TexTGVertexCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformEAlphaMul
void PS_TexTGVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformEAlphaMul();
		PixelShader = PS_TexTGVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_TexTGVertexCxformEAlphaInv : register(b0) { 
float4 VS_TexTGVertexCxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformEAlphaInv_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformEAlphaInv
void VS_TexTGVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformEAlphaInv_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformEAlphaInv_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformEAlphaInv_cxadd;
    fucxmul = VS_TexTGVertexCxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformEAlphaInv
void PS_TexTGVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformEAlphaInv();
		PixelShader = PS_TexTGVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_TexTGVertexCxformAc : register(b0) { 
float4 VS_TexTGVertexCxformAc_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformAc_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformAc_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformAc_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformAc
void VS_TexTGVertexCxformAc( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformAc_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformAc_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformAc_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformAc_cxadd;
    fucxmul = VS_TexTGVertexCxformAc_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformAc
void PS_TexTGVertexCxformAc( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformAc();
		PixelShader = PS_TexTGVertexCxformAc();
	}
}


cbuffer CB_VS_TexTGVertexCxformAcMul : register(b0) { 
float4 VS_TexTGVertexCxformAcMul_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformAcMul_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformAcMul_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformAcMul_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformAcMul
void VS_TexTGVertexCxformAcMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformAcMul_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformAcMul_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformAcMul_cxadd;
    fucxmul = VS_TexTGVertexCxformAcMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformAcMul
void PS_TexTGVertexCxformAcMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformAcMul();
		PixelShader = PS_TexTGVertexCxformAcMul();
	}
}


cbuffer CB_VS_TexTGVertexCxformAcInv : register(b0) { 
float4 VS_TexTGVertexCxformAcInv_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformAcInv_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformAcInv_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformAcInv_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformAcInv
void VS_TexTGVertexCxformAcInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformAcInv_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformAcInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformAcInv_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformAcInv_cxadd;
    fucxmul = VS_TexTGVertexCxformAcInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformAcInv
void PS_TexTGVertexCxformAcInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformAcInv();
		PixelShader = PS_TexTGVertexCxformAcInv();
	}
}


cbuffer CB_VS_TexTGVertexCxformAcEAlpha : register(b0) { 
float4 VS_TexTGVertexCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformAcEAlpha_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformAcEAlpha_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformAcEAlpha
void VS_TexTGVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformAcEAlpha_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformAcEAlpha_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformAcEAlpha_cxadd;
    fucxmul = VS_TexTGVertexCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformAcEAlpha
void PS_TexTGVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformAcEAlpha();
		PixelShader = PS_TexTGVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_TexTGVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_TexTGVertexCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformAcEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformAcEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformAcEAlphaMul
void VS_TexTGVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformAcEAlphaMul_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformAcEAlphaMul_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformAcEAlphaMul_cxadd;
    fucxmul = VS_TexTGVertexCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformAcEAlphaMul
void PS_TexTGVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformAcEAlphaMul();
		PixelShader = PS_TexTGVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_TexTGVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_TexTGVertexCxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_TexTGVertexCxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_TexTGVertexCxformAcEAlphaInv_mvp[2] : packoffset(c2);
float4 VS_TexTGVertexCxformAcEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_TexTGVertexCxformAcEAlphaInv
void VS_TexTGVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGVertexCxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_TexTGVertexCxformAcEAlphaInv_mvp[1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_TexTGVertexCxformAcEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_TexTGVertexCxformAcEAlphaInv_texgen[1]);
    

    fucxadd = VS_TexTGVertexCxformAcEAlphaInv_cxadd;
    fucxmul = VS_TexTGVertexCxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_TexTGVertexCxformAcEAlphaInv
void PS_TexTGVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexTGVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_TexTGVertexCxformAcEAlphaInv();
		PixelShader = PS_TexTGVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTG : register(b0) { 
float4 VS_Position3dTexTG_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTG_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTG
void VS_Position3dTexTG( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTG_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTG_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTG_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTG_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTG_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTG_texgen[1]);
    
}

//PS_Position3dTexTG
void PS_Position3dTexTG( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique Position3dTexTG
{
	pass p0
	{
		VertexShader = VS_Position3dTexTG();
		PixelShader = PS_Position3dTexTG();
	}
}


cbuffer CB_VS_Position3dTexTGTexDensity : register(b0) { 
float4 VS_Position3dTexTGTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexDensity_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGTexDensity
void VS_Position3dTexTGTexDensity( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexDensity_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexDensity_texgen[1]);
    
}

cbuffer CB_PS_Position3dTexTGTexDensity : register(b0) { 
float PS_Position3dTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dTexTGTexDensity
void PS_Position3dTexTGTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexDensity();
		PixelShader = PS_Position3dTexTGTexDensity();
	}
}


cbuffer CB_VS_Position3dTexTGMul : register(b0) { 
float4 VS_Position3dTexTGMul_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGMul_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGMul
void VS_Position3dTexTGMul( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGMul_texgen[1]);
    
}

//PS_Position3dTexTGMul
void PS_Position3dTexTGMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGMul();
		PixelShader = PS_Position3dTexTGMul();
	}
}


cbuffer CB_VS_Position3dTexTGInv : register(b0) { 
float4 VS_Position3dTexTGInv_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGInv_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGInv
void VS_Position3dTexTGInv( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGInv_texgen[1]);
    
}

//PS_Position3dTexTGInv
void PS_Position3dTexTGInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGInv();
		PixelShader = PS_Position3dTexTGInv();
	}
}


cbuffer CB_VS_Position3dTexTGEAlpha : register(b0) { 
float4 VS_Position3dTexTGEAlpha_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGEAlpha_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGEAlpha
void VS_Position3dTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGEAlpha_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGEAlpha
void PS_Position3dTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGEAlpha();
		PixelShader = PS_Position3dTexTGEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGEAlphaTexDensity : register(b0) { 
float4 VS_Position3dTexTGEAlphaTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGEAlphaTexDensity_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGEAlphaTexDensity
void VS_Position3dTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGEAlphaTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGEAlphaTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGEAlphaTexDensity_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGEAlphaTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_Position3dTexTGEAlphaTexDensity : register(b0) { 
float PS_Position3dTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dTexTGEAlphaTexDensity
void PS_Position3dTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGEAlphaTexDensity();
		PixelShader = PS_Position3dTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_Position3dTexTGEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGEAlphaMul_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGEAlphaMul
void VS_Position3dTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGEAlphaMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGEAlphaMul
void PS_Position3dTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGEAlphaMul();
		PixelShader = PS_Position3dTexTGEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGEAlphaInv_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGEAlphaInv
void VS_Position3dTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGEAlphaInv_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGEAlphaInv
void PS_Position3dTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGEAlphaInv();
		PixelShader = PS_Position3dTexTGEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTGCxform : register(b0) { 
float4 VS_Position3dTexTGCxform_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxform_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxform_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxform_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxform
void VS_Position3dTexTGCxform( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxform_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxform_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxform_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxform_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxform_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxform_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxform_cxadd;
    fucxmul = VS_Position3dTexTGCxform_cxmul;
    
}

//PS_Position3dTexTGCxform
void PS_Position3dTexTGCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxform
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxform();
		PixelShader = PS_Position3dTexTGCxform();
	}
}


cbuffer CB_VS_Position3dTexTGCxformMul : register(b0) { 
float4 VS_Position3dTexTGCxformMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformMul_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformMul
void VS_Position3dTexTGCxformMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformMul_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformMul_cxadd;
    fucxmul = VS_Position3dTexTGCxformMul_cxmul;
    
}

//PS_Position3dTexTGCxformMul
void PS_Position3dTexTGCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformMul();
		PixelShader = PS_Position3dTexTGCxformMul();
	}
}


cbuffer CB_VS_Position3dTexTGCxformInv : register(b0) { 
float4 VS_Position3dTexTGCxformInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformInv_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformInv
void VS_Position3dTexTGCxformInv( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformInv_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformInv_cxadd;
    fucxmul = VS_Position3dTexTGCxformInv_cxmul;
    
}

//PS_Position3dTexTGCxformInv
void PS_Position3dTexTGCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformInv();
		PixelShader = PS_Position3dTexTGCxformInv();
	}
}


cbuffer CB_VS_Position3dTexTGCxformEAlpha : register(b0) { 
float4 VS_Position3dTexTGCxformEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformEAlpha_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformEAlpha
void VS_Position3dTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformEAlpha_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformEAlpha_cxadd;
    fucxmul = VS_Position3dTexTGCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGCxformEAlpha
void PS_Position3dTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformEAlpha();
		PixelShader = PS_Position3dTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGCxformEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformEAlphaMul_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformEAlphaMul
void VS_Position3dTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformEAlphaMul_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformEAlphaMul_cxadd;
    fucxmul = VS_Position3dTexTGCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGCxformEAlphaMul
void PS_Position3dTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformEAlphaMul();
		PixelShader = PS_Position3dTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGCxformEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGCxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformEAlphaInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformEAlphaInv_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformEAlphaInv
void VS_Position3dTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformEAlphaInv_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformEAlphaInv_cxadd;
    fucxmul = VS_Position3dTexTGCxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGCxformEAlphaInv
void PS_Position3dTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformEAlphaInv();
		PixelShader = PS_Position3dTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTGCxformAc : register(b0) { 
float4 VS_Position3dTexTGCxformAc_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformAc_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformAc_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformAc_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformAc
void VS_Position3dTexTGCxformAc( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformAc_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformAc_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformAc_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformAc_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformAc_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformAc_cxadd;
    fucxmul = VS_Position3dTexTGCxformAc_cxmul;
    
}

//PS_Position3dTexTGCxformAc
void PS_Position3dTexTGCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformAc();
		PixelShader = PS_Position3dTexTGCxformAc();
	}
}


cbuffer CB_VS_Position3dTexTGCxformAcMul : register(b0) { 
float4 VS_Position3dTexTGCxformAcMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformAcMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformAcMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformAcMul_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformAcMul
void VS_Position3dTexTGCxformAcMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformAcMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformAcMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformAcMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformAcMul_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformAcMul_cxadd;
    fucxmul = VS_Position3dTexTGCxformAcMul_cxmul;
    
}

//PS_Position3dTexTGCxformAcMul
void PS_Position3dTexTGCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformAcMul();
		PixelShader = PS_Position3dTexTGCxformAcMul();
	}
}


cbuffer CB_VS_Position3dTexTGCxformAcInv : register(b0) { 
float4 VS_Position3dTexTGCxformAcInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformAcInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformAcInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformAcInv_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformAcInv
void VS_Position3dTexTGCxformAcInv( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformAcInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformAcInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformAcInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformAcInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformAcInv_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformAcInv_cxadd;
    fucxmul = VS_Position3dTexTGCxformAcInv_cxmul;
    
}

//PS_Position3dTexTGCxformAcInv
void PS_Position3dTexTGCxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformAcInv();
		PixelShader = PS_Position3dTexTGCxformAcInv();
	}
}


cbuffer CB_VS_Position3dTexTGCxformAcEAlpha : register(b0) { 
float4 VS_Position3dTexTGCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformAcEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformAcEAlpha_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformAcEAlpha
void VS_Position3dTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformAcEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformAcEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformAcEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformAcEAlpha_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformAcEAlpha_cxadd;
    fucxmul = VS_Position3dTexTGCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGCxformAcEAlpha
void PS_Position3dTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformAcEAlpha();
		PixelShader = PS_Position3dTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformAcEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformAcEAlphaMul_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformAcEAlphaMul
void VS_Position3dTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformAcEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformAcEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformAcEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformAcEAlphaMul_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformAcEAlphaMul_cxadd;
    fucxmul = VS_Position3dTexTGCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGCxformAcEAlphaMul
void PS_Position3dTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformAcEAlphaMul();
		PixelShader = PS_Position3dTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGCxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGCxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGCxformAcEAlphaInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGCxformAcEAlphaInv_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGCxformAcEAlphaInv
void VS_Position3dTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGCxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGCxformAcEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGCxformAcEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGCxformAcEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGCxformAcEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGCxformAcEAlphaInv_texgen[1]);
    

    fucxadd = VS_Position3dTexTGCxformAcEAlphaInv_cxadd;
    fucxmul = VS_Position3dTexTGCxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGCxformAcEAlphaInv
void PS_Position3dTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGCxformAcEAlphaInv();
		PixelShader = PS_Position3dTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_Position3dVertex : register(b0) { 
float4 VS_Position3dVertex_mvp[4] : packoffset(c0);
};

//VS_Position3dVertex
void VS_Position3dVertex( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertex_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertex_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertex_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertex_mvp[3]);
    

    color = acolor;
    
}

//PS_Position3dVertex
void PS_Position3dVertex( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = fcolor;
    
}

technique Position3dVertex
{
	pass p0
	{
		VertexShader = VS_Position3dVertex();
		PixelShader = PS_Position3dVertex();
	}
}


cbuffer CB_VS_Position3dVertexMul : register(b0) { 
float4 VS_Position3dVertexMul_mvp[4] : packoffset(c0);
};

//VS_Position3dVertexMul
void VS_Position3dVertexMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexMul_mvp[3]);
    

    color = acolor;
    
}

//PS_Position3dVertexMul
void PS_Position3dVertexMul( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexMul
{
	pass p0
	{
		VertexShader = VS_Position3dVertexMul();
		PixelShader = PS_Position3dVertexMul();
	}
}


cbuffer CB_VS_Position3dVertexInv : register(b0) { 
float4 VS_Position3dVertexInv_mvp[4] : packoffset(c0);
};

//VS_Position3dVertexInv
void VS_Position3dVertexInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexInv_mvp[3]);
    

    color = acolor;
    
}

//PS_Position3dVertexInv
void PS_Position3dVertexInv( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dVertexInv
{
	pass p0
	{
		VertexShader = VS_Position3dVertexInv();
		PixelShader = PS_Position3dVertexInv();
	}
}


cbuffer CB_VS_Position3dVertexEAlpha : register(b0) { 
float4 VS_Position3dVertexEAlpha_mvp[4] : packoffset(c0);
};

//VS_Position3dVertexEAlpha
void VS_Position3dVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexEAlpha_mvp[3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_Position3dVertexEAlpha
void PS_Position3dVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dVertexEAlpha();
		PixelShader = PS_Position3dVertexEAlpha();
	}
}


cbuffer CB_VS_Position3dVertexEAlphaMul : register(b0) { 
float4 VS_Position3dVertexEAlphaMul_mvp[4] : packoffset(c0);
};

//VS_Position3dVertexEAlphaMul
void VS_Position3dVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexEAlphaMul_mvp[3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_Position3dVertexEAlphaMul
void PS_Position3dVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dVertexEAlphaMul();
		PixelShader = PS_Position3dVertexEAlphaMul();
	}
}


cbuffer CB_VS_Position3dVertexEAlphaInv : register(b0) { 
float4 VS_Position3dVertexEAlphaInv_mvp[4] : packoffset(c0);
};

//VS_Position3dVertexEAlphaInv
void VS_Position3dVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexEAlphaInv_mvp[3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_Position3dVertexEAlphaInv
void PS_Position3dVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dVertexEAlphaInv();
		PixelShader = PS_Position3dVertexEAlphaInv();
	}
}


cbuffer CB_VS_Position3dVertexCxform : register(b0) { 
float4 VS_Position3dVertexCxform_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxform_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxform_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxform
void VS_Position3dVertexCxform( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxform_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxform_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxform_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxform_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxform_cxadd;
    fucxmul = VS_Position3dVertexCxform_cxmul;
    
}

//PS_Position3dVertexCxform
void PS_Position3dVertexCxform( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxform
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxform();
		PixelShader = PS_Position3dVertexCxform();
	}
}


cbuffer CB_VS_Position3dVertexCxformMul : register(b0) { 
float4 VS_Position3dVertexCxformMul_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformMul_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformMul_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformMul
void VS_Position3dVertexCxformMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformMul_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformMul_cxadd;
    fucxmul = VS_Position3dVertexCxformMul_cxmul;
    
}

//PS_Position3dVertexCxformMul
void PS_Position3dVertexCxformMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformMul();
		PixelShader = PS_Position3dVertexCxformMul();
	}
}


cbuffer CB_VS_Position3dVertexCxformInv : register(b0) { 
float4 VS_Position3dVertexCxformInv_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformInv_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformInv_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformInv
void VS_Position3dVertexCxformInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformInv_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformInv_cxadd;
    fucxmul = VS_Position3dVertexCxformInv_cxmul;
    
}

//PS_Position3dVertexCxformInv
void PS_Position3dVertexCxformInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformInv();
		PixelShader = PS_Position3dVertexCxformInv();
	}
}


cbuffer CB_VS_Position3dVertexCxformEAlpha : register(b0) { 
float4 VS_Position3dVertexCxformEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformEAlpha_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformEAlpha
void VS_Position3dVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformEAlpha_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformEAlpha_cxadd;
    fucxmul = VS_Position3dVertexCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dVertexCxformEAlpha
void PS_Position3dVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformEAlpha();
		PixelShader = PS_Position3dVertexCxformEAlpha();
	}
}


cbuffer CB_VS_Position3dVertexCxformEAlphaMul : register(b0) { 
float4 VS_Position3dVertexCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformEAlphaMul_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformEAlphaMul
void VS_Position3dVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformEAlphaMul_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformEAlphaMul_cxadd;
    fucxmul = VS_Position3dVertexCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dVertexCxformEAlphaMul
void PS_Position3dVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformEAlphaMul();
		PixelShader = PS_Position3dVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_Position3dVertexCxformEAlphaInv : register(b0) { 
float4 VS_Position3dVertexCxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformEAlphaInv_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformEAlphaInv
void VS_Position3dVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformEAlphaInv_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformEAlphaInv_cxadd;
    fucxmul = VS_Position3dVertexCxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dVertexCxformEAlphaInv
void PS_Position3dVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformEAlphaInv();
		PixelShader = PS_Position3dVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_Position3dVertexCxformAc : register(b0) { 
float4 VS_Position3dVertexCxformAc_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformAc_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformAc_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformAc
void VS_Position3dVertexCxformAc( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformAc_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformAc_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformAc_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformAc_cxadd;
    fucxmul = VS_Position3dVertexCxformAc_cxmul;
    
}

//PS_Position3dVertexCxformAc
void PS_Position3dVertexCxformAc( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformAc();
		PixelShader = PS_Position3dVertexCxformAc();
	}
}


cbuffer CB_VS_Position3dVertexCxformAcMul : register(b0) { 
float4 VS_Position3dVertexCxformAcMul_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformAcMul_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformAcMul_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformAcMul
void VS_Position3dVertexCxformAcMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformAcMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformAcMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformAcMul_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformAcMul_cxadd;
    fucxmul = VS_Position3dVertexCxformAcMul_cxmul;
    
}

//PS_Position3dVertexCxformAcMul
void PS_Position3dVertexCxformAcMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformAcMul();
		PixelShader = PS_Position3dVertexCxformAcMul();
	}
}


cbuffer CB_VS_Position3dVertexCxformAcInv : register(b0) { 
float4 VS_Position3dVertexCxformAcInv_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformAcInv_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformAcInv_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformAcInv
void VS_Position3dVertexCxformAcInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformAcInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformAcInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformAcInv_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformAcInv_cxadd;
    fucxmul = VS_Position3dVertexCxformAcInv_cxmul;
    
}

//PS_Position3dVertexCxformAcInv
void PS_Position3dVertexCxformAcInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformAcInv();
		PixelShader = PS_Position3dVertexCxformAcInv();
	}
}


cbuffer CB_VS_Position3dVertexCxformAcEAlpha : register(b0) { 
float4 VS_Position3dVertexCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformAcEAlpha_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformAcEAlpha
void VS_Position3dVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformAcEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformAcEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformAcEAlpha_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformAcEAlpha_cxadd;
    fucxmul = VS_Position3dVertexCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dVertexCxformAcEAlpha
void PS_Position3dVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformAcEAlpha();
		PixelShader = PS_Position3dVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_Position3dVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_Position3dVertexCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformAcEAlphaMul_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformAcEAlphaMul
void VS_Position3dVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformAcEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformAcEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformAcEAlphaMul_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformAcEAlphaMul_cxadd;
    fucxmul = VS_Position3dVertexCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dVertexCxformAcEAlphaMul
void PS_Position3dVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformAcEAlphaMul();
		PixelShader = PS_Position3dVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_Position3dVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_Position3dVertexCxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dVertexCxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dVertexCxformAcEAlphaInv_mvp[4] : packoffset(c2);
};

//VS_Position3dVertexCxformAcEAlphaInv
void VS_Position3dVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dVertexCxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dVertexCxformAcEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dVertexCxformAcEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dVertexCxformAcEAlphaInv_mvp[3]);
    

    color = acolor;
    

    fucxadd = VS_Position3dVertexCxformAcEAlphaInv_cxadd;
    fucxmul = VS_Position3dVertexCxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dVertexCxformAcEAlphaInv
void PS_Position3dVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dVertexCxformAcEAlphaInv();
		PixelShader = PS_Position3dVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTGTexTG : register(b0) { 
float4 VS_Position3dTexTGTexTG_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexTG_texgen[4] : packoffset(c4);
};

//VS_Position3dTexTGTexTG
void VS_Position3dTexTGTexTG( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTG_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTG_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTG_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTG_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTG_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTG_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTG_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTG_texgen[3]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTG
void PS_Position3dTexTGTexTG( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTG
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTG();
		PixelShader = PS_Position3dTexTGTexTG();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGTexDensity : register(b0) { 
float4 VS_Position3dTexTGTexTGTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexTGTexDensity_texgen[4] : packoffset(c4);
};

//VS_Position3dTexTGTexTGTexDensity
void VS_Position3dTexTGTexTGTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGTexDensity_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGTexDensity_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGTexDensity_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGTexDensity_texgen[3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_Position3dTexTGTexTGTexDensity : register(b0) { 
float PS_Position3dTexTGTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dTexTGTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dTexTGTexTGTexDensity
void PS_Position3dTexTGTexTGTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dTexTGTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dTexTGTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dTexTGTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dTexTGTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGTexDensity();
		PixelShader = PS_Position3dTexTGTexTGTexDensity();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGMul : register(b0) { 
float4 VS_Position3dTexTGTexTGMul_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexTGMul_texgen[4] : packoffset(c4);
};

//VS_Position3dTexTGTexTGMul
void VS_Position3dTexTGTexTGMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGMul_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGMul_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGMul_texgen[3]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGMul
void PS_Position3dTexTGTexTGMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGMul();
		PixelShader = PS_Position3dTexTGTexTGMul();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGInv : register(b0) { 
float4 VS_Position3dTexTGTexTGInv_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexTGInv_texgen[4] : packoffset(c4);
};

//VS_Position3dTexTGTexTGInv
void VS_Position3dTexTGTexTGInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGInv_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGInv_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGInv_texgen[3]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGInv
void PS_Position3dTexTGTexTGInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGInv();
		PixelShader = PS_Position3dTexTGTexTGInv();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGEAlpha : register(b0) { 
float4 VS_Position3dTexTGTexTGEAlpha_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexTGEAlpha_texgen[4] : packoffset(c4);
};

//VS_Position3dTexTGTexTGEAlpha
void VS_Position3dTexTGTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGEAlpha_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGEAlpha_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGEAlpha_texgen[3]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGEAlpha
void PS_Position3dTexTGTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGEAlpha();
		PixelShader = PS_Position3dTexTGTexTGEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGEAlphaTexDensity : register(b0) { 
float4 VS_Position3dTexTGTexTGEAlphaTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexTGEAlphaTexDensity_texgen[4] : packoffset(c4);
};

//VS_Position3dTexTGTexTGEAlphaTexDensity
void VS_Position3dTexTGTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGEAlphaTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGEAlphaTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGEAlphaTexDensity_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGEAlphaTexDensity_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGEAlphaTexDensity_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGEAlphaTexDensity_texgen[3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_Position3dTexTGTexTGEAlphaTexDensity : register(b0) { 
float PS_Position3dTexTGTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dTexTGTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dTexTGTexTGEAlphaTexDensity
void PS_Position3dTexTGTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dTexTGTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dTexTGTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dTexTGTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dTexTGTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGEAlphaTexDensity();
		PixelShader = PS_Position3dTexTGTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGTexTGEAlphaMul_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexTGEAlphaMul_texgen[4] : packoffset(c4);
};

//VS_Position3dTexTGTexTGEAlphaMul
void VS_Position3dTexTGTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGEAlphaMul_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGEAlphaMul_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGEAlphaMul_texgen[3]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGEAlphaMul
void PS_Position3dTexTGTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGEAlphaMul();
		PixelShader = PS_Position3dTexTGTexTGEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGTexTGEAlphaInv_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGTexTGEAlphaInv_texgen[4] : packoffset(c4);
};

//VS_Position3dTexTGTexTGEAlphaInv
void VS_Position3dTexTGTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGEAlphaInv_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGEAlphaInv_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGEAlphaInv_texgen[3]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGEAlphaInv
void PS_Position3dTexTGTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGEAlphaInv();
		PixelShader = PS_Position3dTexTGTexTGEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxform : register(b0) { 
float4 VS_Position3dTexTGTexTGCxform_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxform_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxform_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxform_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxform
void VS_Position3dTexTGTexTGCxform( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxform_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxform_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxform_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxform_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxform_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxform_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxform_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxform_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxform_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxform_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxform
void PS_Position3dTexTGTexTGCxform( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxform
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxform();
		PixelShader = PS_Position3dTexTGTexTGCxform();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformMul : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformMul_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformMul
void VS_Position3dTexTGTexTGCxformMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformMul_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformMul_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformMul_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformMul_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformMul
void PS_Position3dTexTGTexTGCxformMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformMul();
		PixelShader = PS_Position3dTexTGTexTGCxformMul();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformInv : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformInv_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformInv
void VS_Position3dTexTGTexTGCxformInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformInv_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformInv_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformInv_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformInv_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformInv
void PS_Position3dTexTGTexTGCxformInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformInv();
		PixelShader = PS_Position3dTexTGTexTGCxformInv();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformEAlpha : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformEAlpha_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformEAlpha
void VS_Position3dTexTGTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlpha_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlpha_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlpha_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformEAlpha_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformEAlpha
void PS_Position3dTexTGTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformEAlpha();
		PixelShader = PS_Position3dTexTGTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformEAlphaMul_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformEAlphaMul
void VS_Position3dTexTGTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaMul_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaMul_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaMul_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformEAlphaMul_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformEAlphaMul
void PS_Position3dTexTGTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformEAlphaMul();
		PixelShader = PS_Position3dTexTGTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformEAlphaInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformEAlphaInv_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformEAlphaInv
void VS_Position3dTexTGTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaInv_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaInv_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformEAlphaInv_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformEAlphaInv_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformEAlphaInv
void PS_Position3dTexTGTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformEAlphaInv();
		PixelShader = PS_Position3dTexTGTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformAc : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformAc_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformAc_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformAc_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformAc_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformAc
void VS_Position3dTexTGTexTGCxformAc( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformAc_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformAc_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformAc_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformAc_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformAc_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformAc_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformAc_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformAc_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformAc_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformAc
void PS_Position3dTexTGTexTGCxformAc( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformAc();
		PixelShader = PS_Position3dTexTGTexTGCxformAc();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformAcMul : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformAcMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformAcMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformAcMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformAcMul_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformAcMul
void VS_Position3dTexTGTexTGCxformAcMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformAcMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformAcMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformAcMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformAcMul_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformAcMul_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformAcMul_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformAcMul_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformAcMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformAcMul
void PS_Position3dTexTGTexTGCxformAcMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformAcMul();
		PixelShader = PS_Position3dTexTGTexTGCxformAcMul();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformAcInv : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformAcInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformAcInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformAcInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformAcInv_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformAcInv
void VS_Position3dTexTGTexTGCxformAcInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformAcInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformAcInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformAcInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformAcInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformAcInv_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformAcInv_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformAcInv_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformAcInv_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformAcInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformAcInv
void PS_Position3dTexTGTexTGCxformAcInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformAcInv();
		PixelShader = PS_Position3dTexTGTexTGCxformAcInv();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformAcEAlpha : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformAcEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformAcEAlpha_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformAcEAlpha
void VS_Position3dTexTGTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlpha_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlpha_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlpha_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformAcEAlpha_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformAcEAlpha
void PS_Position3dTexTGTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformAcEAlpha();
		PixelShader = PS_Position3dTexTGTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformAcEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformAcEAlphaMul_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformAcEAlphaMul
void VS_Position3dTexTGTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaMul_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaMul_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaMul_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformAcEAlphaMul_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformAcEAlphaMul
void PS_Position3dTexTGTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformAcEAlphaMul();
		PixelShader = PS_Position3dTexTGTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGTexTGCxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGTexTGCxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGTexTGCxformAcEAlphaInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGTexTGCxformAcEAlphaInv_texgen[4] : packoffset(c6);
};

//VS_Position3dTexTGTexTGCxformAcEAlphaInv
void VS_Position3dTexTGTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaInv_texgen[1]);
    tc1.x = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaInv_texgen[2]);
    tc1.y = dot(pos, VS_Position3dTexTGTexTGCxformAcEAlphaInv_texgen[3]);
    

    fucxadd = VS_Position3dTexTGTexTGCxformAcEAlphaInv_cxadd;
    fucxmul = VS_Position3dTexTGTexTGCxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGTexTGCxformAcEAlphaInv
void PS_Position3dTexTGTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGTexTGCxformAcEAlphaInv();
		PixelShader = PS_Position3dTexTGTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTGVertex : register(b0) { 
float4 VS_Position3dTexTGVertex_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGVertex_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGVertex
void VS_Position3dTexTGVertex( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertex_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertex_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertex_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertex_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertex_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertex_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertex
void PS_Position3dTexTGVertex( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertex
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertex();
		PixelShader = PS_Position3dTexTGVertex();
	}
}


cbuffer CB_VS_Position3dTexTGVertexTexDensity : register(b0) { 
float4 VS_Position3dTexTGVertexTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGVertexTexDensity_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGVertexTexDensity
void VS_Position3dTexTGVertexTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexTexDensity_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_Position3dTexTGVertexTexDensity : register(b0) { 
float PS_Position3dTexTGVertexTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dTexTGVertexTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dTexTGVertexTexDensity
void PS_Position3dTexTGVertexTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dTexTGVertexTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dTexTGVertexTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dTexTGVertexTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dTexTGVertexTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexTexDensity();
		PixelShader = PS_Position3dTexTGVertexTexDensity();
	}
}


cbuffer CB_VS_Position3dTexTGVertexMul : register(b0) { 
float4 VS_Position3dTexTGVertexMul_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGVertexMul_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGVertexMul
void VS_Position3dTexTGVertexMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexMul_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexMul
void PS_Position3dTexTGVertexMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexMul();
		PixelShader = PS_Position3dTexTGVertexMul();
	}
}


cbuffer CB_VS_Position3dTexTGVertexInv : register(b0) { 
float4 VS_Position3dTexTGVertexInv_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGVertexInv_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGVertexInv
void VS_Position3dTexTGVertexInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexInv_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexInv_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexInv
void PS_Position3dTexTGVertexInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexInv();
		PixelShader = PS_Position3dTexTGVertexInv();
	}
}


cbuffer CB_VS_Position3dTexTGVertexEAlpha : register(b0) { 
float4 VS_Position3dTexTGVertexEAlpha_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGVertexEAlpha_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGVertexEAlpha
void VS_Position3dTexTGVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexEAlpha_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexEAlpha_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexEAlpha
void PS_Position3dTexTGVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexEAlpha();
		PixelShader = PS_Position3dTexTGVertexEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGVertexEAlphaTexDensity : register(b0) { 
float4 VS_Position3dTexTGVertexEAlphaTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGVertexEAlphaTexDensity_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGVertexEAlphaTexDensity
void VS_Position3dTexTGVertexEAlphaTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexEAlphaTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexEAlphaTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexEAlphaTexDensity_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexEAlphaTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_Position3dTexTGVertexEAlphaTexDensity : register(b0) { 
float PS_Position3dTexTGVertexEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dTexTGVertexEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dTexTGVertexEAlphaTexDensity
void PS_Position3dTexTGVertexEAlphaTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dTexTGVertexEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dTexTGVertexEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dTexTGVertexEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dTexTGVertexEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexEAlphaTexDensity();
		PixelShader = PS_Position3dTexTGVertexEAlphaTexDensity();
	}
}


cbuffer CB_VS_Position3dTexTGVertexEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGVertexEAlphaMul_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGVertexEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGVertexEAlphaMul
void VS_Position3dTexTGVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexEAlphaMul_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexEAlphaMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexEAlphaMul
void PS_Position3dTexTGVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexEAlphaMul();
		PixelShader = PS_Position3dTexTGVertexEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGVertexEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGVertexEAlphaInv_mvp[4] : packoffset(c0);
float4 VS_Position3dTexTGVertexEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_Position3dTexTGVertexEAlphaInv
void VS_Position3dTexTGVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexEAlphaInv_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexEAlphaInv_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexEAlphaInv
void PS_Position3dTexTGVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexEAlphaInv();
		PixelShader = PS_Position3dTexTGVertexEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxform : register(b0) { 
float4 VS_Position3dTexTGVertexCxform_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxform_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxform_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxform_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxform
void VS_Position3dTexTGVertexCxform( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxform_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxform_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxform_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxform_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxform_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxform_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxform_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxform_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxform
void PS_Position3dTexTGVertexCxform( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxform
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxform();
		PixelShader = PS_Position3dTexTGVertexCxform();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformMul : register(b0) { 
float4 VS_Position3dTexTGVertexCxformMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformMul_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformMul
void VS_Position3dTexTGVertexCxformMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformMul_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformMul_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformMul_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformMul
void PS_Position3dTexTGVertexCxformMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformMul();
		PixelShader = PS_Position3dTexTGVertexCxformMul();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformInv : register(b0) { 
float4 VS_Position3dTexTGVertexCxformInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformInv_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformInv
void VS_Position3dTexTGVertexCxformInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformInv_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformInv_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformInv_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformInv
void PS_Position3dTexTGVertexCxformInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformInv();
		PixelShader = PS_Position3dTexTGVertexCxformInv();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformEAlpha : register(b0) { 
float4 VS_Position3dTexTGVertexCxformEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformEAlpha_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformEAlpha
void VS_Position3dTexTGVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformEAlpha_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformEAlpha_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformEAlpha_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformEAlpha
void PS_Position3dTexTGVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformEAlpha();
		PixelShader = PS_Position3dTexTGVertexCxformEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGVertexCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformEAlphaMul_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformEAlphaMul
void VS_Position3dTexTGVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformEAlphaMul_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformEAlphaMul_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformEAlphaMul_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformEAlphaMul
void PS_Position3dTexTGVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformEAlphaMul();
		PixelShader = PS_Position3dTexTGVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGVertexCxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformEAlphaInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformEAlphaInv_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformEAlphaInv
void VS_Position3dTexTGVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformEAlphaInv_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformEAlphaInv_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformEAlphaInv_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformEAlphaInv
void PS_Position3dTexTGVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformEAlphaInv();
		PixelShader = PS_Position3dTexTGVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformAc : register(b0) { 
float4 VS_Position3dTexTGVertexCxformAc_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformAc_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformAc_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformAc_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformAc
void VS_Position3dTexTGVertexCxformAc( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformAc_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformAc_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformAc_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformAc_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformAc_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformAc_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformAc_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformAc
void PS_Position3dTexTGVertexCxformAc( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformAc();
		PixelShader = PS_Position3dTexTGVertexCxformAc();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformAcMul : register(b0) { 
float4 VS_Position3dTexTGVertexCxformAcMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformAcMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformAcMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformAcMul_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformAcMul
void VS_Position3dTexTGVertexCxformAcMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformAcMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformAcMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformAcMul_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformAcMul_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformAcMul_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformAcMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformAcMul
void PS_Position3dTexTGVertexCxformAcMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformAcMul();
		PixelShader = PS_Position3dTexTGVertexCxformAcMul();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformAcInv : register(b0) { 
float4 VS_Position3dTexTGVertexCxformAcInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformAcInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformAcInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformAcInv_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformAcInv
void VS_Position3dTexTGVertexCxformAcInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformAcInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformAcInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformAcInv_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformAcInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformAcInv_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformAcInv_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformAcInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformAcInv
void PS_Position3dTexTGVertexCxformAcInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformAcInv();
		PixelShader = PS_Position3dTexTGVertexCxformAcInv();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformAcEAlpha : register(b0) { 
float4 VS_Position3dTexTGVertexCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformAcEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformAcEAlpha_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformAcEAlpha
void VS_Position3dTexTGVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformAcEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformAcEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformAcEAlpha_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformAcEAlpha_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformAcEAlpha_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformAcEAlpha
void PS_Position3dTexTGVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformAcEAlpha();
		PixelShader = PS_Position3dTexTGVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_Position3dTexTGVertexCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformAcEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformAcEAlphaMul_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformAcEAlphaMul
void VS_Position3dTexTGVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaMul_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaMul_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformAcEAlphaMul_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformAcEAlphaMul
void PS_Position3dTexTGVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformAcEAlphaMul();
		PixelShader = PS_Position3dTexTGVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_Position3dTexTGVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_Position3dTexTGVertexCxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dTexTGVertexCxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dTexTGVertexCxformAcEAlphaInv_mvp[4] : packoffset(c2);
float4 VS_Position3dTexTGVertexCxformAcEAlphaInv_texgen[2] : packoffset(c6);
};

//VS_Position3dTexTGVertexCxformAcEAlphaInv
void VS_Position3dTexTGVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaInv_mvp[3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dTexTGVertexCxformAcEAlphaInv_texgen[1]);
    

    fucxadd = VS_Position3dTexTGVertexCxformAcEAlphaInv_cxadd;
    fucxmul = VS_Position3dTexTGVertexCxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dTexTGVertexCxformAcEAlphaInv
void PS_Position3dTexTGVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexTGVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexTGVertexCxformAcEAlphaInv();
		PixelShader = PS_Position3dTexTGVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTG : register(b0) { 
float4 VS_BatchTexTG_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTG
void VS_BatchTexTG( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTG_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTG_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTG_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTG_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_BatchTexTG
void PS_BatchTexTG( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique BatchTexTG
{
	pass p0
	{
		VertexShader = VS_BatchTexTG();
		PixelShader = PS_BatchTexTG();
	}
}


cbuffer CB_VS_BatchTexTGTexDensity : register(b0) { 
float4 VS_BatchTexTGTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGTexDensity
void VS_BatchTexTGTexDensity( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchTexTGTexDensity : register(b0) { 
float PS_BatchTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_BatchTexTGTexDensity
void PS_BatchTexTGTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexDensity();
		PixelShader = PS_BatchTexTGTexDensity();
	}
}


cbuffer CB_VS_BatchTexTGMul : register(b0) { 
float4 VS_BatchTexTGMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGMul
void VS_BatchTexTGMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_BatchTexTGMul
void PS_BatchTexTGMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGMul();
		PixelShader = PS_BatchTexTGMul();
	}
}


cbuffer CB_VS_BatchTexTGInv : register(b0) { 
float4 VS_BatchTexTGInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGInv
void VS_BatchTexTGInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_BatchTexTGInv
void PS_BatchTexTGInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGInv();
		PixelShader = PS_BatchTexTGInv();
	}
}


cbuffer CB_VS_BatchTexTGEAlpha : register(b0) { 
float4 VS_BatchTexTGEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGEAlpha
void VS_BatchTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGEAlpha
void PS_BatchTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGEAlpha();
		PixelShader = PS_BatchTexTGEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGEAlphaTexDensity : register(b0) { 
float4 VS_BatchTexTGEAlphaTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGEAlphaTexDensity
void VS_BatchTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchTexTGEAlphaTexDensity : register(b0) { 
float PS_BatchTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchTexTGEAlphaTexDensity
void PS_BatchTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchTexTGEAlphaTexDensity();
		PixelShader = PS_BatchTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchTexTGEAlphaMul : register(b0) { 
float4 VS_BatchTexTGEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGEAlphaMul
void VS_BatchTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGEAlphaMul
void PS_BatchTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGEAlphaMul();
		PixelShader = PS_BatchTexTGEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGEAlphaInv : register(b0) { 
float4 VS_BatchTexTGEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGEAlphaInv
void VS_BatchTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGEAlphaInv
void PS_BatchTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGEAlphaInv();
		PixelShader = PS_BatchTexTGEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTGCxform : register(b0) { 
float4 VS_BatchTexTGCxform_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxform
void VS_BatchTexTGCxform( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchTexTGCxform
void PS_BatchTexTGCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxform
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxform();
		PixelShader = PS_BatchTexTGCxform();
	}
}


cbuffer CB_VS_BatchTexTGCxformMul : register(b0) { 
float4 VS_BatchTexTGCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformMul
void VS_BatchTexTGCxformMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchTexTGCxformMul
void PS_BatchTexTGCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformMul();
		PixelShader = PS_BatchTexTGCxformMul();
	}
}


cbuffer CB_VS_BatchTexTGCxformInv : register(b0) { 
float4 VS_BatchTexTGCxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformInv
void VS_BatchTexTGCxformInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchTexTGCxformInv
void PS_BatchTexTGCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformInv();
		PixelShader = PS_BatchTexTGCxformInv();
	}
}


cbuffer CB_VS_BatchTexTGCxformEAlpha : register(b0) { 
float4 VS_BatchTexTGCxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformEAlpha
void VS_BatchTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGCxformEAlpha
void PS_BatchTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformEAlpha();
		PixelShader = PS_BatchTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGCxformEAlphaMul : register(b0) { 
float4 VS_BatchTexTGCxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformEAlphaMul
void VS_BatchTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGCxformEAlphaMul
void PS_BatchTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformEAlphaMul();
		PixelShader = PS_BatchTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGCxformEAlphaInv : register(b0) { 
float4 VS_BatchTexTGCxformEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformEAlphaInv
void VS_BatchTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGCxformEAlphaInv
void PS_BatchTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformEAlphaInv();
		PixelShader = PS_BatchTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTGCxformAc : register(b0) { 
float4 VS_BatchTexTGCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformAc
void VS_BatchTexTGCxformAc( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchTexTGCxformAc
void PS_BatchTexTGCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformAc();
		PixelShader = PS_BatchTexTGCxformAc();
	}
}


cbuffer CB_VS_BatchTexTGCxformAcMul : register(b0) { 
float4 VS_BatchTexTGCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformAcMul
void VS_BatchTexTGCxformAcMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchTexTGCxformAcMul
void PS_BatchTexTGCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformAcMul();
		PixelShader = PS_BatchTexTGCxformAcMul();
	}
}


cbuffer CB_VS_BatchTexTGCxformAcInv : register(b0) { 
float4 VS_BatchTexTGCxformAcInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformAcInv
void VS_BatchTexTGCxformAcInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformAcInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformAcInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchTexTGCxformAcInv
void PS_BatchTexTGCxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformAcInv();
		PixelShader = PS_BatchTexTGCxformAcInv();
	}
}


cbuffer CB_VS_BatchTexTGCxformAcEAlpha : register(b0) { 
float4 VS_BatchTexTGCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformAcEAlpha
void VS_BatchTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGCxformAcEAlpha
void PS_BatchTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformAcEAlpha();
		PixelShader = PS_BatchTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchTexTGCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformAcEAlphaMul
void VS_BatchTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGCxformAcEAlphaMul
void PS_BatchTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformAcEAlphaMul();
		PixelShader = PS_BatchTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_BatchTexTGCxformAcEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGCxformAcEAlphaInv
void VS_BatchTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGCxformAcEAlphaInv
void PS_BatchTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGCxformAcEAlphaInv();
		PixelShader = PS_BatchTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchVertex : register(b0) { 
float4 VS_BatchVertex_vfuniforms[48] : packoffset(c0);
};

//VS_BatchVertex
void VS_BatchVertex( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertex_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertex_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    
}

//PS_BatchVertex
void PS_BatchVertex( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = fcolor;
    
}

technique BatchVertex
{
	pass p0
	{
		VertexShader = VS_BatchVertex();
		PixelShader = PS_BatchVertex();
	}
}


cbuffer CB_VS_BatchVertexMul : register(b0) { 
float4 VS_BatchVertexMul_vfuniforms[48] : packoffset(c0);
};

//VS_BatchVertexMul
void VS_BatchVertexMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    
}

//PS_BatchVertexMul
void PS_BatchVertexMul( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexMul
{
	pass p0
	{
		VertexShader = VS_BatchVertexMul();
		PixelShader = PS_BatchVertexMul();
	}
}


cbuffer CB_VS_BatchVertexInv : register(b0) { 
float4 VS_BatchVertexInv_vfuniforms[48] : packoffset(c0);
};

//VS_BatchVertexInv
void VS_BatchVertexInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    
}

//PS_BatchVertexInv
void PS_BatchVertexInv( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchVertexInv
{
	pass p0
	{
		VertexShader = VS_BatchVertexInv();
		PixelShader = PS_BatchVertexInv();
	}
}


cbuffer CB_VS_BatchVertexEAlpha : register(b0) { 
float4 VS_BatchVertexEAlpha_vfuniforms[48] : packoffset(c0);
};

//VS_BatchVertexEAlpha
void VS_BatchVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexEAlpha_vfuniforms[afactor.b*255.01f * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexEAlpha_vfuniforms[afactor.b*255.01f * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_BatchVertexEAlpha
void PS_BatchVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchVertexEAlpha();
		PixelShader = PS_BatchVertexEAlpha();
	}
}


cbuffer CB_VS_BatchVertexEAlphaMul : register(b0) { 
float4 VS_BatchVertexEAlphaMul_vfuniforms[48] : packoffset(c0);
};

//VS_BatchVertexEAlphaMul
void VS_BatchVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_BatchVertexEAlphaMul
void PS_BatchVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchVertexEAlphaMul();
		PixelShader = PS_BatchVertexEAlphaMul();
	}
}


cbuffer CB_VS_BatchVertexEAlphaInv : register(b0) { 
float4 VS_BatchVertexEAlphaInv_vfuniforms[48] : packoffset(c0);
};

//VS_BatchVertexEAlphaInv
void VS_BatchVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_BatchVertexEAlphaInv
void PS_BatchVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchVertexEAlphaInv();
		PixelShader = PS_BatchVertexEAlphaInv();
	}
}


cbuffer CB_VS_BatchVertexCxform : register(b0) { 
float4 VS_BatchVertexCxform_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxform
void VS_BatchVertexCxform( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxform_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxform_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxform_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxform_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchVertexCxform
void PS_BatchVertexCxform( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchVertexCxform
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxform();
		PixelShader = PS_BatchVertexCxform();
	}
}


cbuffer CB_VS_BatchVertexCxformMul : register(b0) { 
float4 VS_BatchVertexCxformMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformMul
void VS_BatchVertexCxformMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformMul_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchVertexCxformMul
void PS_BatchVertexCxformMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformMul();
		PixelShader = PS_BatchVertexCxformMul();
	}
}


cbuffer CB_VS_BatchVertexCxformInv : register(b0) { 
float4 VS_BatchVertexCxformInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformInv
void VS_BatchVertexCxformInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformInv_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchVertexCxformInv
void PS_BatchVertexCxformInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformInv();
		PixelShader = PS_BatchVertexCxformInv();
	}
}


cbuffer CB_VS_BatchVertexCxformEAlpha : register(b0) { 
float4 VS_BatchVertexCxformEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformEAlpha
void VS_BatchVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchVertexCxformEAlpha
void PS_BatchVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformEAlpha();
		PixelShader = PS_BatchVertexCxformEAlpha();
	}
}


cbuffer CB_VS_BatchVertexCxformEAlphaMul : register(b0) { 
float4 VS_BatchVertexCxformEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformEAlphaMul
void VS_BatchVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchVertexCxformEAlphaMul
void PS_BatchVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformEAlphaMul();
		PixelShader = PS_BatchVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchVertexCxformEAlphaInv : register(b0) { 
float4 VS_BatchVertexCxformEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformEAlphaInv
void VS_BatchVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchVertexCxformEAlphaInv
void PS_BatchVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformEAlphaInv();
		PixelShader = PS_BatchVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchVertexCxformAc : register(b0) { 
float4 VS_BatchVertexCxformAc_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformAc
void VS_BatchVertexCxformAc( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformAc_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformAc_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformAc_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformAc_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchVertexCxformAc
void PS_BatchVertexCxformAc( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformAc();
		PixelShader = PS_BatchVertexCxformAc();
	}
}


cbuffer CB_VS_BatchVertexCxformAcMul : register(b0) { 
float4 VS_BatchVertexCxformAcMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformAcMul
void VS_BatchVertexCxformAcMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformAcMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformAcMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformAcMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformAcMul_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchVertexCxformAcMul
void PS_BatchVertexCxformAcMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformAcMul();
		PixelShader = PS_BatchVertexCxformAcMul();
	}
}


cbuffer CB_VS_BatchVertexCxformAcInv : register(b0) { 
float4 VS_BatchVertexCxformAcInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformAcInv
void VS_BatchVertexCxformAcInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformAcInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformAcInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformAcInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformAcInv_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchVertexCxformAcInv
void PS_BatchVertexCxformAcInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformAcInv();
		PixelShader = PS_BatchVertexCxformAcInv();
	}
}


cbuffer CB_VS_BatchVertexCxformAcEAlpha : register(b0) { 
float4 VS_BatchVertexCxformAcEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformAcEAlpha
void VS_BatchVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchVertexCxformAcEAlpha
void PS_BatchVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformAcEAlpha();
		PixelShader = PS_BatchVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchVertexCxformAcEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformAcEAlphaMul
void VS_BatchVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchVertexCxformAcEAlphaMul
void PS_BatchVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformAcEAlphaMul();
		PixelShader = PS_BatchVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_BatchVertexCxformAcEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchVertexCxformAcEAlphaInv
void VS_BatchVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_BatchVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f];
    fucxmul = VS_BatchVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchVertexCxformAcEAlphaInv
void PS_BatchVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchVertexCxformAcEAlphaInv();
		PixelShader = PS_BatchVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTGTexTG : register(b0) { 
float4 VS_BatchTexTGTexTG_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGTexTG
void VS_BatchTexTGTexTG( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTG_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTG_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTG_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTG_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTG_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTG_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTG
void PS_BatchTexTGTexTG( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTG
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTG();
		PixelShader = PS_BatchTexTGTexTG();
	}
}


cbuffer CB_VS_BatchTexTGTexTGTexDensity : register(b0) { 
float4 VS_BatchTexTGTexTGTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGTexTGTexDensity
void VS_BatchTexTGTexTGTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchTexTGTexTGTexDensity : register(b0) { 
float PS_BatchTexTGTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchTexTGTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_BatchTexTGTexTGTexDensity
void PS_BatchTexTGTexTGTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchTexTGTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchTexTGTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchTexTGTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchTexTGTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGTexDensity();
		PixelShader = PS_BatchTexTGTexTGTexDensity();
	}
}


cbuffer CB_VS_BatchTexTGTexTGMul : register(b0) { 
float4 VS_BatchTexTGTexTGMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGTexTGMul
void VS_BatchTexTGTexTGMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGMul
void PS_BatchTexTGTexTGMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGMul();
		PixelShader = PS_BatchTexTGTexTGMul();
	}
}


cbuffer CB_VS_BatchTexTGTexTGInv : register(b0) { 
float4 VS_BatchTexTGTexTGInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGTexTGInv
void VS_BatchTexTGTexTGInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGInv
void PS_BatchTexTGTexTGInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGInv();
		PixelShader = PS_BatchTexTGTexTGInv();
	}
}


cbuffer CB_VS_BatchTexTGTexTGEAlpha : register(b0) { 
float4 VS_BatchTexTGTexTGEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGTexTGEAlpha
void VS_BatchTexTGTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGEAlpha
void PS_BatchTexTGTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGEAlpha();
		PixelShader = PS_BatchTexTGTexTGEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGTexTGEAlphaTexDensity : register(b0) { 
float4 VS_BatchTexTGTexTGEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGTexTGEAlphaTexDensity
void VS_BatchTexTGTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchTexTGTexTGEAlphaTexDensity : register(b0) { 
float PS_BatchTexTGTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchTexTGTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchTexTGTexTGEAlphaTexDensity
void PS_BatchTexTGTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchTexTGTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchTexTGTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchTexTGTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchTexTGTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGEAlphaTexDensity();
		PixelShader = PS_BatchTexTGTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchTexTGTexTGEAlphaMul : register(b0) { 
float4 VS_BatchTexTGTexTGEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGTexTGEAlphaMul
void VS_BatchTexTGTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGEAlphaMul
void PS_BatchTexTGTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGEAlphaMul();
		PixelShader = PS_BatchTexTGTexTGEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGTexTGEAlphaInv : register(b0) { 
float4 VS_BatchTexTGTexTGEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGTexTGEAlphaInv
void VS_BatchTexTGTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGEAlphaInv
void PS_BatchTexTGTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGEAlphaInv();
		PixelShader = PS_BatchTexTGTexTGEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxform : register(b0) { 
float4 VS_BatchTexTGTexTGCxform_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxform
void VS_BatchTexTGTexTGCxform( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxform
void PS_BatchTexTGTexTGCxform( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxform
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxform();
		PixelShader = PS_BatchTexTGTexTGCxform();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformMul : register(b0) { 
float4 VS_BatchTexTGTexTGCxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformMul
void VS_BatchTexTGTexTGCxformMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformMul
void PS_BatchTexTGTexTGCxformMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformMul();
		PixelShader = PS_BatchTexTGTexTGCxformMul();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformInv : register(b0) { 
float4 VS_BatchTexTGTexTGCxformInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformInv
void VS_BatchTexTGTexTGCxformInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformInv
void PS_BatchTexTGTexTGCxformInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformInv();
		PixelShader = PS_BatchTexTGTexTGCxformInv();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformEAlpha : register(b0) { 
float4 VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformEAlpha
void VS_BatchTexTGTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformEAlpha
void PS_BatchTexTGTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformEAlpha();
		PixelShader = PS_BatchTexTGTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformEAlphaMul : register(b0) { 
float4 VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformEAlphaMul
void VS_BatchTexTGTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformEAlphaMul
void PS_BatchTexTGTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformEAlphaMul();
		PixelShader = PS_BatchTexTGTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformEAlphaInv : register(b0) { 
float4 VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformEAlphaInv
void VS_BatchTexTGTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformEAlphaInv
void PS_BatchTexTGTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformEAlphaInv();
		PixelShader = PS_BatchTexTGTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformAc : register(b0) { 
float4 VS_BatchTexTGTexTGCxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformAc
void VS_BatchTexTGTexTGCxformAc( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformAc
void PS_BatchTexTGTexTGCxformAc( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformAc();
		PixelShader = PS_BatchTexTGTexTGCxformAc();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformAcMul : register(b0) { 
float4 VS_BatchTexTGTexTGCxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformAcMul
void VS_BatchTexTGTexTGCxformAcMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformAcMul
void PS_BatchTexTGTexTGCxformAcMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformAcMul();
		PixelShader = PS_BatchTexTGTexTGCxformAcMul();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformAcInv : register(b0) { 
float4 VS_BatchTexTGTexTGCxformAcInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformAcInv
void VS_BatchTexTGTexTGCxformAcInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformAcInv
void PS_BatchTexTGTexTGCxformAcInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformAcInv();
		PixelShader = PS_BatchTexTGTexTGCxformAcInv();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformAcEAlpha : register(b0) { 
float4 VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformAcEAlpha
void VS_BatchTexTGTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformAcEAlpha
void PS_BatchTexTGTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformAcEAlpha();
		PixelShader = PS_BatchTexTGTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformAcEAlphaMul
void VS_BatchTexTGTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformAcEAlphaMul
void PS_BatchTexTGTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformAcEAlphaMul();
		PixelShader = PS_BatchTexTGTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchTexTGTexTGCxformAcEAlphaInv
void VS_BatchTexTGTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGTexTGCxformAcEAlphaInv
void PS_BatchTexTGTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGTexTGCxformAcEAlphaInv();
		PixelShader = PS_BatchTexTGTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTGVertex : register(b0) { 
float4 VS_BatchTexTGVertex_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGVertex
void VS_BatchTexTGVertex( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertex_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertex_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertex_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertex_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGVertex
void PS_BatchTexTGVertex( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertex
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertex();
		PixelShader = PS_BatchTexTGVertex();
	}
}


cbuffer CB_VS_BatchTexTGVertexTexDensity : register(b0) { 
float4 VS_BatchTexTGVertexTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGVertexTexDensity
void VS_BatchTexTGVertexTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchTexTGVertexTexDensity : register(b0) { 
float PS_BatchTexTGVertexTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchTexTGVertexTexDensity_textureDims : packoffset(c1);
};

//PS_BatchTexTGVertexTexDensity
void PS_BatchTexTGVertexTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchTexTGVertexTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchTexTGVertexTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchTexTGVertexTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchTexTGVertexTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexTexDensity();
		PixelShader = PS_BatchTexTGVertexTexDensity();
	}
}


cbuffer CB_VS_BatchTexTGVertexMul : register(b0) { 
float4 VS_BatchTexTGVertexMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGVertexMul
void VS_BatchTexTGVertexMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexMul
void PS_BatchTexTGVertexMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexMul();
		PixelShader = PS_BatchTexTGVertexMul();
	}
}


cbuffer CB_VS_BatchTexTGVertexInv : register(b0) { 
float4 VS_BatchTexTGVertexInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGVertexInv
void VS_BatchTexTGVertexInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexInv
void PS_BatchTexTGVertexInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexInv();
		PixelShader = PS_BatchTexTGVertexInv();
	}
}


cbuffer CB_VS_BatchTexTGVertexEAlpha : register(b0) { 
float4 VS_BatchTexTGVertexEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGVertexEAlpha
void VS_BatchTexTGVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexEAlpha
void PS_BatchTexTGVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexEAlpha();
		PixelShader = PS_BatchTexTGVertexEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGVertexEAlphaTexDensity : register(b0) { 
float4 VS_BatchTexTGVertexEAlphaTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGVertexEAlphaTexDensity
void VS_BatchTexTGVertexEAlphaTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchTexTGVertexEAlphaTexDensity : register(b0) { 
float PS_BatchTexTGVertexEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchTexTGVertexEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchTexTGVertexEAlphaTexDensity
void PS_BatchTexTGVertexEAlphaTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchTexTGVertexEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchTexTGVertexEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchTexTGVertexEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchTexTGVertexEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexEAlphaTexDensity();
		PixelShader = PS_BatchTexTGVertexEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchTexTGVertexEAlphaMul : register(b0) { 
float4 VS_BatchTexTGVertexEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGVertexEAlphaMul
void VS_BatchTexTGVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexEAlphaMul
void PS_BatchTexTGVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexEAlphaMul();
		PixelShader = PS_BatchTexTGVertexEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGVertexEAlphaInv : register(b0) { 
float4 VS_BatchTexTGVertexEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexTGVertexEAlphaInv
void VS_BatchTexTGVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexEAlphaInv
void PS_BatchTexTGVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexEAlphaInv();
		PixelShader = PS_BatchTexTGVertexEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxform : register(b0) { 
float4 VS_BatchTexTGVertexCxform_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxform
void VS_BatchTexTGVertexCxform( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxform
void PS_BatchTexTGVertexCxform( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxform
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxform();
		PixelShader = PS_BatchTexTGVertexCxform();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformMul : register(b0) { 
float4 VS_BatchTexTGVertexCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformMul
void VS_BatchTexTGVertexCxformMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformMul
void PS_BatchTexTGVertexCxformMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformMul();
		PixelShader = PS_BatchTexTGVertexCxformMul();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformInv : register(b0) { 
float4 VS_BatchTexTGVertexCxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformInv
void VS_BatchTexTGVertexCxformInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformInv
void PS_BatchTexTGVertexCxformInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformInv();
		PixelShader = PS_BatchTexTGVertexCxformInv();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformEAlpha : register(b0) { 
float4 VS_BatchTexTGVertexCxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformEAlpha
void VS_BatchTexTGVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformEAlpha
void PS_BatchTexTGVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformEAlpha();
		PixelShader = PS_BatchTexTGVertexCxformEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformEAlphaMul : register(b0) { 
float4 VS_BatchTexTGVertexCxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformEAlphaMul
void VS_BatchTexTGVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformEAlphaMul
void PS_BatchTexTGVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformEAlphaMul();
		PixelShader = PS_BatchTexTGVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformEAlphaInv : register(b0) { 
float4 VS_BatchTexTGVertexCxformEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformEAlphaInv
void VS_BatchTexTGVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformEAlphaInv
void PS_BatchTexTGVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformEAlphaInv();
		PixelShader = PS_BatchTexTGVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformAc : register(b0) { 
float4 VS_BatchTexTGVertexCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformAc
void VS_BatchTexTGVertexCxformAc( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformAc
void PS_BatchTexTGVertexCxformAc( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformAc();
		PixelShader = PS_BatchTexTGVertexCxformAc();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformAcMul : register(b0) { 
float4 VS_BatchTexTGVertexCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformAcMul
void VS_BatchTexTGVertexCxformAcMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformAcMul
void PS_BatchTexTGVertexCxformAcMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformAcMul();
		PixelShader = PS_BatchTexTGVertexCxformAcMul();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformAcInv : register(b0) { 
float4 VS_BatchTexTGVertexCxformAcInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformAcInv
void VS_BatchTexTGVertexCxformAcInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformAcInv
void PS_BatchTexTGVertexCxformAcInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformAcInv();
		PixelShader = PS_BatchTexTGVertexCxformAcInv();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformAcEAlpha : register(b0) { 
float4 VS_BatchTexTGVertexCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformAcEAlpha
void VS_BatchTexTGVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformAcEAlpha
void PS_BatchTexTGVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformAcEAlpha();
		PixelShader = PS_BatchTexTGVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchTexTGVertexCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformAcEAlphaMul
void VS_BatchTexTGVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformAcEAlphaMul
void PS_BatchTexTGVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformAcEAlphaMul();
		PixelShader = PS_BatchTexTGVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchTexTGVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_BatchTexTGVertexCxformAcEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchTexTGVertexCxformAcEAlphaInv
void VS_BatchTexTGVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchTexTGVertexCxformAcEAlphaInv
void PS_BatchTexTGVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexTGVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchTexTGVertexCxformAcEAlphaInv();
		PixelShader = PS_BatchTexTGVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTG : register(b0) { 
float4 VS_BatchPosition3dTexTG_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTG
void VS_BatchPosition3dTexTG( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTG_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTG_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_BatchPosition3dTexTG
void PS_BatchPosition3dTexTG( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTG
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTG();
		PixelShader = PS_BatchPosition3dTexTG();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexDensity : register(b0) { 
float4 VS_BatchPosition3dTexTGTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexDensity
void VS_BatchPosition3dTexTGTexDensity( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchPosition3dTexTGTexDensity : register(b0) { 
float PS_BatchPosition3dTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dTexTGTexDensity
void PS_BatchPosition3dTexTGTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexDensity();
		PixelShader = PS_BatchPosition3dTexTGTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGMul : register(b0) { 
float4 VS_BatchPosition3dTexTGMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGMul
void VS_BatchPosition3dTexTGMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_BatchPosition3dTexTGMul
void PS_BatchPosition3dTexTGMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGMul();
		PixelShader = PS_BatchPosition3dTexTGMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGInv : register(b0) { 
float4 VS_BatchPosition3dTexTGInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGInv
void VS_BatchPosition3dTexTGInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_BatchPosition3dTexTGInv
void PS_BatchPosition3dTexTGInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGInv();
		PixelShader = PS_BatchPosition3dTexTGInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGEAlpha
void VS_BatchPosition3dTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGEAlpha
void PS_BatchPosition3dTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGEAlpha();
		PixelShader = PS_BatchPosition3dTexTGEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGEAlphaTexDensity : register(b0) { 
float4 VS_BatchPosition3dTexTGEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGEAlphaTexDensity
void VS_BatchPosition3dTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchPosition3dTexTGEAlphaTexDensity : register(b0) { 
float PS_BatchPosition3dTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dTexTGEAlphaTexDensity
void PS_BatchPosition3dTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGEAlphaTexDensity();
		PixelShader = PS_BatchPosition3dTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGEAlphaMul
void VS_BatchPosition3dTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGEAlphaMul
void PS_BatchPosition3dTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGEAlphaInv
void VS_BatchPosition3dTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGEAlphaInv
void PS_BatchPosition3dTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxform : register(b0) { 
float4 VS_BatchPosition3dTexTGCxform_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxform
void VS_BatchPosition3dTexTGCxform( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexTGCxform
void PS_BatchPosition3dTexTGCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxform
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxform();
		PixelShader = PS_BatchPosition3dTexTGCxform();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformMul : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformMul
void VS_BatchPosition3dTexTGCxformMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexTGCxformMul
void PS_BatchPosition3dTexTGCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformMul();
		PixelShader = PS_BatchPosition3dTexTGCxformMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformInv : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformInv
void VS_BatchPosition3dTexTGCxformInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexTGCxformInv
void PS_BatchPosition3dTexTGCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformInv();
		PixelShader = PS_BatchPosition3dTexTGCxformInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformEAlpha
void VS_BatchPosition3dTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGCxformEAlpha
void PS_BatchPosition3dTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformEAlpha();
		PixelShader = PS_BatchPosition3dTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformEAlphaMul
void VS_BatchPosition3dTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGCxformEAlphaMul
void PS_BatchPosition3dTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformEAlphaInv
void VS_BatchPosition3dTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGCxformEAlphaInv
void PS_BatchPosition3dTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformAc : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformAc
void VS_BatchPosition3dTexTGCxformAc( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexTGCxformAc
void PS_BatchPosition3dTexTGCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformAc();
		PixelShader = PS_BatchPosition3dTexTGCxformAc();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformAcMul : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformAcMul
void VS_BatchPosition3dTexTGCxformAcMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexTGCxformAcMul
void PS_BatchPosition3dTexTGCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformAcMul();
		PixelShader = PS_BatchPosition3dTexTGCxformAcMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformAcInv : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformAcInv
void VS_BatchPosition3dTexTGCxformAcInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexTGCxformAcInv
void PS_BatchPosition3dTexTGCxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformAcInv();
		PixelShader = PS_BatchPosition3dTexTGCxformAcInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformAcEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformAcEAlpha
void VS_BatchPosition3dTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGCxformAcEAlpha
void PS_BatchPosition3dTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformAcEAlpha();
		PixelShader = PS_BatchPosition3dTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformAcEAlphaMul
void VS_BatchPosition3dTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGCxformAcEAlphaMul
void PS_BatchPosition3dTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformAcEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGCxformAcEAlphaInv
void VS_BatchPosition3dTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGCxformAcEAlphaInv
void PS_BatchPosition3dTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGCxformAcEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dVertex : register(b0) { 
float4 VS_BatchPosition3dVertex_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dVertex
void VS_BatchPosition3dVertex( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    
}

//PS_BatchPosition3dVertex
void PS_BatchPosition3dVertex( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = fcolor;
    
}

technique BatchPosition3dVertex
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertex();
		PixelShader = PS_BatchPosition3dVertex();
	}
}


cbuffer CB_VS_BatchPosition3dVertexMul : register(b0) { 
float4 VS_BatchPosition3dVertexMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dVertexMul
void VS_BatchPosition3dVertexMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    
}

//PS_BatchPosition3dVertexMul
void PS_BatchPosition3dVertexMul( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexMul();
		PixelShader = PS_BatchPosition3dVertexMul();
	}
}


cbuffer CB_VS_BatchPosition3dVertexInv : register(b0) { 
float4 VS_BatchPosition3dVertexInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dVertexInv
void VS_BatchPosition3dVertexInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    
}

//PS_BatchPosition3dVertexInv
void PS_BatchPosition3dVertexInv( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexInv();
		PixelShader = PS_BatchPosition3dVertexInv();
	}
}


cbuffer CB_VS_BatchPosition3dVertexEAlpha : register(b0) { 
float4 VS_BatchPosition3dVertexEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dVertexEAlpha
void VS_BatchPosition3dVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexEAlpha
void PS_BatchPosition3dVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexEAlpha();
		PixelShader = PS_BatchPosition3dVertexEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dVertexEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dVertexEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dVertexEAlphaMul
void VS_BatchPosition3dVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexEAlphaMul
void PS_BatchPosition3dVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexEAlphaMul();
		PixelShader = PS_BatchPosition3dVertexEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dVertexEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dVertexEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dVertexEAlphaInv
void VS_BatchPosition3dVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexEAlphaInv
void PS_BatchPosition3dVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexEAlphaInv();
		PixelShader = PS_BatchPosition3dVertexEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxform : register(b0) { 
float4 VS_BatchPosition3dVertexCxform_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxform
void VS_BatchPosition3dVertexCxform( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dVertexCxform
void PS_BatchPosition3dVertexCxform( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxform
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxform();
		PixelShader = PS_BatchPosition3dVertexCxform();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformMul : register(b0) { 
float4 VS_BatchPosition3dVertexCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformMul
void VS_BatchPosition3dVertexCxformMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dVertexCxformMul
void PS_BatchPosition3dVertexCxformMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformMul();
		PixelShader = PS_BatchPosition3dVertexCxformMul();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformInv : register(b0) { 
float4 VS_BatchPosition3dVertexCxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformInv
void VS_BatchPosition3dVertexCxformInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dVertexCxformInv
void PS_BatchPosition3dVertexCxformInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformInv();
		PixelShader = PS_BatchPosition3dVertexCxformInv();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformEAlpha : register(b0) { 
float4 VS_BatchPosition3dVertexCxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformEAlpha
void VS_BatchPosition3dVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexCxformEAlpha
void PS_BatchPosition3dVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformEAlpha();
		PixelShader = PS_BatchPosition3dVertexCxformEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dVertexCxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformEAlphaMul
void VS_BatchPosition3dVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexCxformEAlphaMul
void PS_BatchPosition3dVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformEAlphaMul();
		PixelShader = PS_BatchPosition3dVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dVertexCxformEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformEAlphaInv
void VS_BatchPosition3dVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexCxformEAlphaInv
void PS_BatchPosition3dVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformEAlphaInv();
		PixelShader = PS_BatchPosition3dVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformAc : register(b0) { 
float4 VS_BatchPosition3dVertexCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformAc
void VS_BatchPosition3dVertexCxformAc( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dVertexCxformAc
void PS_BatchPosition3dVertexCxformAc( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformAc();
		PixelShader = PS_BatchPosition3dVertexCxformAc();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformAcMul : register(b0) { 
float4 VS_BatchPosition3dVertexCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformAcMul
void VS_BatchPosition3dVertexCxformAcMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dVertexCxformAcMul
void PS_BatchPosition3dVertexCxformAcMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformAcMul();
		PixelShader = PS_BatchPosition3dVertexCxformAcMul();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformAcInv : register(b0) { 
float4 VS_BatchPosition3dVertexCxformAcInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformAcInv
void VS_BatchPosition3dVertexCxformAcInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dVertexCxformAcInv
void PS_BatchPosition3dVertexCxformAcInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformAcInv();
		PixelShader = PS_BatchPosition3dVertexCxformAcInv();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformAcEAlpha : register(b0) { 
float4 VS_BatchPosition3dVertexCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformAcEAlpha
void VS_BatchPosition3dVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexCxformAcEAlpha
void PS_BatchPosition3dVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformAcEAlpha();
		PixelShader = PS_BatchPosition3dVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dVertexCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformAcEAlphaMul
void VS_BatchPosition3dVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexCxformAcEAlphaMul
void PS_BatchPosition3dVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformAcEAlphaMul();
		PixelShader = PS_BatchPosition3dVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dVertexCxformAcEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dVertexCxformAcEAlphaInv
void VS_BatchPosition3dVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_BatchPosition3dVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dVertexCxformAcEAlphaInv
void PS_BatchPosition3dVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dVertexCxformAcEAlphaInv();
		PixelShader = PS_BatchPosition3dVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTG : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTG_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTG
void VS_BatchPosition3dTexTGTexTG( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTG_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTG_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTG_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTG_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTG_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTG_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTG_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTG_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTG
void PS_BatchPosition3dTexTGTexTG( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTG
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTG();
		PixelShader = PS_BatchPosition3dTexTGTexTG();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGTexDensity : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGTexDensity
void VS_BatchPosition3dTexTGTexTGTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGTexDensity_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchPosition3dTexTGTexTGTexDensity : register(b0) { 
float PS_BatchPosition3dTexTGTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dTexTGTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dTexTGTexTGTexDensity
void PS_BatchPosition3dTexTGTexTGTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dTexTGTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dTexTGTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dTexTGTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dTexTGTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGTexDensity();
		PixelShader = PS_BatchPosition3dTexTGTexTGTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGMul : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGMul
void VS_BatchPosition3dTexTGTexTGMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGMul
void PS_BatchPosition3dTexTGTexTGMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGMul();
		PixelShader = PS_BatchPosition3dTexTGTexTGMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGInv : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGInv
void VS_BatchPosition3dTexTGTexTGInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGInv
void PS_BatchPosition3dTexTGTexTGInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGInv();
		PixelShader = PS_BatchPosition3dTexTGTexTGInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGEAlpha
void VS_BatchPosition3dTexTGTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlpha_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGEAlpha
void PS_BatchPosition3dTexTGTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGEAlpha();
		PixelShader = PS_BatchPosition3dTexTGTexTGEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGEAlphaTexDensity : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGEAlphaTexDensity
void VS_BatchPosition3dTexTGTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchPosition3dTexTGTexTGEAlphaTexDensity : register(b0) { 
float PS_BatchPosition3dTexTGTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dTexTGTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dTexTGTexTGEAlphaTexDensity
void PS_BatchPosition3dTexTGTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dTexTGTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dTexTGTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dTexTGTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dTexTGTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGEAlphaTexDensity();
		PixelShader = PS_BatchPosition3dTexTGTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGEAlphaMul
void VS_BatchPosition3dTexTGTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGEAlphaMul
void PS_BatchPosition3dTexTGTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGTexTGEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGEAlphaInv
void VS_BatchPosition3dTexTGTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGEAlphaInv
void PS_BatchPosition3dTexTGTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGTexTGEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxform : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxform
void VS_BatchPosition3dTexTGTexTGCxform( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxform_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxform
void PS_BatchPosition3dTexTGTexTGCxform( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxform
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxform();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxform();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformMul : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformMul
void VS_BatchPosition3dTexTGTexTGCxformMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformMul_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformMul
void PS_BatchPosition3dTexTGTexTGCxformMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformMul();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformInv : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformInv
void VS_BatchPosition3dTexTGTexTGCxformInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformInv_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformInv
void PS_BatchPosition3dTexTGTexTGCxformInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformInv();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformEAlpha
void VS_BatchPosition3dTexTGTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformEAlpha_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformEAlpha
void PS_BatchPosition3dTexTGTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformEAlpha();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformEAlphaMul
void VS_BatchPosition3dTexTGTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformEAlphaMul
void PS_BatchPosition3dTexTGTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformEAlphaInv
void VS_BatchPosition3dTexTGTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformEAlphaInv
void PS_BatchPosition3dTexTGTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformAc : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformAc
void VS_BatchPosition3dTexTGTexTGCxformAc( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformAc_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformAc
void PS_BatchPosition3dTexTGTexTGCxformAc( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformAc();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformAc();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformAcMul : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformAcMul
void VS_BatchPosition3dTexTGTexTGCxformAcMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformAcMul_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformAcMul
void PS_BatchPosition3dTexTGTexTGCxformAcMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformAcMul();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformAcMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformAcInv : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformAcInv
void VS_BatchPosition3dTexTGTexTGCxformAcInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformAcInv_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformAcInv
void PS_BatchPosition3dTexTGTexTGCxformAcInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformAcInv();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformAcInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformAcEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformAcEAlpha
void VS_BatchPosition3dTexTGTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformAcEAlpha
void PS_BatchPosition3dTexTGTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformAcEAlpha();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul
void VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul
void PS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[240] : packoffset(c0);
};

//VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv
void VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv
void PS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertex : register(b0) { 
float4 VS_BatchPosition3dTexTGVertex_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertex
void VS_BatchPosition3dTexTGVertex( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertex_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertex_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertex_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertex_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertex_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertex_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertex
void PS_BatchPosition3dTexTGVertex( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertex
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertex();
		PixelShader = PS_BatchPosition3dTexTGVertex();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexTexDensity : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexTexDensity
void VS_BatchPosition3dTexTGVertexTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchPosition3dTexTGVertexTexDensity : register(b0) { 
float PS_BatchPosition3dTexTGVertexTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dTexTGVertexTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dTexTGVertexTexDensity
void PS_BatchPosition3dTexTGVertexTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dTexTGVertexTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dTexTGVertexTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dTexTGVertexTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dTexTGVertexTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexTexDensity();
		PixelShader = PS_BatchPosition3dTexTGVertexTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexMul : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexMul
void VS_BatchPosition3dTexTGVertexMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexMul
void PS_BatchPosition3dTexTGVertexMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexMul();
		PixelShader = PS_BatchPosition3dTexTGVertexMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexInv : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexInv
void VS_BatchPosition3dTexTGVertexInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexInv
void PS_BatchPosition3dTexTGVertexInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexInv();
		PixelShader = PS_BatchPosition3dTexTGVertexInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexEAlpha
void VS_BatchPosition3dTexTGVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexEAlpha
void PS_BatchPosition3dTexTGVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexEAlpha();
		PixelShader = PS_BatchPosition3dTexTGVertexEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexEAlphaTexDensity : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexEAlphaTexDensity
void VS_BatchPosition3dTexTGVertexEAlphaTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchPosition3dTexTGVertexEAlphaTexDensity : register(b0) { 
float PS_BatchPosition3dTexTGVertexEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dTexTGVertexEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dTexTGVertexEAlphaTexDensity
void PS_BatchPosition3dTexTGVertexEAlphaTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dTexTGVertexEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dTexTGVertexEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dTexTGVertexEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dTexTGVertexEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexEAlphaTexDensity();
		PixelShader = PS_BatchPosition3dTexTGVertexEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexEAlphaMul
void VS_BatchPosition3dTexTGVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexEAlphaMul
void PS_BatchPosition3dTexTGVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGVertexEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexEAlphaInv
void VS_BatchPosition3dTexTGVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexEAlphaInv
void PS_BatchPosition3dTexTGVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGVertexEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxform : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxform_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxform
void VS_BatchPosition3dTexTGVertexCxform( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxform_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxform
void PS_BatchPosition3dTexTGVertexCxform( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxform
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxform();
		PixelShader = PS_BatchPosition3dTexTGVertexCxform();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformMul : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformMul
void VS_BatchPosition3dTexTGVertexCxformMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformMul
void PS_BatchPosition3dTexTGVertexCxformMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformMul();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformInv : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformInv
void VS_BatchPosition3dTexTGVertexCxformInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformInv
void PS_BatchPosition3dTexTGVertexCxformInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformInv();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformEAlpha
void VS_BatchPosition3dTexTGVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformEAlpha
void PS_BatchPosition3dTexTGVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformEAlpha();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformEAlphaMul
void VS_BatchPosition3dTexTGVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformEAlphaMul
void PS_BatchPosition3dTexTGVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformEAlphaInv
void VS_BatchPosition3dTexTGVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformEAlphaInv
void PS_BatchPosition3dTexTGVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformAc : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformAc
void VS_BatchPosition3dTexTGVertexCxformAc( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformAc_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformAc
void PS_BatchPosition3dTexTGVertexCxformAc( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformAc();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformAc();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformAcMul : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformAcMul
void VS_BatchPosition3dTexTGVertexCxformAcMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformAcMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformAcMul
void PS_BatchPosition3dTexTGVertexCxformAcMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformAcMul();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformAcMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformAcInv : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformAcInv
void VS_BatchPosition3dTexTGVertexCxformAcInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformAcInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformAcInv
void PS_BatchPosition3dTexTGVertexCxformAcInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformAcInv();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformAcInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformAcEAlpha : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformAcEAlpha
void VS_BatchPosition3dTexTGVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformAcEAlpha
void PS_BatchPosition3dTexTGVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformAcEAlpha();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul
void VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformAcEAlphaMul
void PS_BatchPosition3dTexTGVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformAcEAlphaMul();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv
void VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dTexTGVertexCxformAcEAlphaInv
void PS_BatchPosition3dTexTGVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexTGVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexTGVertexCxformAcEAlphaInv();
		PixelShader = PS_BatchPosition3dTexTGVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTG : register(b0) { 
float4 VS_InstancedTexTG_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTG
void VS_InstancedTexTG( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTG_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTG_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTG_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTG_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_InstancedTexTG
void PS_InstancedTexTG( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique InstancedTexTG
{
	pass p0
	{
		VertexShader = VS_InstancedTexTG();
		PixelShader = PS_InstancedTexTG();
	}
}


cbuffer CB_VS_InstancedTexTGTexDensity : register(b0) { 
float4 VS_InstancedTexTGTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGTexDensity
void VS_InstancedTexTGTexDensity( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedTexTGTexDensity : register(b0) { 
float PS_InstancedTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedTexTGTexDensity
void PS_InstancedTexTGTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexDensity();
		PixelShader = PS_InstancedTexTGTexDensity();
	}
}


cbuffer CB_VS_InstancedTexTGMul : register(b0) { 
float4 VS_InstancedTexTGMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGMul
void VS_InstancedTexTGMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_InstancedTexTGMul
void PS_InstancedTexTGMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGMul();
		PixelShader = PS_InstancedTexTGMul();
	}
}


cbuffer CB_VS_InstancedTexTGInv : register(b0) { 
float4 VS_InstancedTexTGInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGInv
void VS_InstancedTexTGInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_InstancedTexTGInv
void PS_InstancedTexTGInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGInv();
		PixelShader = PS_InstancedTexTGInv();
	}
}


cbuffer CB_VS_InstancedTexTGEAlpha : register(b0) { 
float4 VS_InstancedTexTGEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGEAlpha
void VS_InstancedTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGEAlpha
void PS_InstancedTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGEAlpha();
		PixelShader = PS_InstancedTexTGEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGEAlphaTexDensity : register(b0) { 
float4 VS_InstancedTexTGEAlphaTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGEAlphaTexDensity
void VS_InstancedTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGEAlphaTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGEAlphaTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGEAlphaTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGEAlphaTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedTexTGEAlphaTexDensity : register(b0) { 
float PS_InstancedTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedTexTGEAlphaTexDensity
void PS_InstancedTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGEAlphaTexDensity();
		PixelShader = PS_InstancedTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedTexTGEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGEAlphaMul
void VS_InstancedTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGEAlphaMul
void PS_InstancedTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGEAlphaMul();
		PixelShader = PS_InstancedTexTGEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGEAlphaInv
void VS_InstancedTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGEAlphaInv
void PS_InstancedTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGEAlphaInv();
		PixelShader = PS_InstancedTexTGEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTGCxform : register(b0) { 
float4 VS_InstancedTexTGCxform_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxform
void VS_InstancedTexTGCxform( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedTexTGCxform
void PS_InstancedTexTGCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxform
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxform();
		PixelShader = PS_InstancedTexTGCxform();
	}
}


cbuffer CB_VS_InstancedTexTGCxformMul : register(b0) { 
float4 VS_InstancedTexTGCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformMul
void VS_InstancedTexTGCxformMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedTexTGCxformMul
void PS_InstancedTexTGCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformMul();
		PixelShader = PS_InstancedTexTGCxformMul();
	}
}


cbuffer CB_VS_InstancedTexTGCxformInv : register(b0) { 
float4 VS_InstancedTexTGCxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformInv
void VS_InstancedTexTGCxformInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedTexTGCxformInv
void PS_InstancedTexTGCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformInv();
		PixelShader = PS_InstancedTexTGCxformInv();
	}
}


cbuffer CB_VS_InstancedTexTGCxformEAlpha : register(b0) { 
float4 VS_InstancedTexTGCxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformEAlpha
void VS_InstancedTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGCxformEAlpha
void PS_InstancedTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformEAlpha();
		PixelShader = PS_InstancedTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGCxformEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGCxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformEAlphaMul
void VS_InstancedTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGCxformEAlphaMul
void PS_InstancedTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformEAlphaMul();
		PixelShader = PS_InstancedTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGCxformEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGCxformEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformEAlphaInv
void VS_InstancedTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformEAlphaInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGCxformEAlphaInv
void PS_InstancedTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformEAlphaInv();
		PixelShader = PS_InstancedTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTGCxformAc : register(b0) { 
float4 VS_InstancedTexTGCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformAc
void VS_InstancedTexTGCxformAc( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedTexTGCxformAc
void PS_InstancedTexTGCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformAc();
		PixelShader = PS_InstancedTexTGCxformAc();
	}
}


cbuffer CB_VS_InstancedTexTGCxformAcMul : register(b0) { 
float4 VS_InstancedTexTGCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformAcMul
void VS_InstancedTexTGCxformAcMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedTexTGCxformAcMul
void PS_InstancedTexTGCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformAcMul();
		PixelShader = PS_InstancedTexTGCxformAcMul();
	}
}


cbuffer CB_VS_InstancedTexTGCxformAcInv : register(b0) { 
float4 VS_InstancedTexTGCxformAcInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformAcInv
void VS_InstancedTexTGCxformAcInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformAcInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformAcInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedTexTGCxformAcInv
void PS_InstancedTexTGCxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformAcInv();
		PixelShader = PS_InstancedTexTGCxformAcInv();
	}
}


cbuffer CB_VS_InstancedTexTGCxformAcEAlpha : register(b0) { 
float4 VS_InstancedTexTGCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformAcEAlpha
void VS_InstancedTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformAcEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformAcEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformAcEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformAcEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGCxformAcEAlpha
void PS_InstancedTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformAcEAlpha();
		PixelShader = PS_InstancedTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformAcEAlphaMul
void VS_InstancedTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGCxformAcEAlphaMul
void PS_InstancedTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformAcEAlphaMul();
		PixelShader = PS_InstancedTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGCxformAcEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGCxformAcEAlphaInv
void VS_InstancedTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGCxformAcEAlphaInv
void PS_InstancedTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGCxformAcEAlphaInv();
		PixelShader = PS_InstancedTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedVertex : register(b0) { 
float4 VS_InstancedVertex_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedVertex
void VS_InstancedVertex( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertex_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertex_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    
}

//PS_InstancedVertex
void PS_InstancedVertex( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = fcolor;
    
}

technique InstancedVertex
{
	pass p0
	{
		VertexShader = VS_InstancedVertex();
		PixelShader = PS_InstancedVertex();
	}
}


cbuffer CB_VS_InstancedVertexMul : register(b0) { 
float4 VS_InstancedVertexMul_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedVertexMul
void VS_InstancedVertexMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    
}

//PS_InstancedVertexMul
void PS_InstancedVertexMul( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexMul
{
	pass p0
	{
		VertexShader = VS_InstancedVertexMul();
		PixelShader = PS_InstancedVertexMul();
	}
}


cbuffer CB_VS_InstancedVertexInv : register(b0) { 
float4 VS_InstancedVertexInv_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedVertexInv
void VS_InstancedVertexInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    
}

//PS_InstancedVertexInv
void PS_InstancedVertexInv( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedVertexInv
{
	pass p0
	{
		VertexShader = VS_InstancedVertexInv();
		PixelShader = PS_InstancedVertexInv();
	}
}


cbuffer CB_VS_InstancedVertexEAlpha : register(b0) { 
float4 VS_InstancedVertexEAlpha_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedVertexEAlpha
void VS_InstancedVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexEAlpha_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexEAlpha_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_InstancedVertexEAlpha
void PS_InstancedVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedVertexEAlpha();
		PixelShader = PS_InstancedVertexEAlpha();
	}
}


cbuffer CB_VS_InstancedVertexEAlphaMul : register(b0) { 
float4 VS_InstancedVertexEAlphaMul_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedVertexEAlphaMul
void VS_InstancedVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexEAlphaMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexEAlphaMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_InstancedVertexEAlphaMul
void PS_InstancedVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedVertexEAlphaMul();
		PixelShader = PS_InstancedVertexEAlphaMul();
	}
}


cbuffer CB_VS_InstancedVertexEAlphaInv : register(b0) { 
float4 VS_InstancedVertexEAlphaInv_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedVertexEAlphaInv
void VS_InstancedVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexEAlphaInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexEAlphaInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_InstancedVertexEAlphaInv
void PS_InstancedVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedVertexEAlphaInv();
		PixelShader = PS_InstancedVertexEAlphaInv();
	}
}


cbuffer CB_VS_InstancedVertexCxform : register(b0) { 
float4 VS_InstancedVertexCxform_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxform
void VS_InstancedVertexCxform( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxform_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxform_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxform_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxform_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedVertexCxform
void PS_InstancedVertexCxform( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxform
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxform();
		PixelShader = PS_InstancedVertexCxform();
	}
}


cbuffer CB_VS_InstancedVertexCxformMul : register(b0) { 
float4 VS_InstancedVertexCxformMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformMul
void VS_InstancedVertexCxformMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformMul_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedVertexCxformMul
void PS_InstancedVertexCxformMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformMul();
		PixelShader = PS_InstancedVertexCxformMul();
	}
}


cbuffer CB_VS_InstancedVertexCxformInv : register(b0) { 
float4 VS_InstancedVertexCxformInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformInv
void VS_InstancedVertexCxformInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformInv_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedVertexCxformInv
void PS_InstancedVertexCxformInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformInv();
		PixelShader = PS_InstancedVertexCxformInv();
	}
}


cbuffer CB_VS_InstancedVertexCxformEAlpha : register(b0) { 
float4 VS_InstancedVertexCxformEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformEAlpha
void VS_InstancedVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformEAlpha_vfuniforms[vbatch * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedVertexCxformEAlpha
void PS_InstancedVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformEAlpha();
		PixelShader = PS_InstancedVertexCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedVertexCxformEAlphaMul : register(b0) { 
float4 VS_InstancedVertexCxformEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformEAlphaMul
void VS_InstancedVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformEAlphaMul_vfuniforms[vbatch * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedVertexCxformEAlphaMul
void PS_InstancedVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformEAlphaMul();
		PixelShader = PS_InstancedVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedVertexCxformEAlphaInv : register(b0) { 
float4 VS_InstancedVertexCxformEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformEAlphaInv
void VS_InstancedVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformEAlphaInv_vfuniforms[vbatch * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedVertexCxformEAlphaInv
void PS_InstancedVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformEAlphaInv();
		PixelShader = PS_InstancedVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedVertexCxformAc : register(b0) { 
float4 VS_InstancedVertexCxformAc_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformAc
void VS_InstancedVertexCxformAc( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformAc_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformAc_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformAc_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformAc_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedVertexCxformAc
void PS_InstancedVertexCxformAc( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformAc();
		PixelShader = PS_InstancedVertexCxformAc();
	}
}


cbuffer CB_VS_InstancedVertexCxformAcMul : register(b0) { 
float4 VS_InstancedVertexCxformAcMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformAcMul
void VS_InstancedVertexCxformAcMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformAcMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformAcMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformAcMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformAcMul_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedVertexCxformAcMul
void PS_InstancedVertexCxformAcMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformAcMul();
		PixelShader = PS_InstancedVertexCxformAcMul();
	}
}


cbuffer CB_VS_InstancedVertexCxformAcInv : register(b0) { 
float4 VS_InstancedVertexCxformAcInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformAcInv
void VS_InstancedVertexCxformAcInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformAcInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformAcInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformAcInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformAcInv_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedVertexCxformAcInv
void PS_InstancedVertexCxformAcInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformAcInv();
		PixelShader = PS_InstancedVertexCxformAcInv();
	}
}


cbuffer CB_VS_InstancedVertexCxformAcEAlpha : register(b0) { 
float4 VS_InstancedVertexCxformAcEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformAcEAlpha
void VS_InstancedVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformAcEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformAcEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformAcEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformAcEAlpha_vfuniforms[vbatch * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedVertexCxformAcEAlpha
void PS_InstancedVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformAcEAlpha();
		PixelShader = PS_InstancedVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedVertexCxformAcEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformAcEAlphaMul
void VS_InstancedVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformAcEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformAcEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformAcEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformAcEAlphaMul_vfuniforms[vbatch * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedVertexCxformAcEAlphaMul
void PS_InstancedVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformAcEAlphaMul();
		PixelShader = PS_InstancedVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedVertexCxformAcEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedVertexCxformAcEAlphaInv
void VS_InstancedVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedVertexCxformAcEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedVertexCxformAcEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    color = acolor;
    

    fucxadd = VS_InstancedVertexCxformAcEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedVertexCxformAcEAlphaInv_vfuniforms[vbatch * 4 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedVertexCxformAcEAlphaInv
void PS_InstancedVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedVertexCxformAcEAlphaInv();
		PixelShader = PS_InstancedVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTGTexTG : register(b0) { 
float4 VS_InstancedTexTGTexTG_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGTexTG
void VS_InstancedTexTGTexTG( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTG_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTG_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTG_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTG_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTG
void PS_InstancedTexTGTexTG( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTG
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTG();
		PixelShader = PS_InstancedTexTGTexTG();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGTexDensity : register(b0) { 
float4 VS_InstancedTexTGTexTGTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGTexTGTexDensity
void VS_InstancedTexTGTexTGTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedTexTGTexTGTexDensity : register(b0) { 
float PS_InstancedTexTGTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedTexTGTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedTexTGTexTGTexDensity
void PS_InstancedTexTGTexTGTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedTexTGTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedTexTGTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedTexTGTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedTexTGTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGTexDensity();
		PixelShader = PS_InstancedTexTGTexTGTexDensity();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGMul : register(b0) { 
float4 VS_InstancedTexTGTexTGMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGTexTGMul
void VS_InstancedTexTGTexTGMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGMul
void PS_InstancedTexTGTexTGMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGMul();
		PixelShader = PS_InstancedTexTGTexTGMul();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGInv : register(b0) { 
float4 VS_InstancedTexTGTexTGInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGTexTGInv
void VS_InstancedTexTGTexTGInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGInv
void PS_InstancedTexTGTexTGInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGInv();
		PixelShader = PS_InstancedTexTGTexTGInv();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGEAlpha : register(b0) { 
float4 VS_InstancedTexTGTexTGEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGTexTGEAlpha
void VS_InstancedTexTGTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGEAlpha
void PS_InstancedTexTGTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGEAlpha();
		PixelShader = PS_InstancedTexTGTexTGEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGEAlphaTexDensity : register(b0) { 
float4 VS_InstancedTexTGTexTGEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGTexTGEAlphaTexDensity
void VS_InstancedTexTGTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedTexTGTexTGEAlphaTexDensity : register(b0) { 
float PS_InstancedTexTGTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedTexTGTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedTexTGTexTGEAlphaTexDensity
void PS_InstancedTexTGTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedTexTGTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedTexTGTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedTexTGTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedTexTGTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGEAlphaTexDensity();
		PixelShader = PS_InstancedTexTGTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGTexTGEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGTexTGEAlphaMul
void VS_InstancedTexTGTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGEAlphaMul
void PS_InstancedTexTGTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGEAlphaMul();
		PixelShader = PS_InstancedTexTGTexTGEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGTexTGEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGTexTGEAlphaInv
void VS_InstancedTexTGTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGEAlphaInv
void PS_InstancedTexTGTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGEAlphaInv();
		PixelShader = PS_InstancedTexTGTexTGEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxform : register(b0) { 
float4 VS_InstancedTexTGTexTGCxform_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxform
void VS_InstancedTexTGTexTGCxform( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxform_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxform_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxform_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxform_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxform_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxform_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxform
void PS_InstancedTexTGTexTGCxform( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxform
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxform();
		PixelShader = PS_InstancedTexTGTexTGCxform();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformMul : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformMul
void VS_InstancedTexTGTexTGCxformMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformMul
void PS_InstancedTexTGTexTGCxformMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformMul();
		PixelShader = PS_InstancedTexTGTexTGCxformMul();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformInv : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformInv
void VS_InstancedTexTGTexTGCxformInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformInv
void PS_InstancedTexTGTexTGCxformInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformInv();
		PixelShader = PS_InstancedTexTGTexTGCxformInv();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformEAlpha : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformEAlpha
void VS_InstancedTexTGTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformEAlpha
void PS_InstancedTexTGTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformEAlpha();
		PixelShader = PS_InstancedTexTGTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformEAlphaMul
void VS_InstancedTexTGTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformEAlphaMul
void PS_InstancedTexTGTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformEAlphaMul();
		PixelShader = PS_InstancedTexTGTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformEAlphaInv
void VS_InstancedTexTGTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformEAlphaInv
void PS_InstancedTexTGTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformEAlphaInv();
		PixelShader = PS_InstancedTexTGTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformAc : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformAc
void VS_InstancedTexTGTexTGCxformAc( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformAc_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformAc_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformAc_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformAc_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformAc_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformAc_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformAc
void PS_InstancedTexTGTexTGCxformAc( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformAc();
		PixelShader = PS_InstancedTexTGTexTGCxformAc();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformAcMul : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformAcMul
void VS_InstancedTexTGTexTGCxformAcMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformAcMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformAcMul
void PS_InstancedTexTGTexTGCxformAcMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformAcMul();
		PixelShader = PS_InstancedTexTGTexTGCxformAcMul();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformAcInv : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformAcInv
void VS_InstancedTexTGTexTGCxformAcInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformAcInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformAcInv
void PS_InstancedTexTGTexTGCxformAcInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformAcInv();
		PixelShader = PS_InstancedTexTGTexTGCxformAcInv();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformAcEAlpha : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformAcEAlpha
void VS_InstancedTexTGTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformAcEAlpha
void PS_InstancedTexTGTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformAcEAlpha();
		PixelShader = PS_InstancedTexTGTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformAcEAlphaMul
void VS_InstancedTexTGTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformAcEAlphaMul
void PS_InstancedTexTGTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformAcEAlphaMul();
		PixelShader = PS_InstancedTexTGTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedTexTGTexTGCxformAcEAlphaInv
void VS_InstancedTexTGTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGTexTGCxformAcEAlphaInv
void PS_InstancedTexTGTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGTexTGCxformAcEAlphaInv();
		PixelShader = PS_InstancedTexTGTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTGVertex : register(b0) { 
float4 VS_InstancedTexTGVertex_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGVertex
void VS_InstancedTexTGVertex( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertex_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertex_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertex
void PS_InstancedTexTGVertex( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertex
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertex();
		PixelShader = PS_InstancedTexTGVertex();
	}
}


cbuffer CB_VS_InstancedTexTGVertexTexDensity : register(b0) { 
float4 VS_InstancedTexTGVertexTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGVertexTexDensity
void VS_InstancedTexTGVertexTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedTexTGVertexTexDensity : register(b0) { 
float PS_InstancedTexTGVertexTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedTexTGVertexTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedTexTGVertexTexDensity
void PS_InstancedTexTGVertexTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedTexTGVertexTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedTexTGVertexTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedTexTGVertexTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedTexTGVertexTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexTexDensity();
		PixelShader = PS_InstancedTexTGVertexTexDensity();
	}
}


cbuffer CB_VS_InstancedTexTGVertexMul : register(b0) { 
float4 VS_InstancedTexTGVertexMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGVertexMul
void VS_InstancedTexTGVertexMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexMul
void PS_InstancedTexTGVertexMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexMul();
		PixelShader = PS_InstancedTexTGVertexMul();
	}
}


cbuffer CB_VS_InstancedTexTGVertexInv : register(b0) { 
float4 VS_InstancedTexTGVertexInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGVertexInv
void VS_InstancedTexTGVertexInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexInv
void PS_InstancedTexTGVertexInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexInv();
		PixelShader = PS_InstancedTexTGVertexInv();
	}
}


cbuffer CB_VS_InstancedTexTGVertexEAlpha : register(b0) { 
float4 VS_InstancedTexTGVertexEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGVertexEAlpha
void VS_InstancedTexTGVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexEAlpha
void PS_InstancedTexTGVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexEAlpha();
		PixelShader = PS_InstancedTexTGVertexEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGVertexEAlphaTexDensity : register(b0) { 
float4 VS_InstancedTexTGVertexEAlphaTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGVertexEAlphaTexDensity
void VS_InstancedTexTGVertexEAlphaTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedTexTGVertexEAlphaTexDensity : register(b0) { 
float PS_InstancedTexTGVertexEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedTexTGVertexEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedTexTGVertexEAlphaTexDensity
void PS_InstancedTexTGVertexEAlphaTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedTexTGVertexEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedTexTGVertexEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedTexTGVertexEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedTexTGVertexEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexEAlphaTexDensity();
		PixelShader = PS_InstancedTexTGVertexEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedTexTGVertexEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGVertexEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGVertexEAlphaMul
void VS_InstancedTexTGVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexEAlphaMul
void PS_InstancedTexTGVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexEAlphaMul();
		PixelShader = PS_InstancedTexTGVertexEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGVertexEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGVertexEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexTGVertexEAlphaInv
void VS_InstancedTexTGVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexEAlphaInv
void PS_InstancedTexTGVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexEAlphaInv();
		PixelShader = PS_InstancedTexTGVertexEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxform : register(b0) { 
float4 VS_InstancedTexTGVertexCxform_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxform
void VS_InstancedTexTGVertexCxform( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxform
void PS_InstancedTexTGVertexCxform( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxform
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxform();
		PixelShader = PS_InstancedTexTGVertexCxform();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformMul : register(b0) { 
float4 VS_InstancedTexTGVertexCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformMul
void VS_InstancedTexTGVertexCxformMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformMul
void PS_InstancedTexTGVertexCxformMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformMul();
		PixelShader = PS_InstancedTexTGVertexCxformMul();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformInv : register(b0) { 
float4 VS_InstancedTexTGVertexCxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformInv
void VS_InstancedTexTGVertexCxformInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformInv
void PS_InstancedTexTGVertexCxformInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformInv();
		PixelShader = PS_InstancedTexTGVertexCxformInv();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformEAlpha : register(b0) { 
float4 VS_InstancedTexTGVertexCxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformEAlpha
void VS_InstancedTexTGVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformEAlpha
void PS_InstancedTexTGVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformEAlpha();
		PixelShader = PS_InstancedTexTGVertexCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGVertexCxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformEAlphaMul
void VS_InstancedTexTGVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformEAlphaMul
void PS_InstancedTexTGVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformEAlphaMul();
		PixelShader = PS_InstancedTexTGVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGVertexCxformEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformEAlphaInv
void VS_InstancedTexTGVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformEAlphaInv
void PS_InstancedTexTGVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformEAlphaInv();
		PixelShader = PS_InstancedTexTGVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformAc : register(b0) { 
float4 VS_InstancedTexTGVertexCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformAc
void VS_InstancedTexTGVertexCxformAc( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformAc
void PS_InstancedTexTGVertexCxformAc( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformAc();
		PixelShader = PS_InstancedTexTGVertexCxformAc();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformAcMul : register(b0) { 
float4 VS_InstancedTexTGVertexCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformAcMul
void VS_InstancedTexTGVertexCxformAcMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformAcMul
void PS_InstancedTexTGVertexCxformAcMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformAcMul();
		PixelShader = PS_InstancedTexTGVertexCxformAcMul();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformAcInv : register(b0) { 
float4 VS_InstancedTexTGVertexCxformAcInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformAcInv
void VS_InstancedTexTGVertexCxformAcInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformAcInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformAcInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformAcInv
void PS_InstancedTexTGVertexCxformAcInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformAcInv();
		PixelShader = PS_InstancedTexTGVertexCxformAcInv();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformAcEAlpha : register(b0) { 
float4 VS_InstancedTexTGVertexCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformAcEAlpha
void VS_InstancedTexTGVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformAcEAlpha
void PS_InstancedTexTGVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformAcEAlpha();
		PixelShader = PS_InstancedTexTGVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedTexTGVertexCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformAcEAlphaMul
void VS_InstancedTexTGVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformAcEAlphaMul
void PS_InstancedTexTGVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformAcEAlphaMul();
		PixelShader = PS_InstancedTexTGVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedTexTGVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedTexTGVertexCxformAcEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedTexTGVertexCxformAcEAlphaInv
void VS_InstancedTexTGVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedTexTGVertexCxformAcEAlphaInv
void PS_InstancedTexTGVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexTGVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexTGVertexCxformAcEAlphaInv();
		PixelShader = PS_InstancedTexTGVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTG : register(b0) { 
float4 VS_InstancedPosition3dTexTG_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTG
void VS_InstancedPosition3dTexTG( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTG_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTG_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTG_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_InstancedPosition3dTexTG
void PS_InstancedPosition3dTexTG( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTG
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTG();
		PixelShader = PS_InstancedPosition3dTexTG();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexDensity : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexDensity
void VS_InstancedPosition3dTexTGTexDensity( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedPosition3dTexTGTexDensity : register(b0) { 
float PS_InstancedPosition3dTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dTexTGTexDensity
void PS_InstancedPosition3dTexTGTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexDensity();
		PixelShader = PS_InstancedPosition3dTexTGTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGMul
void VS_InstancedPosition3dTexTGMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_InstancedPosition3dTexTGMul
void PS_InstancedPosition3dTexTGMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGMul();
		PixelShader = PS_InstancedPosition3dTexTGMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGInv
void VS_InstancedPosition3dTexTGInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_InstancedPosition3dTexTGInv
void PS_InstancedPosition3dTexTGInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGInv();
		PixelShader = PS_InstancedPosition3dTexTGInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGEAlpha
void VS_InstancedPosition3dTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGEAlpha
void PS_InstancedPosition3dTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGEAlphaTexDensity : register(b0) { 
float4 VS_InstancedPosition3dTexTGEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGEAlphaTexDensity
void VS_InstancedPosition3dTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGEAlphaTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedPosition3dTexTGEAlphaTexDensity : register(b0) { 
float PS_InstancedPosition3dTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dTexTGEAlphaTexDensity
void PS_InstancedPosition3dTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGEAlphaTexDensity();
		PixelShader = PS_InstancedPosition3dTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGEAlphaMul
void VS_InstancedPosition3dTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGEAlphaMul
void PS_InstancedPosition3dTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGEAlphaInv
void VS_InstancedPosition3dTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGEAlphaInv
void PS_InstancedPosition3dTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxform : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxform_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxform
void VS_InstancedPosition3dTexTGCxform( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxform_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexTGCxform
void PS_InstancedPosition3dTexTGCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxform
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxform();
		PixelShader = PS_InstancedPosition3dTexTGCxform();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformMul
void VS_InstancedPosition3dTexTGCxformMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexTGCxformMul
void PS_InstancedPosition3dTexTGCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformMul();
		PixelShader = PS_InstancedPosition3dTexTGCxformMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformInv
void VS_InstancedPosition3dTexTGCxformInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexTGCxformInv
void PS_InstancedPosition3dTexTGCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformInv();
		PixelShader = PS_InstancedPosition3dTexTGCxformInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformEAlpha
void VS_InstancedPosition3dTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGCxformEAlpha
void PS_InstancedPosition3dTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformEAlphaMul
void VS_InstancedPosition3dTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGCxformEAlphaMul
void PS_InstancedPosition3dTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformEAlphaInv
void VS_InstancedPosition3dTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformEAlphaInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGCxformEAlphaInv
void PS_InstancedPosition3dTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformAc : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformAc
void VS_InstancedPosition3dTexTGCxformAc( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformAc_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexTGCxformAc
void PS_InstancedPosition3dTexTGCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformAc();
		PixelShader = PS_InstancedPosition3dTexTGCxformAc();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformAcMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformAcMul
void VS_InstancedPosition3dTexTGCxformAcMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformAcMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexTGCxformAcMul
void PS_InstancedPosition3dTexTGCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformAcMul();
		PixelShader = PS_InstancedPosition3dTexTGCxformAcMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformAcInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformAcInv
void VS_InstancedPosition3dTexTGCxformAcInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformAcInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexTGCxformAcInv
void PS_InstancedPosition3dTexTGCxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformAcInv();
		PixelShader = PS_InstancedPosition3dTexTGCxformAcInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformAcEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformAcEAlpha
void VS_InstancedPosition3dTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformAcEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGCxformAcEAlpha
void PS_InstancedPosition3dTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformAcEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformAcEAlphaMul
void VS_InstancedPosition3dTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGCxformAcEAlphaMul
void PS_InstancedPosition3dTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformAcEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGCxformAcEAlphaInv
void VS_InstancedPosition3dTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGCxformAcEAlphaInv
void PS_InstancedPosition3dTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGCxformAcEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dVertex : register(b0) { 
float4 VS_InstancedPosition3dVertex_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dVertex
void VS_InstancedPosition3dVertex( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertex_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    
}

//PS_InstancedPosition3dVertex
void PS_InstancedPosition3dVertex( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertex
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertex();
		PixelShader = PS_InstancedPosition3dVertex();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexMul : register(b0) { 
float4 VS_InstancedPosition3dVertexMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dVertexMul
void VS_InstancedPosition3dVertexMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    
}

//PS_InstancedPosition3dVertexMul
void PS_InstancedPosition3dVertexMul( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexMul();
		PixelShader = PS_InstancedPosition3dVertexMul();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexInv : register(b0) { 
float4 VS_InstancedPosition3dVertexInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dVertexInv
void VS_InstancedPosition3dVertexInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    
}

//PS_InstancedPosition3dVertexInv
void PS_InstancedPosition3dVertexInv( float4 color : COLOR0,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexInv();
		PixelShader = PS_InstancedPosition3dVertexInv();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexEAlpha : register(b0) { 
float4 VS_InstancedPosition3dVertexEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dVertexEAlpha
void VS_InstancedPosition3dVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexEAlpha
void PS_InstancedPosition3dVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexEAlpha();
		PixelShader = PS_InstancedPosition3dVertexEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dVertexEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dVertexEAlphaMul
void VS_InstancedPosition3dVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexEAlphaMul
void PS_InstancedPosition3dVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexEAlphaMul();
		PixelShader = PS_InstancedPosition3dVertexEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dVertexEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dVertexEAlphaInv
void VS_InstancedPosition3dVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

    color = acolor;
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexEAlphaInv
void PS_InstancedPosition3dVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexEAlphaInv();
		PixelShader = PS_InstancedPosition3dVertexEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxform : register(b0) { 
float4 VS_InstancedPosition3dVertexCxform_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxform
void VS_InstancedPosition3dVertexCxform( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dVertexCxform
void PS_InstancedPosition3dVertexCxform( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxform
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxform();
		PixelShader = PS_InstancedPosition3dVertexCxform();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformMul : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformMul
void VS_InstancedPosition3dVertexCxformMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dVertexCxformMul
void PS_InstancedPosition3dVertexCxformMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformMul();
		PixelShader = PS_InstancedPosition3dVertexCxformMul();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformInv : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformInv
void VS_InstancedPosition3dVertexCxformInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dVertexCxformInv
void PS_InstancedPosition3dVertexCxformInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformInv();
		PixelShader = PS_InstancedPosition3dVertexCxformInv();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformEAlpha : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformEAlpha
void VS_InstancedPosition3dVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexCxformEAlpha
void PS_InstancedPosition3dVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformEAlpha();
		PixelShader = PS_InstancedPosition3dVertexCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformEAlphaMul
void VS_InstancedPosition3dVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexCxformEAlphaMul
void PS_InstancedPosition3dVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformEAlphaMul();
		PixelShader = PS_InstancedPosition3dVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformEAlphaInv
void VS_InstancedPosition3dVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformEAlphaInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexCxformEAlphaInv
void PS_InstancedPosition3dVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformEAlphaInv();
		PixelShader = PS_InstancedPosition3dVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformAc : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformAc
void VS_InstancedPosition3dVertexCxformAc( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dVertexCxformAc
void PS_InstancedPosition3dVertexCxformAc( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformAc();
		PixelShader = PS_InstancedPosition3dVertexCxformAc();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformAcMul : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformAcMul
void VS_InstancedPosition3dVertexCxformAcMul( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dVertexCxformAcMul
void PS_InstancedPosition3dVertexCxformAcMul( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformAcMul();
		PixelShader = PS_InstancedPosition3dVertexCxformAcMul();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformAcInv : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformAcInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformAcInv
void VS_InstancedPosition3dVertexCxformAcInv( float4 acolor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformAcInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dVertexCxformAcInv
void PS_InstancedPosition3dVertexCxformAcInv( float4 color : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformAcInv();
		PixelShader = PS_InstancedPosition3dVertexCxformAcInv();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformAcEAlpha : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformAcEAlpha
void VS_InstancedPosition3dVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformAcEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexCxformAcEAlpha
void PS_InstancedPosition3dVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformAcEAlpha();
		PixelShader = PS_InstancedPosition3dVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformAcEAlphaMul
void VS_InstancedPosition3dVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexCxformAcEAlphaMul
void PS_InstancedPosition3dVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformAcEAlphaMul();
		PixelShader = PS_InstancedPosition3dVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dVertexCxformAcEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dVertexCxformAcEAlphaInv
void VS_InstancedPosition3dVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    color = acolor;
    

    fucxadd = VS_InstancedPosition3dVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dVertexCxformAcEAlphaInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dVertexCxformAcEAlphaInv
void PS_InstancedPosition3dVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
  fcolor = color;
  

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dVertexCxformAcEAlphaInv();
		PixelShader = PS_InstancedPosition3dVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTG : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTG_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTG
void VS_InstancedPosition3dTexTGTexTG( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTG_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTG_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTG_vfuniforms[vbatch * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTG_vfuniforms[vbatch * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTG_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTG_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTG_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTG_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTG
void PS_InstancedPosition3dTexTGTexTG( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTG
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTG();
		PixelShader = PS_InstancedPosition3dTexTGTexTG();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGTexDensity : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGTexDensity
void VS_InstancedPosition3dTexTGTexTGTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[vbatch * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[vbatch * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGTexDensity_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedPosition3dTexTGTexTGTexDensity : register(b0) { 
float PS_InstancedPosition3dTexTGTexTGTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dTexTGTexTGTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dTexTGTexTGTexDensity
void PS_InstancedPosition3dTexTGTexTGTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dTexTGTexTGTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dTexTGTexTGTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dTexTGTexTGTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dTexTGTexTGTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGTexDensity();
		PixelShader = PS_InstancedPosition3dTexTGTexTGTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGMul
void VS_InstancedPosition3dTexTGTexTGMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[vbatch * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[vbatch * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGMul
void PS_InstancedPosition3dTexTGTexTGMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGMul();
		PixelShader = PS_InstancedPosition3dTexTGTexTGMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGInv
void VS_InstancedPosition3dTexTGTexTGInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[vbatch * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[vbatch * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGInv
void PS_InstancedPosition3dTexTGTexTGInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGInv();
		PixelShader = PS_InstancedPosition3dTexTGTexTGInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGEAlpha
void VS_InstancedPosition3dTexTGTexTGEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlpha_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGEAlpha
void PS_InstancedPosition3dTexTGTexTGEAlpha( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGTexTGEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity
void VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity : register(b0) { 
float PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity
void PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dTexTGTexTGEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGEAlphaTexDensity();
		PixelShader = PS_InstancedPosition3dTexTGTexTGEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGEAlphaMul
void VS_InstancedPosition3dTexTGTexTGEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaMul_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGEAlphaMul
void PS_InstancedPosition3dTexTGTexTGEAlphaMul( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGTexTGEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGEAlphaInv
void VS_InstancedPosition3dTexTGTexTGEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGEAlphaInv_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGEAlphaInv
void PS_InstancedPosition3dTexTGTexTGEAlphaInv( float4 factor : COLOR0,
           half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGTexTGEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxform : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxform
void VS_InstancedPosition3dTexTGTexTGCxform( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxform_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxform
void PS_InstancedPosition3dTexTGTexTGCxform( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxform
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxform();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxform();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformMul
void VS_InstancedPosition3dTexTGTexTGCxformMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformMul_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformMul
void PS_InstancedPosition3dTexTGTexTGCxformMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformMul();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformInv
void VS_InstancedPosition3dTexTGTexTGCxformInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformInv_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformInv
void PS_InstancedPosition3dTexTGTexTGCxformInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformInv();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformEAlpha
void VS_InstancedPosition3dTexTGTexTGCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformEAlpha_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformEAlpha
void PS_InstancedPosition3dTexTGTexTGCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul
void VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformEAlphaMul
void PS_InstancedPosition3dTexTGTexTGCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv
void VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformEAlphaInv
void PS_InstancedPosition3dTexTGTexTGCxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformAc : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformAc
void VS_InstancedPosition3dTexTGTexTGCxformAc( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformAc_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformAc
void PS_InstancedPosition3dTexTGTexTGCxformAc( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformAc();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformAc();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformAcMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformAcMul
void VS_InstancedPosition3dTexTGTexTGCxformAcMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformAcMul_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformAcMul
void PS_InstancedPosition3dTexTGTexTGCxformAcMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformAcMul();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformAcMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformAcInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformAcInv
void VS_InstancedPosition3dTexTGTexTGCxformAcInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformAcInv_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformAcInv
void PS_InstancedPosition3dTexTGTexTGCxformAcInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformAcInv();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformAcInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha
void VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformAcEAlpha
void PS_InstancedPosition3dTexTGTexTGCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformAcEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul
void VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul
void PS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[240] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv
void VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 1]);
    tc1.x = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 2]);
    tc1.y = dot(pos, VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 6+ 0.1f + 3]);
    

    fucxadd = VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv_vfuniforms[vbatch * 10 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv
void PS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGTexTGCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGTexTGCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertex : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertex_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertex
void VS_InstancedPosition3dTexTGVertex( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertex_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertex_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertex_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertex_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertex_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertex_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertex
void PS_InstancedPosition3dTexTGVertex( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertex
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertex();
		PixelShader = PS_InstancedPosition3dTexTGVertex();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexTexDensity : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexTexDensity
void VS_InstancedPosition3dTexTGVertexTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedPosition3dTexTGVertexTexDensity : register(b0) { 
float PS_InstancedPosition3dTexTGVertexTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dTexTGVertexTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dTexTGVertexTexDensity
void PS_InstancedPosition3dTexTGVertexTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dTexTGVertexTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dTexTGVertexTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dTexTGVertexTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dTexTGVertexTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexTexDensity();
		PixelShader = PS_InstancedPosition3dTexTGVertexTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexMul
void VS_InstancedPosition3dTexTGVertexMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexMul
void PS_InstancedPosition3dTexTGVertexMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexMul();
		PixelShader = PS_InstancedPosition3dTexTGVertexMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexInv
void VS_InstancedPosition3dTexTGVertexInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexInv
void PS_InstancedPosition3dTexTGVertexInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexInv();
		PixelShader = PS_InstancedPosition3dTexTGVertexInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexEAlpha
void VS_InstancedPosition3dTexTGVertexEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexEAlpha
void PS_InstancedPosition3dTexTGVertexEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGVertexEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexEAlphaTexDensity : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexEAlphaTexDensity
void VS_InstancedPosition3dTexTGVertexEAlphaTexDensity( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedPosition3dTexTGVertexEAlphaTexDensity : register(b0) { 
float PS_InstancedPosition3dTexTGVertexEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dTexTGVertexEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dTexTGVertexEAlphaTexDensity
void PS_InstancedPosition3dTexTGVertexEAlphaTexDensity( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dTexTGVertexEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dTexTGVertexEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dTexTGVertexEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dTexTGVertexEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexEAlphaTexDensity();
		PixelShader = PS_InstancedPosition3dTexTGVertexEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexEAlphaMul
void VS_InstancedPosition3dTexTGVertexEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexEAlphaMul
void PS_InstancedPosition3dTexTGVertexEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGVertexEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexEAlphaInv
void VS_InstancedPosition3dTexTGVertexEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexEAlphaInv
void PS_InstancedPosition3dTexTGVertexEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGVertexEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxform : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxform
void VS_InstancedPosition3dTexTGVertexCxform( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxform_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxform
void PS_InstancedPosition3dTexTGVertexCxform( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxform
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxform();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxform();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformMul
void VS_InstancedPosition3dTexTGVertexCxformMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformMul
void PS_InstancedPosition3dTexTGVertexCxformMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformMul();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformInv
void VS_InstancedPosition3dTexTGVertexCxformInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformInv
void PS_InstancedPosition3dTexTGVertexCxformInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformInv();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformEAlpha
void VS_InstancedPosition3dTexTGVertexCxformEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformEAlpha
void PS_InstancedPosition3dTexTGVertexCxformEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformEAlphaMul
void VS_InstancedPosition3dTexTGVertexCxformEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformEAlphaMul
void PS_InstancedPosition3dTexTGVertexCxformEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformEAlphaInv
void VS_InstancedPosition3dTexTGVertexCxformEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformEAlphaInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformEAlphaInv
void PS_InstancedPosition3dTexTGVertexCxformEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformAc : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformAc
void VS_InstancedPosition3dTexTGVertexCxformAc( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformAc_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformAc
void PS_InstancedPosition3dTexTGVertexCxformAc( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformAc();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformAc();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformAcMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformAcMul
void VS_InstancedPosition3dTexTGVertexCxformAcMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformAcMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformAcMul
void PS_InstancedPosition3dTexTGVertexCxformAcMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformAcMul();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformAcMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformAcInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformAcInv
void VS_InstancedPosition3dTexTGVertexCxformAcInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformAcInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformAcInv
void PS_InstancedPosition3dTexTGVertexCxformAcInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformAcInv();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformAcInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformAcEAlpha : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformAcEAlpha
void VS_InstancedPosition3dTexTGVertexCxformAcEAlpha( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformAcEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformAcEAlpha
void PS_InstancedPosition3dTexTGVertexCxformAcEAlpha( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformAcEAlpha();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul
void VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul
void PS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv
void VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv( float4 acolor : COLOR0,
           half4 afactor : COLOR1,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 color : COLOR0,
           out half4 factor : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    color = acolor;
    tc0.x = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv
void PS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv( float4 color : COLOR0,
           float4 factor : COLOR1,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0,tc0);
    float4 fcolor1 = color;
    fcolor = lerp(fcolor1, fcolor0, factor.r);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexTGVertexCxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv();
		PixelShader = PS_InstancedPosition3dTexTGVertexCxformAcEAlphaInv();
	}
}


cbuffer CB_VS_Solid : register(b0) { 
float4 VS_Solid_mvp[2] : packoffset(c0);
};

//VS_Solid
void VS_Solid( float4 pos : POSITION,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_Solid_mvp[0]);
    vpos.y = dot(pos, VS_Solid_mvp[1]);
    
}

cbuffer CB_PS_Solid : register(b0) { 
float4 PS_Solid_cxmul : packoffset(c0);
};

//PS_Solid
void PS_Solid( out float4 fcolor : SV_Target0)
{
    fcolor = PS_Solid_cxmul;
    

      fcolor = fcolor;
    
}

technique Solid
{
	pass p0
	{
		VertexShader = VS_Solid();
		PixelShader = PS_Solid();
	}
}


cbuffer CB_VS_SolidMul : register(b0) { 
float4 VS_SolidMul_mvp[2] : packoffset(c0);
};

//VS_SolidMul
void VS_SolidMul( float4 pos : POSITION,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SolidMul_mvp[0]);
    vpos.y = dot(pos, VS_SolidMul_mvp[1]);
    
}

cbuffer CB_PS_SolidMul : register(b0) { 
float4 PS_SolidMul_cxmul : packoffset(c0);
};

//PS_SolidMul
void PS_SolidMul( out float4 fcolor : SV_Target0)
{
    fcolor = PS_SolidMul_cxmul;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SolidMul
{
	pass p0
	{
		VertexShader = VS_SolidMul();
		PixelShader = PS_SolidMul();
	}
}


cbuffer CB_VS_SolidInv : register(b0) { 
float4 VS_SolidInv_mvp[2] : packoffset(c0);
};

//VS_SolidInv
void VS_SolidInv( float4 pos : POSITION,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SolidInv_mvp[0]);
    vpos.y = dot(pos, VS_SolidInv_mvp[1]);
    
}

cbuffer CB_PS_SolidInv : register(b0) { 
float4 PS_SolidInv_cxmul : packoffset(c0);
};

//PS_SolidInv
void PS_SolidInv( out float4 fcolor : SV_Target0)
{
    fcolor = PS_SolidInv_cxmul;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique SolidInv
{
	pass p0
	{
		VertexShader = VS_SolidInv();
		PixelShader = PS_SolidInv();
	}
}


cbuffer CB_VS_Text : register(b0) { 
float4 VS_Text_cxadd : packoffset(c0);
float4 VS_Text_cxmul : packoffset(c1);
float4 VS_Text_mvp[2] : packoffset(c2);
};

//VS_Text
void VS_Text( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_Text_mvp[0]);
    vpos.y = dot(pos, VS_Text_mvp[1]);
    

    vcolor = acolor * VS_Text_cxmul + VS_Text_cxadd;
    tc0 = atc;
    
}

//PS_Text
void PS_Text( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique Text
{
	pass p0
	{
		VertexShader = VS_Text();
		PixelShader = PS_Text();
	}
}


cbuffer CB_VS_TextTexDensity : register(b0) { 
float4 VS_TextTexDensity_cxadd : packoffset(c0);
float4 VS_TextTexDensity_cxmul : packoffset(c1);
float4 VS_TextTexDensity_mvp[2] : packoffset(c2);
};

//VS_TextTexDensity
void VS_TextTexDensity( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TextTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_TextTexDensity_mvp[1]);
    

    vcolor = acolor * VS_TextTexDensity_cxmul + VS_TextTexDensity_cxadd;
    tc0 = atc;
    
}

cbuffer CB_PS_TextTexDensity : register(b0) { 
float PS_TextTexDensity_mipLevels : packoffset(c0);
float2 PS_TextTexDensity_textureDims : packoffset(c1);
};

//PS_TextTexDensity
void PS_TextTexDensity( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_TextTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_TextTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_TextTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique TextTexDensity
{
	pass p0
	{
		VertexShader = VS_TextTexDensity();
		PixelShader = PS_TextTexDensity();
	}
}


cbuffer CB_VS_TextMul : register(b0) { 
float4 VS_TextMul_cxadd : packoffset(c0);
float4 VS_TextMul_cxmul : packoffset(c1);
float4 VS_TextMul_mvp[2] : packoffset(c2);
};

//VS_TextMul
void VS_TextMul( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TextMul_mvp[0]);
    vpos.y = dot(pos, VS_TextMul_mvp[1]);
    

    vcolor = acolor * VS_TextMul_cxmul + VS_TextMul_cxadd;
    tc0 = atc;
    
}

//PS_TextMul
void PS_TextMul( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TextMul
{
	pass p0
	{
		VertexShader = VS_TextMul();
		PixelShader = PS_TextMul();
	}
}


cbuffer CB_VS_TextInv : register(b0) { 
float4 VS_TextInv_cxadd : packoffset(c0);
float4 VS_TextInv_cxmul : packoffset(c1);
float4 VS_TextInv_mvp[2] : packoffset(c2);
};

//VS_TextInv
void VS_TextInv( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TextInv_mvp[0]);
    vpos.y = dot(pos, VS_TextInv_mvp[1]);
    

    vcolor = acolor * VS_TextInv_cxmul + VS_TextInv_cxadd;
    tc0 = atc;
    
}

//PS_TextInv
void PS_TextInv( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TextInv
{
	pass p0
	{
		VertexShader = VS_TextInv();
		PixelShader = PS_TextInv();
	}
}


cbuffer CB_VS_TexUV : register(b0) { 
float4 VS_TexUV_mvp[2] : packoffset(c0);
};

//VS_TexUV
void VS_TexUV( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexUV_mvp[0]);
    vpos.y = dot(pos, VS_TexUV_mvp[1]);
    

      tc0 = atc;
    
}

//PS_TexUV
void PS_TexUV( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique TexUV
{
	pass p0
	{
		VertexShader = VS_TexUV();
		PixelShader = PS_TexUV();
	}
}


cbuffer CB_VS_TexUVTexDensity : register(b0) { 
float4 VS_TexUVTexDensity_mvp[2] : packoffset(c0);
};

//VS_TexUVTexDensity
void VS_TexUVTexDensity( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexUVTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_TexUVTexDensity_mvp[1]);
    

      tc0 = atc;
    
}

cbuffer CB_PS_TexUVTexDensity : register(b0) { 
float PS_TexUVTexDensity_mipLevels : packoffset(c0);
float2 PS_TexUVTexDensity_textureDims : packoffset(c1);
};

//PS_TexUVTexDensity
void PS_TexUVTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_TexUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_TexUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_TexUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique TexUVTexDensity
{
	pass p0
	{
		VertexShader = VS_TexUVTexDensity();
		PixelShader = PS_TexUVTexDensity();
	}
}


cbuffer CB_VS_TexUVMul : register(b0) { 
float4 VS_TexUVMul_mvp[2] : packoffset(c0);
};

//VS_TexUVMul
void VS_TexUVMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexUVMul_mvp[0]);
    vpos.y = dot(pos, VS_TexUVMul_mvp[1]);
    

      tc0 = atc;
    
}

//PS_TexUVMul
void PS_TexUVMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexUVMul
{
	pass p0
	{
		VertexShader = VS_TexUVMul();
		PixelShader = PS_TexUVMul();
	}
}


cbuffer CB_VS_TexUVInv : register(b0) { 
float4 VS_TexUVInv_mvp[2] : packoffset(c0);
};

//VS_TexUVInv
void VS_TexUVInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexUVInv_mvp[0]);
    vpos.y = dot(pos, VS_TexUVInv_mvp[1]);
    

      tc0 = atc;
    
}

//PS_TexUVInv
void PS_TexUVInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexUVInv
{
	pass p0
	{
		VertexShader = VS_TexUVInv();
		PixelShader = PS_TexUVInv();
	}
}


cbuffer CB_VS_TexUVCxform : register(b0) { 
float4 VS_TexUVCxform_cxadd : packoffset(c0);
float4 VS_TexUVCxform_cxmul : packoffset(c1);
float4 VS_TexUVCxform_mvp[2] : packoffset(c2);
};

//VS_TexUVCxform
void VS_TexUVCxform( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexUVCxform_mvp[0]);
    vpos.y = dot(pos, VS_TexUVCxform_mvp[1]);
    

      tc0 = atc;
    

    fucxadd = VS_TexUVCxform_cxadd;
    fucxmul = VS_TexUVCxform_cxmul;
    
}

//PS_TexUVCxform
void PS_TexUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique TexUVCxform
{
	pass p0
	{
		VertexShader = VS_TexUVCxform();
		PixelShader = PS_TexUVCxform();
	}
}


cbuffer CB_VS_TexUVCxformMul : register(b0) { 
float4 VS_TexUVCxformMul_cxadd : packoffset(c0);
float4 VS_TexUVCxformMul_cxmul : packoffset(c1);
float4 VS_TexUVCxformMul_mvp[2] : packoffset(c2);
};

//VS_TexUVCxformMul
void VS_TexUVCxformMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexUVCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_TexUVCxformMul_mvp[1]);
    

      tc0 = atc;
    

    fucxadd = VS_TexUVCxformMul_cxadd;
    fucxmul = VS_TexUVCxformMul_cxmul;
    
}

//PS_TexUVCxformMul
void PS_TexUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexUVCxformMul
{
	pass p0
	{
		VertexShader = VS_TexUVCxformMul();
		PixelShader = PS_TexUVCxformMul();
	}
}


cbuffer CB_VS_TexUVCxformInv : register(b0) { 
float4 VS_TexUVCxformInv_cxadd : packoffset(c0);
float4 VS_TexUVCxformInv_cxmul : packoffset(c1);
float4 VS_TexUVCxformInv_mvp[2] : packoffset(c2);
};

//VS_TexUVCxformInv
void VS_TexUVCxformInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexUVCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_TexUVCxformInv_mvp[1]);
    

      tc0 = atc;
    

    fucxadd = VS_TexUVCxformInv_cxadd;
    fucxmul = VS_TexUVCxformInv_cxmul;
    
}

//PS_TexUVCxformInv
void PS_TexUVCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique TexUVCxformInv
{
	pass p0
	{
		VertexShader = VS_TexUVCxformInv();
		PixelShader = PS_TexUVCxformInv();
	}
}


cbuffer CB_VS_Position3dSolid : register(b0) { 
float4 VS_Position3dSolid_mvp[4] : packoffset(c0);
};

//VS_Position3dSolid
void VS_Position3dSolid( float4 pos : POSITION,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dSolid_mvp[0]);
    vpos.y = dot(pos, VS_Position3dSolid_mvp[1]);
    vpos.z = dot(pos, VS_Position3dSolid_mvp[2]);
    vpos.w = dot(pos, VS_Position3dSolid_mvp[3]);
    
}

cbuffer CB_PS_Position3dSolid : register(b0) { 
float4 PS_Position3dSolid_cxmul : packoffset(c0);
};

//PS_Position3dSolid
void PS_Position3dSolid( out float4 fcolor : SV_Target0)
{
    fcolor = PS_Position3dSolid_cxmul;
    

      fcolor = fcolor;
    
}

technique Position3dSolid
{
	pass p0
	{
		VertexShader = VS_Position3dSolid();
		PixelShader = PS_Position3dSolid();
	}
}


cbuffer CB_VS_Position3dSolidMul : register(b0) { 
float4 VS_Position3dSolidMul_mvp[4] : packoffset(c0);
};

//VS_Position3dSolidMul
void VS_Position3dSolidMul( float4 pos : POSITION,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dSolidMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dSolidMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dSolidMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dSolidMul_mvp[3]);
    
}

cbuffer CB_PS_Position3dSolidMul : register(b0) { 
float4 PS_Position3dSolidMul_cxmul : packoffset(c0);
};

//PS_Position3dSolidMul
void PS_Position3dSolidMul( out float4 fcolor : SV_Target0)
{
    fcolor = PS_Position3dSolidMul_cxmul;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dSolidMul
{
	pass p0
	{
		VertexShader = VS_Position3dSolidMul();
		PixelShader = PS_Position3dSolidMul();
	}
}


cbuffer CB_VS_Position3dSolidInv : register(b0) { 
float4 VS_Position3dSolidInv_mvp[4] : packoffset(c0);
};

//VS_Position3dSolidInv
void VS_Position3dSolidInv( float4 pos : POSITION,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dSolidInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dSolidInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dSolidInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dSolidInv_mvp[3]);
    
}

cbuffer CB_PS_Position3dSolidInv : register(b0) { 
float4 PS_Position3dSolidInv_cxmul : packoffset(c0);
};

//PS_Position3dSolidInv
void PS_Position3dSolidInv( out float4 fcolor : SV_Target0)
{
    fcolor = PS_Position3dSolidInv_cxmul;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dSolidInv
{
	pass p0
	{
		VertexShader = VS_Position3dSolidInv();
		PixelShader = PS_Position3dSolidInv();
	}
}


cbuffer CB_VS_Position3dText : register(b0) { 
float4 VS_Position3dText_cxadd : packoffset(c0);
float4 VS_Position3dText_cxmul : packoffset(c1);
float4 VS_Position3dText_mvp[4] : packoffset(c2);
};

//VS_Position3dText
void VS_Position3dText( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dText_mvp[0]);
    vpos.y = dot(pos, VS_Position3dText_mvp[1]);
    vpos.z = dot(pos, VS_Position3dText_mvp[2]);
    vpos.w = dot(pos, VS_Position3dText_mvp[3]);
    

    vcolor = acolor * VS_Position3dText_cxmul + VS_Position3dText_cxadd;
    tc0 = atc;
    
}

//PS_Position3dText
void PS_Position3dText( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique Position3dText
{
	pass p0
	{
		VertexShader = VS_Position3dText();
		PixelShader = PS_Position3dText();
	}
}


cbuffer CB_VS_Position3dTextTexDensity : register(b0) { 
float4 VS_Position3dTextTexDensity_cxadd : packoffset(c0);
float4 VS_Position3dTextTexDensity_cxmul : packoffset(c1);
float4 VS_Position3dTextTexDensity_mvp[4] : packoffset(c2);
};

//VS_Position3dTextTexDensity
void VS_Position3dTextTexDensity( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTextTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTextTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTextTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTextTexDensity_mvp[3]);
    

    vcolor = acolor * VS_Position3dTextTexDensity_cxmul + VS_Position3dTextTexDensity_cxadd;
    tc0 = atc;
    
}

cbuffer CB_PS_Position3dTextTexDensity : register(b0) { 
float PS_Position3dTextTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dTextTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dTextTexDensity
void PS_Position3dTextTexDensity( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dTextTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dTextTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dTextTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dTextTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dTextTexDensity();
		PixelShader = PS_Position3dTextTexDensity();
	}
}


cbuffer CB_VS_Position3dTextMul : register(b0) { 
float4 VS_Position3dTextMul_cxadd : packoffset(c0);
float4 VS_Position3dTextMul_cxmul : packoffset(c1);
float4 VS_Position3dTextMul_mvp[4] : packoffset(c2);
};

//VS_Position3dTextMul
void VS_Position3dTextMul( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTextMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTextMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTextMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTextMul_mvp[3]);
    

    vcolor = acolor * VS_Position3dTextMul_cxmul + VS_Position3dTextMul_cxadd;
    tc0 = atc;
    
}

//PS_Position3dTextMul
void PS_Position3dTextMul( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTextMul
{
	pass p0
	{
		VertexShader = VS_Position3dTextMul();
		PixelShader = PS_Position3dTextMul();
	}
}


cbuffer CB_VS_Position3dTextInv : register(b0) { 
float4 VS_Position3dTextInv_cxadd : packoffset(c0);
float4 VS_Position3dTextInv_cxmul : packoffset(c1);
float4 VS_Position3dTextInv_mvp[4] : packoffset(c2);
};

//VS_Position3dTextInv
void VS_Position3dTextInv( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTextInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTextInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTextInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTextInv_mvp[3]);
    

    vcolor = acolor * VS_Position3dTextInv_cxmul + VS_Position3dTextInv_cxadd;
    tc0 = atc;
    
}

//PS_Position3dTextInv
void PS_Position3dTextInv( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTextInv
{
	pass p0
	{
		VertexShader = VS_Position3dTextInv();
		PixelShader = PS_Position3dTextInv();
	}
}


cbuffer CB_VS_Position3dTexUV : register(b0) { 
float4 VS_Position3dTexUV_mvp[4] : packoffset(c0);
};

//VS_Position3dTexUV
void VS_Position3dTexUV( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexUV_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexUV_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexUV_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexUV_mvp[3]);
    

      tc0 = atc;
    
}

//PS_Position3dTexUV
void PS_Position3dTexUV( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique Position3dTexUV
{
	pass p0
	{
		VertexShader = VS_Position3dTexUV();
		PixelShader = PS_Position3dTexUV();
	}
}


cbuffer CB_VS_Position3dTexUVTexDensity : register(b0) { 
float4 VS_Position3dTexUVTexDensity_mvp[4] : packoffset(c0);
};

//VS_Position3dTexUVTexDensity
void VS_Position3dTexUVTexDensity( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexUVTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexUVTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexUVTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexUVTexDensity_mvp[3]);
    

      tc0 = atc;
    
}

cbuffer CB_PS_Position3dTexUVTexDensity : register(b0) { 
float PS_Position3dTexUVTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dTexUVTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dTexUVTexDensity
void PS_Position3dTexUVTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dTexUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dTexUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dTexUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dTexUVTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dTexUVTexDensity();
		PixelShader = PS_Position3dTexUVTexDensity();
	}
}


cbuffer CB_VS_Position3dTexUVMul : register(b0) { 
float4 VS_Position3dTexUVMul_mvp[4] : packoffset(c0);
};

//VS_Position3dTexUVMul
void VS_Position3dTexUVMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexUVMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexUVMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexUVMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexUVMul_mvp[3]);
    

      tc0 = atc;
    
}

//PS_Position3dTexUVMul
void PS_Position3dTexUVMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexUVMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexUVMul();
		PixelShader = PS_Position3dTexUVMul();
	}
}


cbuffer CB_VS_Position3dTexUVInv : register(b0) { 
float4 VS_Position3dTexUVInv_mvp[4] : packoffset(c0);
};

//VS_Position3dTexUVInv
void VS_Position3dTexUVInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexUVInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexUVInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexUVInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexUVInv_mvp[3]);
    

      tc0 = atc;
    
}

//PS_Position3dTexUVInv
void PS_Position3dTexUVInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexUVInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexUVInv();
		PixelShader = PS_Position3dTexUVInv();
	}
}


cbuffer CB_VS_Position3dTexUVCxform : register(b0) { 
float4 VS_Position3dTexUVCxform_cxadd : packoffset(c0);
float4 VS_Position3dTexUVCxform_cxmul : packoffset(c1);
float4 VS_Position3dTexUVCxform_mvp[4] : packoffset(c2);
};

//VS_Position3dTexUVCxform
void VS_Position3dTexUVCxform( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexUVCxform_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexUVCxform_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexUVCxform_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexUVCxform_mvp[3]);
    

      tc0 = atc;
    

    fucxadd = VS_Position3dTexUVCxform_cxadd;
    fucxmul = VS_Position3dTexUVCxform_cxmul;
    
}

//PS_Position3dTexUVCxform
void PS_Position3dTexUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dTexUVCxform
{
	pass p0
	{
		VertexShader = VS_Position3dTexUVCxform();
		PixelShader = PS_Position3dTexUVCxform();
	}
}


cbuffer CB_VS_Position3dTexUVCxformMul : register(b0) { 
float4 VS_Position3dTexUVCxformMul_cxadd : packoffset(c0);
float4 VS_Position3dTexUVCxformMul_cxmul : packoffset(c1);
float4 VS_Position3dTexUVCxformMul_mvp[4] : packoffset(c2);
};

//VS_Position3dTexUVCxformMul
void VS_Position3dTexUVCxformMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexUVCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexUVCxformMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexUVCxformMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexUVCxformMul_mvp[3]);
    

      tc0 = atc;
    

    fucxadd = VS_Position3dTexUVCxformMul_cxadd;
    fucxmul = VS_Position3dTexUVCxformMul_cxmul;
    
}

//PS_Position3dTexUVCxformMul
void PS_Position3dTexUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dTexUVCxformMul
{
	pass p0
	{
		VertexShader = VS_Position3dTexUVCxformMul();
		PixelShader = PS_Position3dTexUVCxformMul();
	}
}


cbuffer CB_VS_Position3dTexUVCxformInv : register(b0) { 
float4 VS_Position3dTexUVCxformInv_cxadd : packoffset(c0);
float4 VS_Position3dTexUVCxformInv_cxmul : packoffset(c1);
float4 VS_Position3dTexUVCxformInv_mvp[4] : packoffset(c2);
};

//VS_Position3dTexUVCxformInv
void VS_Position3dTexUVCxformInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dTexUVCxformInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dTexUVCxformInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dTexUVCxformInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dTexUVCxformInv_mvp[3]);
    

      tc0 = atc;
    

    fucxadd = VS_Position3dTexUVCxformInv_cxadd;
    fucxmul = VS_Position3dTexUVCxformInv_cxmul;
    
}

//PS_Position3dTexUVCxformInv
void PS_Position3dTexUVCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dTexUVCxformInv
{
	pass p0
	{
		VertexShader = VS_Position3dTexUVCxformInv();
		PixelShader = PS_Position3dTexUVCxformInv();
	}
}


cbuffer CB_VS_BatchSolid : register(b0) { 
float4 VS_BatchSolid_vfuniforms[48] : packoffset(c0);
};

//VS_BatchSolid
void VS_BatchSolid( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchSolid_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchSolid_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchSolid : register(b0) { 
float4 PS_BatchSolid_cxmul : packoffset(c0);
};

//PS_BatchSolid
void PS_BatchSolid( out float4 fcolor : SV_Target0)
{
    fcolor = PS_BatchSolid_cxmul;
    

      fcolor = fcolor;
    
}

technique BatchSolid
{
	pass p0
	{
		VertexShader = VS_BatchSolid();
		PixelShader = PS_BatchSolid();
	}
}


cbuffer CB_VS_BatchSolidMul : register(b0) { 
float4 VS_BatchSolidMul_vfuniforms[48] : packoffset(c0);
};

//VS_BatchSolidMul
void VS_BatchSolidMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchSolidMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchSolidMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchSolidMul : register(b0) { 
float4 PS_BatchSolidMul_cxmul : packoffset(c0);
};

//PS_BatchSolidMul
void PS_BatchSolidMul( out float4 fcolor : SV_Target0)
{
    fcolor = PS_BatchSolidMul_cxmul;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchSolidMul
{
	pass p0
	{
		VertexShader = VS_BatchSolidMul();
		PixelShader = PS_BatchSolidMul();
	}
}


cbuffer CB_VS_BatchSolidInv : register(b0) { 
float4 VS_BatchSolidInv_vfuniforms[48] : packoffset(c0);
};

//VS_BatchSolidInv
void VS_BatchSolidInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchSolidInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchSolidInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchSolidInv : register(b0) { 
float4 PS_BatchSolidInv_cxmul : packoffset(c0);
};

//PS_BatchSolidInv
void PS_BatchSolidInv( out float4 fcolor : SV_Target0)
{
    fcolor = PS_BatchSolidInv_cxmul;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchSolidInv
{
	pass p0
	{
		VertexShader = VS_BatchSolidInv();
		PixelShader = PS_BatchSolidInv();
	}
}


cbuffer CB_VS_BatchText : register(b0) { 
float4 VS_BatchText_vfuniforms[96] : packoffset(c0);
};

//VS_BatchText
void VS_BatchText( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchText_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchText_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    vcolor = acolor * VS_BatchText_vfuniforms[vbatch * 4 + 1+ 0.1f] + VS_BatchText_vfuniforms[vbatch * 4 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_BatchText
void PS_BatchText( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique BatchText
{
	pass p0
	{
		VertexShader = VS_BatchText();
		PixelShader = PS_BatchText();
	}
}


cbuffer CB_VS_BatchTextTexDensity : register(b0) { 
float4 VS_BatchTextTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTextTexDensity
void VS_BatchTextTexDensity( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTextTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTextTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    vcolor = acolor * VS_BatchTextTexDensity_vfuniforms[vbatch * 4 + 1+ 0.1f] + VS_BatchTextTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f];
    tc0 = atc;
    
}

cbuffer CB_PS_BatchTextTexDensity : register(b0) { 
float PS_BatchTextTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchTextTexDensity_textureDims : packoffset(c1);
};

//PS_BatchTextTexDensity
void PS_BatchTextTexDensity( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchTextTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchTextTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchTextTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchTextTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchTextTexDensity();
		PixelShader = PS_BatchTextTexDensity();
	}
}


cbuffer CB_VS_BatchTextMul : register(b0) { 
float4 VS_BatchTextMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTextMul
void VS_BatchTextMul( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTextMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTextMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    vcolor = acolor * VS_BatchTextMul_vfuniforms[vbatch * 4 + 1+ 0.1f] + VS_BatchTextMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_BatchTextMul
void PS_BatchTextMul( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTextMul
{
	pass p0
	{
		VertexShader = VS_BatchTextMul();
		PixelShader = PS_BatchTextMul();
	}
}


cbuffer CB_VS_BatchTextInv : register(b0) { 
float4 VS_BatchTextInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTextInv
void VS_BatchTextInv( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTextInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTextInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    vcolor = acolor * VS_BatchTextInv_vfuniforms[vbatch * 4 + 1+ 0.1f] + VS_BatchTextInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_BatchTextInv
void PS_BatchTextInv( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTextInv
{
	pass p0
	{
		VertexShader = VS_BatchTextInv();
		PixelShader = PS_BatchTextInv();
	}
}


cbuffer CB_VS_BatchTexUV : register(b0) { 
float4 VS_BatchTexUV_vfuniforms[48] : packoffset(c0);
};

//VS_BatchTexUV
void VS_BatchTexUV( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexUV_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexUV_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

      tc0 = atc;
    
}

//PS_BatchTexUV
void PS_BatchTexUV( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique BatchTexUV
{
	pass p0
	{
		VertexShader = VS_BatchTexUV();
		PixelShader = PS_BatchTexUV();
	}
}


cbuffer CB_VS_BatchTexUVTexDensity : register(b0) { 
float4 VS_BatchTexUVTexDensity_vfuniforms[48] : packoffset(c0);
};

//VS_BatchTexUVTexDensity
void VS_BatchTexUVTexDensity( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexUVTexDensity_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexUVTexDensity_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

      tc0 = atc;
    
}

cbuffer CB_PS_BatchTexUVTexDensity : register(b0) { 
float PS_BatchTexUVTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchTexUVTexDensity_textureDims : packoffset(c1);
};

//PS_BatchTexUVTexDensity
void PS_BatchTexUVTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchTexUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchTexUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchTexUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchTexUVTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchTexUVTexDensity();
		PixelShader = PS_BatchTexUVTexDensity();
	}
}


cbuffer CB_VS_BatchTexUVMul : register(b0) { 
float4 VS_BatchTexUVMul_vfuniforms[48] : packoffset(c0);
};

//VS_BatchTexUVMul
void VS_BatchTexUVMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexUVMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexUVMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

      tc0 = atc;
    
}

//PS_BatchTexUVMul
void PS_BatchTexUVMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexUVMul
{
	pass p0
	{
		VertexShader = VS_BatchTexUVMul();
		PixelShader = PS_BatchTexUVMul();
	}
}


cbuffer CB_VS_BatchTexUVInv : register(b0) { 
float4 VS_BatchTexUVInv_vfuniforms[48] : packoffset(c0);
};

//VS_BatchTexUVInv
void VS_BatchTexUVInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexUVInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexUVInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

      tc0 = atc;
    
}

//PS_BatchTexUVInv
void PS_BatchTexUVInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexUVInv
{
	pass p0
	{
		VertexShader = VS_BatchTexUVInv();
		PixelShader = PS_BatchTexUVInv();
	}
}


cbuffer CB_VS_BatchTexUVCxform : register(b0) { 
float4 VS_BatchTexUVCxform_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexUVCxform
void VS_BatchTexUVCxform( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexUVCxform_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexUVCxform_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      tc0 = atc;
    

    fucxadd = VS_BatchTexUVCxform_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchTexUVCxform_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchTexUVCxform
void PS_BatchTexUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchTexUVCxform
{
	pass p0
	{
		VertexShader = VS_BatchTexUVCxform();
		PixelShader = PS_BatchTexUVCxform();
	}
}


cbuffer CB_VS_BatchTexUVCxformMul : register(b0) { 
float4 VS_BatchTexUVCxformMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexUVCxformMul
void VS_BatchTexUVCxformMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexUVCxformMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexUVCxformMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      tc0 = atc;
    

    fucxadd = VS_BatchTexUVCxformMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchTexUVCxformMul_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchTexUVCxformMul
void PS_BatchTexUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchTexUVCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchTexUVCxformMul();
		PixelShader = PS_BatchTexUVCxformMul();
	}
}


cbuffer CB_VS_BatchTexUVCxformInv : register(b0) { 
float4 VS_BatchTexUVCxformInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchTexUVCxformInv
void VS_BatchTexUVCxformInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchTexUVCxformInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchTexUVCxformInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      tc0 = atc;
    

    fucxadd = VS_BatchTexUVCxformInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_BatchTexUVCxformInv_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_BatchTexUVCxformInv
void PS_BatchTexUVCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchTexUVCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchTexUVCxformInv();
		PixelShader = PS_BatchTexUVCxformInv();
	}
}


cbuffer CB_VS_BatchPosition3dSolid : register(b0) { 
float4 VS_BatchPosition3dSolid_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dSolid
void VS_BatchPosition3dSolid( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dSolid_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dSolid_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dSolid_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dSolid_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    
}

cbuffer CB_PS_BatchPosition3dSolid : register(b0) { 
float4 PS_BatchPosition3dSolid_cxmul : packoffset(c0);
};

//PS_BatchPosition3dSolid
void PS_BatchPosition3dSolid( out float4 fcolor : SV_Target0)
{
    fcolor = PS_BatchPosition3dSolid_cxmul;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dSolid
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dSolid();
		PixelShader = PS_BatchPosition3dSolid();
	}
}


cbuffer CB_VS_BatchPosition3dSolidMul : register(b0) { 
float4 VS_BatchPosition3dSolidMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dSolidMul
void VS_BatchPosition3dSolidMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dSolidMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dSolidMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dSolidMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dSolidMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    
}

cbuffer CB_PS_BatchPosition3dSolidMul : register(b0) { 
float4 PS_BatchPosition3dSolidMul_cxmul : packoffset(c0);
};

//PS_BatchPosition3dSolidMul
void PS_BatchPosition3dSolidMul( out float4 fcolor : SV_Target0)
{
    fcolor = PS_BatchPosition3dSolidMul_cxmul;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dSolidMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dSolidMul();
		PixelShader = PS_BatchPosition3dSolidMul();
	}
}


cbuffer CB_VS_BatchPosition3dSolidInv : register(b0) { 
float4 VS_BatchPosition3dSolidInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dSolidInv
void VS_BatchPosition3dSolidInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dSolidInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dSolidInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dSolidInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dSolidInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    
}

cbuffer CB_PS_BatchPosition3dSolidInv : register(b0) { 
float4 PS_BatchPosition3dSolidInv_cxmul : packoffset(c0);
};

//PS_BatchPosition3dSolidInv
void PS_BatchPosition3dSolidInv( out float4 fcolor : SV_Target0)
{
    fcolor = PS_BatchPosition3dSolidInv_cxmul;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dSolidInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dSolidInv();
		PixelShader = PS_BatchPosition3dSolidInv();
	}
}


cbuffer CB_VS_BatchPosition3dText : register(b0) { 
float4 VS_BatchPosition3dText_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dText
void VS_BatchPosition3dText( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dText_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dText_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dText_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dText_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    vcolor = acolor * VS_BatchPosition3dText_vfuniforms[vbatch * 6 + 1+ 0.1f] + VS_BatchPosition3dText_vfuniforms[vbatch * 6 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_BatchPosition3dText
void PS_BatchPosition3dText( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dText
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dText();
		PixelShader = PS_BatchPosition3dText();
	}
}


cbuffer CB_VS_BatchPosition3dTextTexDensity : register(b0) { 
float4 VS_BatchPosition3dTextTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTextTexDensity
void VS_BatchPosition3dTextTexDensity( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    vcolor = acolor * VS_BatchPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 1+ 0.1f] + VS_BatchPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f];
    tc0 = atc;
    
}

cbuffer CB_PS_BatchPosition3dTextTexDensity : register(b0) { 
float PS_BatchPosition3dTextTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dTextTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dTextTexDensity
void PS_BatchPosition3dTextTexDensity( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dTextTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dTextTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dTextTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dTextTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTextTexDensity();
		PixelShader = PS_BatchPosition3dTextTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dTextMul : register(b0) { 
float4 VS_BatchPosition3dTextMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTextMul
void VS_BatchPosition3dTextMul( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTextMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTextMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTextMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTextMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    vcolor = acolor * VS_BatchPosition3dTextMul_vfuniforms[vbatch * 6 + 1+ 0.1f] + VS_BatchPosition3dTextMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_BatchPosition3dTextMul
void PS_BatchPosition3dTextMul( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTextMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTextMul();
		PixelShader = PS_BatchPosition3dTextMul();
	}
}


cbuffer CB_VS_BatchPosition3dTextInv : register(b0) { 
float4 VS_BatchPosition3dTextInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTextInv
void VS_BatchPosition3dTextInv( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR2,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTextInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTextInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTextInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTextInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    vcolor = acolor * VS_BatchPosition3dTextInv_vfuniforms[vbatch * 6 + 1+ 0.1f] + VS_BatchPosition3dTextInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_BatchPosition3dTextInv
void PS_BatchPosition3dTextInv( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTextInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTextInv();
		PixelShader = PS_BatchPosition3dTextInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexUV : register(b0) { 
float4 VS_BatchPosition3dTexUV_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dTexUV
void VS_BatchPosition3dTexUV( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

      tc0 = atc;
    
}

//PS_BatchPosition3dTexUV
void PS_BatchPosition3dTexUV( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexUV
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexUV();
		PixelShader = PS_BatchPosition3dTexUV();
	}
}


cbuffer CB_VS_BatchPosition3dTexUVTexDensity : register(b0) { 
float4 VS_BatchPosition3dTexUVTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dTexUVTexDensity
void VS_BatchPosition3dTexUVTexDensity( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

      tc0 = atc;
    
}

cbuffer CB_PS_BatchPosition3dTexUVTexDensity : register(b0) { 
float PS_BatchPosition3dTexUVTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dTexUVTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dTexUVTexDensity
void PS_BatchPosition3dTexUVTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dTexUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dTexUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dTexUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dTexUVTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexUVTexDensity();
		PixelShader = PS_BatchPosition3dTexUVTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dTexUVMul : register(b0) { 
float4 VS_BatchPosition3dTexUVMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dTexUVMul
void VS_BatchPosition3dTexUVMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

      tc0 = atc;
    
}

//PS_BatchPosition3dTexUVMul
void PS_BatchPosition3dTexUVMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexUVMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexUVMul();
		PixelShader = PS_BatchPosition3dTexUVMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexUVInv : register(b0) { 
float4 VS_BatchPosition3dTexUVInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchPosition3dTexUVInv
void VS_BatchPosition3dTexUVInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexUVInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexUVInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexUVInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexUVInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

      tc0 = atc;
    
}

//PS_BatchPosition3dTexUVInv
void PS_BatchPosition3dTexUVInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexUVInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexUVInv();
		PixelShader = PS_BatchPosition3dTexUVInv();
	}
}


cbuffer CB_VS_BatchPosition3dTexUVCxform : register(b0) { 
float4 VS_BatchPosition3dTexUVCxform_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexUVCxform
void VS_BatchPosition3dTexUVCxform( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      tc0 = atc;
    

    fucxadd = VS_BatchPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexUVCxform
void PS_BatchPosition3dTexUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexUVCxform
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexUVCxform();
		PixelShader = PS_BatchPosition3dTexUVCxform();
	}
}


cbuffer CB_VS_BatchPosition3dTexUVCxformMul : register(b0) { 
float4 VS_BatchPosition3dTexUVCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexUVCxformMul
void VS_BatchPosition3dTexUVCxformMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      tc0 = atc;
    

    fucxadd = VS_BatchPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexUVCxformMul
void PS_BatchPosition3dTexUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexUVCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexUVCxformMul();
		PixelShader = PS_BatchPosition3dTexUVCxformMul();
	}
}


cbuffer CB_VS_BatchPosition3dTexUVCxformInv : register(b0) { 
float4 VS_BatchPosition3dTexUVCxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dTexUVCxformInv
void VS_BatchPosition3dTexUVCxformInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      tc0 = atc;
    

    fucxadd = VS_BatchPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchPosition3dTexUVCxformInv
void PS_BatchPosition3dTexUVCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dTexUVCxformInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dTexUVCxformInv();
		PixelShader = PS_BatchPosition3dTexUVCxformInv();
	}
}


cbuffer CB_VS_InstancedSolid : register(b0) { 
float4 VS_InstancedSolid_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedSolid
void VS_InstancedSolid( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedSolid_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedSolid_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedSolid : register(b0) { 
float4 PS_InstancedSolid_cxmul : packoffset(c0);
};

//PS_InstancedSolid
void PS_InstancedSolid( out float4 fcolor : SV_Target0)
{
    fcolor = PS_InstancedSolid_cxmul;
    

      fcolor = fcolor;
    
}

technique InstancedSolid
{
	pass p0
	{
		VertexShader = VS_InstancedSolid();
		PixelShader = PS_InstancedSolid();
	}
}


cbuffer CB_VS_InstancedSolidMul : register(b0) { 
float4 VS_InstancedSolidMul_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedSolidMul
void VS_InstancedSolidMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedSolidMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedSolidMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedSolidMul : register(b0) { 
float4 PS_InstancedSolidMul_cxmul : packoffset(c0);
};

//PS_InstancedSolidMul
void PS_InstancedSolidMul( out float4 fcolor : SV_Target0)
{
    fcolor = PS_InstancedSolidMul_cxmul;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedSolidMul
{
	pass p0
	{
		VertexShader = VS_InstancedSolidMul();
		PixelShader = PS_InstancedSolidMul();
	}
}


cbuffer CB_VS_InstancedSolidInv : register(b0) { 
float4 VS_InstancedSolidInv_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedSolidInv
void VS_InstancedSolidInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedSolidInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedSolidInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedSolidInv : register(b0) { 
float4 PS_InstancedSolidInv_cxmul : packoffset(c0);
};

//PS_InstancedSolidInv
void PS_InstancedSolidInv( out float4 fcolor : SV_Target0)
{
    fcolor = PS_InstancedSolidInv_cxmul;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedSolidInv
{
	pass p0
	{
		VertexShader = VS_InstancedSolidInv();
		PixelShader = PS_InstancedSolidInv();
	}
}


cbuffer CB_VS_InstancedText : register(b0) { 
float4 VS_InstancedText_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedText
void VS_InstancedText( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedText_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedText_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    vcolor = acolor * VS_InstancedText_vfuniforms[vbatch * 4 + 1+ 0.1f] + VS_InstancedText_vfuniforms[vbatch * 4 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_InstancedText
void PS_InstancedText( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique InstancedText
{
	pass p0
	{
		VertexShader = VS_InstancedText();
		PixelShader = PS_InstancedText();
	}
}


cbuffer CB_VS_InstancedTextTexDensity : register(b0) { 
float4 VS_InstancedTextTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTextTexDensity
void VS_InstancedTextTexDensity( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTextTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTextTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    vcolor = acolor * VS_InstancedTextTexDensity_vfuniforms[vbatch * 4 + 1+ 0.1f] + VS_InstancedTextTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f];
    tc0 = atc;
    
}

cbuffer CB_PS_InstancedTextTexDensity : register(b0) { 
float PS_InstancedTextTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedTextTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedTextTexDensity
void PS_InstancedTextTexDensity( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedTextTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedTextTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedTextTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedTextTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedTextTexDensity();
		PixelShader = PS_InstancedTextTexDensity();
	}
}


cbuffer CB_VS_InstancedTextMul : register(b0) { 
float4 VS_InstancedTextMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTextMul
void VS_InstancedTextMul( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTextMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTextMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    vcolor = acolor * VS_InstancedTextMul_vfuniforms[vbatch * 4 + 1+ 0.1f] + VS_InstancedTextMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_InstancedTextMul
void PS_InstancedTextMul( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTextMul
{
	pass p0
	{
		VertexShader = VS_InstancedTextMul();
		PixelShader = PS_InstancedTextMul();
	}
}


cbuffer CB_VS_InstancedTextInv : register(b0) { 
float4 VS_InstancedTextInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTextInv
void VS_InstancedTextInv( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTextInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTextInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

    vcolor = acolor * VS_InstancedTextInv_vfuniforms[vbatch * 4 + 1+ 0.1f] + VS_InstancedTextInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_InstancedTextInv
void PS_InstancedTextInv( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTextInv
{
	pass p0
	{
		VertexShader = VS_InstancedTextInv();
		PixelShader = PS_InstancedTextInv();
	}
}


cbuffer CB_VS_InstancedTexUV : register(b0) { 
float4 VS_InstancedTexUV_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedTexUV
void VS_InstancedTexUV( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexUV_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexUV_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

      tc0 = atc;
    
}

//PS_InstancedTexUV
void PS_InstancedTexUV( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique InstancedTexUV
{
	pass p0
	{
		VertexShader = VS_InstancedTexUV();
		PixelShader = PS_InstancedTexUV();
	}
}


cbuffer CB_VS_InstancedTexUVTexDensity : register(b0) { 
float4 VS_InstancedTexUVTexDensity_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedTexUVTexDensity
void VS_InstancedTexUVTexDensity( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexUVTexDensity_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexUVTexDensity_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

      tc0 = atc;
    
}

cbuffer CB_PS_InstancedTexUVTexDensity : register(b0) { 
float PS_InstancedTexUVTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedTexUVTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedTexUVTexDensity
void PS_InstancedTexUVTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedTexUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedTexUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedTexUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedTexUVTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedTexUVTexDensity();
		PixelShader = PS_InstancedTexUVTexDensity();
	}
}


cbuffer CB_VS_InstancedTexUVMul : register(b0) { 
float4 VS_InstancedTexUVMul_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedTexUVMul
void VS_InstancedTexUVMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexUVMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexUVMul_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

      tc0 = atc;
    
}

//PS_InstancedTexUVMul
void PS_InstancedTexUVMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexUVMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexUVMul();
		PixelShader = PS_InstancedTexUVMul();
	}
}


cbuffer CB_VS_InstancedTexUVInv : register(b0) { 
float4 VS_InstancedTexUVInv_vfuniforms[48] : packoffset(c0);
};

//VS_InstancedTexUVInv
void VS_InstancedTexUVInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexUVInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexUVInv_vfuniforms[vbatch * 2 + 0+ 0.1f + 1]);
    

      tc0 = atc;
    
}

//PS_InstancedTexUVInv
void PS_InstancedTexUVInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexUVInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexUVInv();
		PixelShader = PS_InstancedTexUVInv();
	}
}


cbuffer CB_VS_InstancedTexUVCxform : register(b0) { 
float4 VS_InstancedTexUVCxform_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexUVCxform
void VS_InstancedTexUVCxform( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexUVCxform_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexUVCxform_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      tc0 = atc;
    

    fucxadd = VS_InstancedTexUVCxform_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedTexUVCxform_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedTexUVCxform
void PS_InstancedTexUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedTexUVCxform
{
	pass p0
	{
		VertexShader = VS_InstancedTexUVCxform();
		PixelShader = PS_InstancedTexUVCxform();
	}
}


cbuffer CB_VS_InstancedTexUVCxformMul : register(b0) { 
float4 VS_InstancedTexUVCxformMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexUVCxformMul
void VS_InstancedTexUVCxformMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexUVCxformMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexUVCxformMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      tc0 = atc;
    

    fucxadd = VS_InstancedTexUVCxformMul_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedTexUVCxformMul_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedTexUVCxformMul
void PS_InstancedTexUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedTexUVCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedTexUVCxformMul();
		PixelShader = PS_InstancedTexUVCxformMul();
	}
}


cbuffer CB_VS_InstancedTexUVCxformInv : register(b0) { 
float4 VS_InstancedTexUVCxformInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedTexUVCxformInv
void VS_InstancedTexUVCxformInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedTexUVCxformInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedTexUVCxformInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      tc0 = atc;
    

    fucxadd = VS_InstancedTexUVCxformInv_vfuniforms[vbatch * 4 + 0+ 0.1f];
    fucxmul = VS_InstancedTexUVCxformInv_vfuniforms[vbatch * 4 + 1+ 0.1f];
    
}

//PS_InstancedTexUVCxformInv
void PS_InstancedTexUVCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedTexUVCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedTexUVCxformInv();
		PixelShader = PS_InstancedTexUVCxformInv();
	}
}


cbuffer CB_VS_InstancedPosition3dSolid : register(b0) { 
float4 VS_InstancedPosition3dSolid_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dSolid
void VS_InstancedPosition3dSolid( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dSolid_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dSolid_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dSolid_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dSolid_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    
}

cbuffer CB_PS_InstancedPosition3dSolid : register(b0) { 
float4 PS_InstancedPosition3dSolid_cxmul : packoffset(c0);
};

//PS_InstancedPosition3dSolid
void PS_InstancedPosition3dSolid( out float4 fcolor : SV_Target0)
{
    fcolor = PS_InstancedPosition3dSolid_cxmul;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dSolid
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dSolid();
		PixelShader = PS_InstancedPosition3dSolid();
	}
}


cbuffer CB_VS_InstancedPosition3dSolidMul : register(b0) { 
float4 VS_InstancedPosition3dSolidMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dSolidMul
void VS_InstancedPosition3dSolidMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dSolidMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dSolidMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dSolidMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dSolidMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    
}

cbuffer CB_PS_InstancedPosition3dSolidMul : register(b0) { 
float4 PS_InstancedPosition3dSolidMul_cxmul : packoffset(c0);
};

//PS_InstancedPosition3dSolidMul
void PS_InstancedPosition3dSolidMul( out float4 fcolor : SV_Target0)
{
    fcolor = PS_InstancedPosition3dSolidMul_cxmul;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dSolidMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dSolidMul();
		PixelShader = PS_InstancedPosition3dSolidMul();
	}
}


cbuffer CB_VS_InstancedPosition3dSolidInv : register(b0) { 
float4 VS_InstancedPosition3dSolidInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dSolidInv
void VS_InstancedPosition3dSolidInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dSolidInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dSolidInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dSolidInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dSolidInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    
}

cbuffer CB_PS_InstancedPosition3dSolidInv : register(b0) { 
float4 PS_InstancedPosition3dSolidInv_cxmul : packoffset(c0);
};

//PS_InstancedPosition3dSolidInv
void PS_InstancedPosition3dSolidInv( out float4 fcolor : SV_Target0)
{
    fcolor = PS_InstancedPosition3dSolidInv_cxmul;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dSolidInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dSolidInv();
		PixelShader = PS_InstancedPosition3dSolidInv();
	}
}


cbuffer CB_VS_InstancedPosition3dText : register(b0) { 
float4 VS_InstancedPosition3dText_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dText
void VS_InstancedPosition3dText( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dText_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dText_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dText_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dText_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    vcolor = acolor * VS_InstancedPosition3dText_vfuniforms[vbatch * 6 + 1+ 0.1f] + VS_InstancedPosition3dText_vfuniforms[vbatch * 6 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_InstancedPosition3dText
void PS_InstancedPosition3dText( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dText
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dText();
		PixelShader = PS_InstancedPosition3dText();
	}
}


cbuffer CB_VS_InstancedPosition3dTextTexDensity : register(b0) { 
float4 VS_InstancedPosition3dTextTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTextTexDensity
void VS_InstancedPosition3dTextTexDensity( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    vcolor = acolor * VS_InstancedPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 1+ 0.1f] + VS_InstancedPosition3dTextTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f];
    tc0 = atc;
    
}

cbuffer CB_PS_InstancedPosition3dTextTexDensity : register(b0) { 
float PS_InstancedPosition3dTextTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dTextTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dTextTexDensity
void PS_InstancedPosition3dTextTexDensity( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dTextTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dTextTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dTextTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dTextTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTextTexDensity();
		PixelShader = PS_InstancedPosition3dTextTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dTextMul : register(b0) { 
float4 VS_InstancedPosition3dTextMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTextMul
void VS_InstancedPosition3dTextMul( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTextMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTextMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTextMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTextMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    vcolor = acolor * VS_InstancedPosition3dTextMul_vfuniforms[vbatch * 6 + 1+ 0.1f] + VS_InstancedPosition3dTextMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_InstancedPosition3dTextMul
void PS_InstancedPosition3dTextMul( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTextMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTextMul();
		PixelShader = PS_InstancedPosition3dTextMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTextInv : register(b0) { 
float4 VS_InstancedPosition3dTextInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTextInv
void VS_InstancedPosition3dTextInv( float4 acolor : COLOR0,
           half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vcolor : COLOR0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTextInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTextInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTextInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTextInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

    vcolor = acolor * VS_InstancedPosition3dTextInv_vfuniforms[vbatch * 6 + 1+ 0.1f] + VS_InstancedPosition3dTextInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    tc0 = atc;
    
}

//PS_InstancedPosition3dTextInv
void PS_InstancedPosition3dTextInv( half2 tc0 : TEXCOORD0,
           float4 vcolor : COLOR0,
           out float4 fcolor : SV_Target0)
{
    float4 c = vcolor;
    c.a = c.a * cry_tex0.Sample(cry_sampler0, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTextInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTextInv();
		PixelShader = PS_InstancedPosition3dTextInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexUV : register(b0) { 
float4 VS_InstancedPosition3dTexUV_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dTexUV
void VS_InstancedPosition3dTexUV( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

      tc0 = atc;
    
}

//PS_InstancedPosition3dTexUV
void PS_InstancedPosition3dTexUV( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexUV
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexUV();
		PixelShader = PS_InstancedPosition3dTexUV();
	}
}


cbuffer CB_VS_InstancedPosition3dTexUVTexDensity : register(b0) { 
float4 VS_InstancedPosition3dTexUVTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dTexUVTexDensity
void VS_InstancedPosition3dTexUVTexDensity( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

      tc0 = atc;
    
}

cbuffer CB_PS_InstancedPosition3dTexUVTexDensity : register(b0) { 
float PS_InstancedPosition3dTexUVTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dTexUVTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dTexUVTexDensity
void PS_InstancedPosition3dTexUVTexDensity( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dTexUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dTexUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dTexUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dTexUVTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexUVTexDensity();
		PixelShader = PS_InstancedPosition3dTexUVTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dTexUVMul : register(b0) { 
float4 VS_InstancedPosition3dTexUVMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dTexUVMul
void VS_InstancedPosition3dTexUVMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

      tc0 = atc;
    
}

//PS_InstancedPosition3dTexUVMul
void PS_InstancedPosition3dTexUVMul( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexUVMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexUVMul();
		PixelShader = PS_InstancedPosition3dTexUVMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexUVInv : register(b0) { 
float4 VS_InstancedPosition3dTexUVInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedPosition3dTexUVInv
void VS_InstancedPosition3dTexUVInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexUVInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexUVInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexUVInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexUVInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 3]);
    

      tc0 = atc;
    
}

//PS_InstancedPosition3dTexUVInv
void PS_InstancedPosition3dTexUVInv( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexUVInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexUVInv();
		PixelShader = PS_InstancedPosition3dTexUVInv();
	}
}


cbuffer CB_VS_InstancedPosition3dTexUVCxform : register(b0) { 
float4 VS_InstancedPosition3dTexUVCxform_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexUVCxform
void VS_InstancedPosition3dTexUVCxform( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      tc0 = atc;
    

    fucxadd = VS_InstancedPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexUVCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexUVCxform
void PS_InstancedPosition3dTexUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexUVCxform
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexUVCxform();
		PixelShader = PS_InstancedPosition3dTexUVCxform();
	}
}


cbuffer CB_VS_InstancedPosition3dTexUVCxformMul : register(b0) { 
float4 VS_InstancedPosition3dTexUVCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexUVCxformMul
void VS_InstancedPosition3dTexUVCxformMul( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      tc0 = atc;
    

    fucxadd = VS_InstancedPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexUVCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexUVCxformMul
void PS_InstancedPosition3dTexUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexUVCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexUVCxformMul();
		PixelShader = PS_InstancedPosition3dTexUVCxformMul();
	}
}


cbuffer CB_VS_InstancedPosition3dTexUVCxformInv : register(b0) { 
float4 VS_InstancedPosition3dTexUVCxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dTexUVCxformInv
void VS_InstancedPosition3dTexUVCxformInv( half2 atc : TEXCOORD0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    

      tc0 = atc;
    

    fucxadd = VS_InstancedPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dTexUVCxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dTexUVCxformInv
void PS_InstancedPosition3dTexUVCxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dTexUVCxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dTexUVCxformInv();
		PixelShader = PS_InstancedPosition3dTexUVCxformInv();
	}
}


cbuffer CB_VS_DepthMaskClear : register(b0) { 
float4 VS_DepthMaskClear_mvp[2] : packoffset(c0);
};

//VS_DepthMaskClear
void VS_DepthMaskClear( float4 pos : POSITION,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,1,1); // write non-zero to Z.
    vpos.x = dot(pos, VS_DepthMaskClear_mvp[0]);
    vpos.y = dot(pos, VS_DepthMaskClear_mvp[1]);
    
}

cbuffer CB_PS_DepthMaskClear : register(b0) { 
float4 PS_DepthMaskClear_cxmul : packoffset(c0);
};

//PS_DepthMaskClear
void PS_DepthMaskClear( out float4 fcolor : SV_Target0)
{
    fcolor = PS_DepthMaskClear_cxmul;
    
}

technique DepthMaskClear
{
	pass p0
	{
		VertexShader = VS_DepthMaskClear();
		PixelShader = PS_DepthMaskClear();
	}
}


cbuffer CB_VS_YUV : register(b0) { 
float4 VS_YUV_mvp[2] : packoffset(c0);
float4 VS_YUV_texgen[2] : packoffset(c2);
};

//VS_YUV
void VS_YUV( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUV_mvp[0]);
    vpos.y = dot(pos, VS_YUV_mvp[1]);
    

    tc0.x = dot(pos, VS_YUV_texgen[0]);
    tc0.y = dot(pos, VS_YUV_texgen[1]);
    
}

//PS_YUV
void PS_YUV( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique YUV
{
	pass p0
	{
		VertexShader = VS_YUV();
		PixelShader = PS_YUV();
	}
}


cbuffer CB_VS_YUVTexDensity : register(b0) { 
float4 VS_YUVTexDensity_mvp[2] : packoffset(c0);
float4 VS_YUVTexDensity_texgen[2] : packoffset(c2);
};

//VS_YUVTexDensity
void VS_YUVTexDensity( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_YUVTexDensity_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_YUVTexDensity_texgen[1]);
    
}

cbuffer CB_PS_YUVTexDensity : register(b0) { 
float PS_YUVTexDensity_mipLevels : packoffset(c0);
float2 PS_YUVTexDensity_textureDims : packoffset(c1);
};

//PS_YUVTexDensity
void PS_YUVTexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_YUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_YUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_YUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique YUVTexDensity
{
	pass p0
	{
		VertexShader = VS_YUVTexDensity();
		PixelShader = PS_YUVTexDensity();
	}
}


cbuffer CB_VS_YUVMul : register(b0) { 
float4 VS_YUVMul_mvp[2] : packoffset(c0);
float4 VS_YUVMul_texgen[2] : packoffset(c2);
};

//VS_YUVMul
void VS_YUVMul( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVMul_texgen[1]);
    
}

//PS_YUVMul
void PS_YUVMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVMul
{
	pass p0
	{
		VertexShader = VS_YUVMul();
		PixelShader = PS_YUVMul();
	}
}


cbuffer CB_VS_YUVEAlpha : register(b0) { 
float4 VS_YUVEAlpha_mvp[2] : packoffset(c0);
float4 VS_YUVEAlpha_texgen[2] : packoffset(c2);
};

//VS_YUVEAlpha
void VS_YUVEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_YUVEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_YUVEAlpha_texgen[1]);
    

      factor = afactor;
    
}

//PS_YUVEAlpha
void PS_YUVEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique YUVEAlpha
{
	pass p0
	{
		VertexShader = VS_YUVEAlpha();
		PixelShader = PS_YUVEAlpha();
	}
}


cbuffer CB_VS_YUVEAlphaTexDensity : register(b0) { 
float4 VS_YUVEAlphaTexDensity_mvp[2] : packoffset(c0);
float4 VS_YUVEAlphaTexDensity_texgen[2] : packoffset(c2);
};

//VS_YUVEAlphaTexDensity
void VS_YUVEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_YUVEAlphaTexDensity_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_YUVEAlphaTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_YUVEAlphaTexDensity : register(b0) { 
float PS_YUVEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_YUVEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_YUVEAlphaTexDensity
void PS_YUVEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_YUVEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_YUVEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_YUVEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique YUVEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_YUVEAlphaTexDensity();
		PixelShader = PS_YUVEAlphaTexDensity();
	}
}


cbuffer CB_VS_YUVEAlphaMul : register(b0) { 
float4 VS_YUVEAlphaMul_mvp[2] : packoffset(c0);
float4 VS_YUVEAlphaMul_texgen[2] : packoffset(c2);
};

//VS_YUVEAlphaMul
void VS_YUVEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVEAlphaMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_YUVEAlphaMul
void PS_YUVEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVEAlphaMul
{
	pass p0
	{
		VertexShader = VS_YUVEAlphaMul();
		PixelShader = PS_YUVEAlphaMul();
	}
}


cbuffer CB_VS_YUVCxform : register(b0) { 
float4 VS_YUVCxform_cxadd : packoffset(c0);
float4 VS_YUVCxform_cxmul : packoffset(c1);
float4 VS_YUVCxform_mvp[2] : packoffset(c2);
float4 VS_YUVCxform_texgen[2] : packoffset(c4);
};

//VS_YUVCxform
void VS_YUVCxform( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVCxform_mvp[0]);
    vpos.y = dot(pos, VS_YUVCxform_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVCxform_texgen[0]);
    tc0.y = dot(pos, VS_YUVCxform_texgen[1]);
    

    fucxadd = VS_YUVCxform_cxadd;
    fucxmul = VS_YUVCxform_cxmul;
    
}

//PS_YUVCxform
void PS_YUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique YUVCxform
{
	pass p0
	{
		VertexShader = VS_YUVCxform();
		PixelShader = PS_YUVCxform();
	}
}


cbuffer CB_VS_YUVCxformMul : register(b0) { 
float4 VS_YUVCxformMul_cxadd : packoffset(c0);
float4 VS_YUVCxformMul_cxmul : packoffset(c1);
float4 VS_YUVCxformMul_mvp[2] : packoffset(c2);
float4 VS_YUVCxformMul_texgen[2] : packoffset(c4);
};

//VS_YUVCxformMul
void VS_YUVCxformMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVCxformMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVCxformMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVCxformMul_texgen[1]);
    

    fucxadd = VS_YUVCxformMul_cxadd;
    fucxmul = VS_YUVCxformMul_cxmul;
    
}

//PS_YUVCxformMul
void PS_YUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVCxformMul
{
	pass p0
	{
		VertexShader = VS_YUVCxformMul();
		PixelShader = PS_YUVCxformMul();
	}
}


cbuffer CB_VS_YUVCxformEAlpha : register(b0) { 
float4 VS_YUVCxformEAlpha_cxadd : packoffset(c0);
float4 VS_YUVCxformEAlpha_cxmul : packoffset(c1);
float4 VS_YUVCxformEAlpha_mvp[2] : packoffset(c2);
float4 VS_YUVCxformEAlpha_texgen[2] : packoffset(c4);
};

//VS_YUVCxformEAlpha
void VS_YUVCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_YUVCxformEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVCxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_YUVCxformEAlpha_texgen[1]);
    

    fucxadd = VS_YUVCxformEAlpha_cxadd;
    fucxmul = VS_YUVCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_YUVCxformEAlpha
void PS_YUVCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique YUVCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_YUVCxformEAlpha();
		PixelShader = PS_YUVCxformEAlpha();
	}
}


cbuffer CB_VS_YUVCxformEAlphaMul : register(b0) { 
float4 VS_YUVCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_YUVCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_YUVCxformEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_YUVCxformEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_YUVCxformEAlphaMul
void VS_YUVCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVCxformEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVCxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVCxformEAlphaMul_texgen[1]);
    

    fucxadd = VS_YUVCxformEAlphaMul_cxadd;
    fucxmul = VS_YUVCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_YUVCxformEAlphaMul
void PS_YUVCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_YUVCxformEAlphaMul();
		PixelShader = PS_YUVCxformEAlphaMul();
	}
}


cbuffer CB_VS_YUVCxformAc : register(b0) { 
float4 VS_YUVCxformAc_cxadd : packoffset(c0);
float4 VS_YUVCxformAc_cxmul : packoffset(c1);
float4 VS_YUVCxformAc_mvp[2] : packoffset(c2);
float4 VS_YUVCxformAc_texgen[2] : packoffset(c4);
};

//VS_YUVCxformAc
void VS_YUVCxformAc( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_YUVCxformAc_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVCxformAc_texgen[0]);
    tc0.y = dot(pos, VS_YUVCxformAc_texgen[1]);
    

    fucxadd = VS_YUVCxformAc_cxadd;
    fucxmul = VS_YUVCxformAc_cxmul;
    
}

//PS_YUVCxformAc
void PS_YUVCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique YUVCxformAc
{
	pass p0
	{
		VertexShader = VS_YUVCxformAc();
		PixelShader = PS_YUVCxformAc();
	}
}


cbuffer CB_VS_YUVCxformAcMul : register(b0) { 
float4 VS_YUVCxformAcMul_cxadd : packoffset(c0);
float4 VS_YUVCxformAcMul_cxmul : packoffset(c1);
float4 VS_YUVCxformAcMul_mvp[2] : packoffset(c2);
float4 VS_YUVCxformAcMul_texgen[2] : packoffset(c4);
};

//VS_YUVCxformAcMul
void VS_YUVCxformAcMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVCxformAcMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVCxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVCxformAcMul_texgen[1]);
    

    fucxadd = VS_YUVCxformAcMul_cxadd;
    fucxmul = VS_YUVCxformAcMul_cxmul;
    
}

//PS_YUVCxformAcMul
void PS_YUVCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVCxformAcMul
{
	pass p0
	{
		VertexShader = VS_YUVCxformAcMul();
		PixelShader = PS_YUVCxformAcMul();
	}
}


cbuffer CB_VS_YUVCxformAcEAlpha : register(b0) { 
float4 VS_YUVCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_YUVCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_YUVCxformAcEAlpha_mvp[2] : packoffset(c2);
float4 VS_YUVCxformAcEAlpha_texgen[2] : packoffset(c4);
};

//VS_YUVCxformAcEAlpha
void VS_YUVCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_YUVCxformAcEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVCxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_YUVCxformAcEAlpha_texgen[1]);
    

    fucxadd = VS_YUVCxformAcEAlpha_cxadd;
    fucxmul = VS_YUVCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_YUVCxformAcEAlpha
void PS_YUVCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique YUVCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_YUVCxformAcEAlpha();
		PixelShader = PS_YUVCxformAcEAlpha();
	}
}


cbuffer CB_VS_YUVCxformAcEAlphaMul : register(b0) { 
float4 VS_YUVCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_YUVCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_YUVCxformAcEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_YUVCxformAcEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_YUVCxformAcEAlphaMul
void VS_YUVCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVCxformAcEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVCxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVCxformAcEAlphaMul_texgen[1]);
    

    fucxadd = VS_YUVCxformAcEAlphaMul_cxadd;
    fucxmul = VS_YUVCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_YUVCxformAcEAlphaMul
void PS_YUVCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_YUVCxformAcEAlphaMul();
		PixelShader = PS_YUVCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_YUVA : register(b0) { 
float4 VS_YUVA_mvp[2] : packoffset(c0);
float4 VS_YUVA_texgen[2] : packoffset(c2);
};

//VS_YUVA
void VS_YUVA( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVA_mvp[0]);
    vpos.y = dot(pos, VS_YUVA_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVA_texgen[0]);
    tc0.y = dot(pos, VS_YUVA_texgen[1]);
    
}

//PS_YUVA
void PS_YUVA( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique YUVA
{
	pass p0
	{
		VertexShader = VS_YUVA();
		PixelShader = PS_YUVA();
	}
}


cbuffer CB_VS_YUVATexDensity : register(b0) { 
float4 VS_YUVATexDensity_mvp[2] : packoffset(c0);
float4 VS_YUVATexDensity_texgen[2] : packoffset(c2);
};

//VS_YUVATexDensity
void VS_YUVATexDensity( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVATexDensity_mvp[0]);
    vpos.y = dot(pos, VS_YUVATexDensity_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVATexDensity_texgen[0]);
    tc0.y = dot(pos, VS_YUVATexDensity_texgen[1]);
    
}

cbuffer CB_PS_YUVATexDensity : register(b0) { 
float PS_YUVATexDensity_mipLevels : packoffset(c0);
float2 PS_YUVATexDensity_textureDims : packoffset(c1);
};

//PS_YUVATexDensity
void PS_YUVATexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_YUVATexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_YUVATexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_YUVATexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique YUVATexDensity
{
	pass p0
	{
		VertexShader = VS_YUVATexDensity();
		PixelShader = PS_YUVATexDensity();
	}
}


cbuffer CB_VS_YUVAMul : register(b0) { 
float4 VS_YUVAMul_mvp[2] : packoffset(c0);
float4 VS_YUVAMul_texgen[2] : packoffset(c2);
};

//VS_YUVAMul
void VS_YUVAMul( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVAMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVAMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVAMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVAMul_texgen[1]);
    
}

//PS_YUVAMul
void PS_YUVAMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVAMul
{
	pass p0
	{
		VertexShader = VS_YUVAMul();
		PixelShader = PS_YUVAMul();
	}
}


cbuffer CB_VS_YUVAInv : register(b0) { 
float4 VS_YUVAInv_mvp[2] : packoffset(c0);
float4 VS_YUVAInv_texgen[2] : packoffset(c2);
};

//VS_YUVAInv
void VS_YUVAInv( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVAInv_mvp[0]);
    vpos.y = dot(pos, VS_YUVAInv_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVAInv_texgen[0]);
    tc0.y = dot(pos, VS_YUVAInv_texgen[1]);
    
}

//PS_YUVAInv
void PS_YUVAInv( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique YUVAInv
{
	pass p0
	{
		VertexShader = VS_YUVAInv();
		PixelShader = PS_YUVAInv();
	}
}


cbuffer CB_VS_YUVAEAlpha : register(b0) { 
float4 VS_YUVAEAlpha_mvp[2] : packoffset(c0);
float4 VS_YUVAEAlpha_texgen[2] : packoffset(c2);
};

//VS_YUVAEAlpha
void VS_YUVAEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVAEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_YUVAEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVAEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_YUVAEAlpha_texgen[1]);
    

      factor = afactor;
    
}

//PS_YUVAEAlpha
void PS_YUVAEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique YUVAEAlpha
{
	pass p0
	{
		VertexShader = VS_YUVAEAlpha();
		PixelShader = PS_YUVAEAlpha();
	}
}


cbuffer CB_VS_YUVAEAlphaTexDensity : register(b0) { 
float4 VS_YUVAEAlphaTexDensity_mvp[2] : packoffset(c0);
float4 VS_YUVAEAlphaTexDensity_texgen[2] : packoffset(c2);
};

//VS_YUVAEAlphaTexDensity
void VS_YUVAEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVAEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_YUVAEAlphaTexDensity_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVAEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_YUVAEAlphaTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_YUVAEAlphaTexDensity : register(b0) { 
float PS_YUVAEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_YUVAEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_YUVAEAlphaTexDensity
void PS_YUVAEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_YUVAEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_YUVAEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_YUVAEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique YUVAEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_YUVAEAlphaTexDensity();
		PixelShader = PS_YUVAEAlphaTexDensity();
	}
}


cbuffer CB_VS_YUVAEAlphaMul : register(b0) { 
float4 VS_YUVAEAlphaMul_mvp[2] : packoffset(c0);
float4 VS_YUVAEAlphaMul_texgen[2] : packoffset(c2);
};

//VS_YUVAEAlphaMul
void VS_YUVAEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVAEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVAEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVAEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVAEAlphaMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_YUVAEAlphaMul
void PS_YUVAEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVAEAlphaMul
{
	pass p0
	{
		VertexShader = VS_YUVAEAlphaMul();
		PixelShader = PS_YUVAEAlphaMul();
	}
}


cbuffer CB_VS_YUVAEAlphaInv : register(b0) { 
float4 VS_YUVAEAlphaInv_mvp[2] : packoffset(c0);
float4 VS_YUVAEAlphaInv_texgen[2] : packoffset(c2);
};

//VS_YUVAEAlphaInv
void VS_YUVAEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVAEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_YUVAEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVAEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_YUVAEAlphaInv_texgen[1]);
    

      factor = afactor;
    
}

//PS_YUVAEAlphaInv
void PS_YUVAEAlphaInv( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique YUVAEAlphaInv
{
	pass p0
	{
		VertexShader = VS_YUVAEAlphaInv();
		PixelShader = PS_YUVAEAlphaInv();
	}
}


cbuffer CB_VS_YUVACxform : register(b0) { 
float4 VS_YUVACxform_cxadd : packoffset(c0);
float4 VS_YUVACxform_cxmul : packoffset(c1);
float4 VS_YUVACxform_mvp[2] : packoffset(c2);
float4 VS_YUVACxform_texgen[2] : packoffset(c4);
};

//VS_YUVACxform
void VS_YUVACxform( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxform_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxform_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxform_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxform_texgen[1]);
    

    fucxadd = VS_YUVACxform_cxadd;
    fucxmul = VS_YUVACxform_cxmul;
    
}

//PS_YUVACxform
void PS_YUVACxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique YUVACxform
{
	pass p0
	{
		VertexShader = VS_YUVACxform();
		PixelShader = PS_YUVACxform();
	}
}


cbuffer CB_VS_YUVACxformMul : register(b0) { 
float4 VS_YUVACxformMul_cxadd : packoffset(c0);
float4 VS_YUVACxformMul_cxmul : packoffset(c1);
float4 VS_YUVACxformMul_mvp[2] : packoffset(c2);
float4 VS_YUVACxformMul_texgen[2] : packoffset(c4);
};

//VS_YUVACxformMul
void VS_YUVACxformMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformMul_texgen[1]);
    

    fucxadd = VS_YUVACxformMul_cxadd;
    fucxmul = VS_YUVACxformMul_cxmul;
    
}

//PS_YUVACxformMul
void PS_YUVACxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVACxformMul
{
	pass p0
	{
		VertexShader = VS_YUVACxformMul();
		PixelShader = PS_YUVACxformMul();
	}
}


cbuffer CB_VS_YUVACxformInv : register(b0) { 
float4 VS_YUVACxformInv_cxadd : packoffset(c0);
float4 VS_YUVACxformInv_cxmul : packoffset(c1);
float4 VS_YUVACxformInv_mvp[2] : packoffset(c2);
float4 VS_YUVACxformInv_texgen[2] : packoffset(c4);
};

//VS_YUVACxformInv
void VS_YUVACxformInv( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformInv_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformInv_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformInv_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformInv_texgen[1]);
    

    fucxadd = VS_YUVACxformInv_cxadd;
    fucxmul = VS_YUVACxformInv_cxmul;
    
}

//PS_YUVACxformInv
void PS_YUVACxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique YUVACxformInv
{
	pass p0
	{
		VertexShader = VS_YUVACxformInv();
		PixelShader = PS_YUVACxformInv();
	}
}


cbuffer CB_VS_YUVACxformEAlpha : register(b0) { 
float4 VS_YUVACxformEAlpha_cxadd : packoffset(c0);
float4 VS_YUVACxformEAlpha_cxmul : packoffset(c1);
float4 VS_YUVACxformEAlpha_mvp[2] : packoffset(c2);
float4 VS_YUVACxformEAlpha_texgen[2] : packoffset(c4);
};

//VS_YUVACxformEAlpha
void VS_YUVACxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformEAlpha_texgen[1]);
    

    fucxadd = VS_YUVACxformEAlpha_cxadd;
    fucxmul = VS_YUVACxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_YUVACxformEAlpha
void PS_YUVACxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique YUVACxformEAlpha
{
	pass p0
	{
		VertexShader = VS_YUVACxformEAlpha();
		PixelShader = PS_YUVACxformEAlpha();
	}
}


cbuffer CB_VS_YUVACxformEAlphaMul : register(b0) { 
float4 VS_YUVACxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_YUVACxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_YUVACxformEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_YUVACxformEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_YUVACxformEAlphaMul
void VS_YUVACxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformEAlphaMul_texgen[1]);
    

    fucxadd = VS_YUVACxformEAlphaMul_cxadd;
    fucxmul = VS_YUVACxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_YUVACxformEAlphaMul
void PS_YUVACxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVACxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_YUVACxformEAlphaMul();
		PixelShader = PS_YUVACxformEAlphaMul();
	}
}


cbuffer CB_VS_YUVACxformEAlphaInv : register(b0) { 
float4 VS_YUVACxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_YUVACxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_YUVACxformEAlphaInv_mvp[2] : packoffset(c2);
float4 VS_YUVACxformEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_YUVACxformEAlphaInv
void VS_YUVACxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformEAlphaInv_texgen[1]);
    

    fucxadd = VS_YUVACxformEAlphaInv_cxadd;
    fucxmul = VS_YUVACxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_YUVACxformEAlphaInv
void PS_YUVACxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique YUVACxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_YUVACxformEAlphaInv();
		PixelShader = PS_YUVACxformEAlphaInv();
	}
}


cbuffer CB_VS_YUVACxformAc : register(b0) { 
float4 VS_YUVACxformAc_cxadd : packoffset(c0);
float4 VS_YUVACxformAc_cxmul : packoffset(c1);
float4 VS_YUVACxformAc_mvp[2] : packoffset(c2);
float4 VS_YUVACxformAc_texgen[2] : packoffset(c4);
};

//VS_YUVACxformAc
void VS_YUVACxformAc( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformAc_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformAc_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformAc_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformAc_texgen[1]);
    

    fucxadd = VS_YUVACxformAc_cxadd;
    fucxmul = VS_YUVACxformAc_cxmul;
    
}

//PS_YUVACxformAc
void PS_YUVACxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique YUVACxformAc
{
	pass p0
	{
		VertexShader = VS_YUVACxformAc();
		PixelShader = PS_YUVACxformAc();
	}
}


cbuffer CB_VS_YUVACxformAcMul : register(b0) { 
float4 VS_YUVACxformAcMul_cxadd : packoffset(c0);
float4 VS_YUVACxformAcMul_cxmul : packoffset(c1);
float4 VS_YUVACxformAcMul_mvp[2] : packoffset(c2);
float4 VS_YUVACxformAcMul_texgen[2] : packoffset(c4);
};

//VS_YUVACxformAcMul
void VS_YUVACxformAcMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformAcMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformAcMul_texgen[1]);
    

    fucxadd = VS_YUVACxformAcMul_cxadd;
    fucxmul = VS_YUVACxformAcMul_cxmul;
    
}

//PS_YUVACxformAcMul
void PS_YUVACxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVACxformAcMul
{
	pass p0
	{
		VertexShader = VS_YUVACxformAcMul();
		PixelShader = PS_YUVACxformAcMul();
	}
}


cbuffer CB_VS_YUVACxformAcInv : register(b0) { 
float4 VS_YUVACxformAcInv_cxadd : packoffset(c0);
float4 VS_YUVACxformAcInv_cxmul : packoffset(c1);
float4 VS_YUVACxformAcInv_mvp[2] : packoffset(c2);
float4 VS_YUVACxformAcInv_texgen[2] : packoffset(c4);
};

//VS_YUVACxformAcInv
void VS_YUVACxformAcInv( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformAcInv_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformAcInv_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformAcInv_texgen[1]);
    

    fucxadd = VS_YUVACxformAcInv_cxadd;
    fucxmul = VS_YUVACxformAcInv_cxmul;
    
}

//PS_YUVACxformAcInv
void PS_YUVACxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique YUVACxformAcInv
{
	pass p0
	{
		VertexShader = VS_YUVACxformAcInv();
		PixelShader = PS_YUVACxformAcInv();
	}
}


cbuffer CB_VS_YUVACxformAcEAlpha : register(b0) { 
float4 VS_YUVACxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_YUVACxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_YUVACxformAcEAlpha_mvp[2] : packoffset(c2);
float4 VS_YUVACxformAcEAlpha_texgen[2] : packoffset(c4);
};

//VS_YUVACxformAcEAlpha
void VS_YUVACxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformAcEAlpha_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformAcEAlpha_texgen[1]);
    

    fucxadd = VS_YUVACxformAcEAlpha_cxadd;
    fucxmul = VS_YUVACxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_YUVACxformAcEAlpha
void PS_YUVACxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique YUVACxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_YUVACxformAcEAlpha();
		PixelShader = PS_YUVACxformAcEAlpha();
	}
}


cbuffer CB_VS_YUVACxformAcEAlphaMul : register(b0) { 
float4 VS_YUVACxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_YUVACxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_YUVACxformAcEAlphaMul_mvp[2] : packoffset(c2);
float4 VS_YUVACxformAcEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_YUVACxformAcEAlphaMul
void VS_YUVACxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformAcEAlphaMul_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformAcEAlphaMul_texgen[1]);
    

    fucxadd = VS_YUVACxformAcEAlphaMul_cxadd;
    fucxmul = VS_YUVACxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_YUVACxformAcEAlphaMul
void PS_YUVACxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique YUVACxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_YUVACxformAcEAlphaMul();
		PixelShader = PS_YUVACxformAcEAlphaMul();
	}
}


cbuffer CB_VS_YUVACxformAcEAlphaInv : register(b0) { 
float4 VS_YUVACxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_YUVACxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_YUVACxformAcEAlphaInv_mvp[2] : packoffset(c2);
float4 VS_YUVACxformAcEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_YUVACxformAcEAlphaInv
void VS_YUVACxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_YUVACxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_YUVACxformAcEAlphaInv_mvp[1]);
    

    tc0.x = dot(pos, VS_YUVACxformAcEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_YUVACxformAcEAlphaInv_texgen[1]);
    

    fucxadd = VS_YUVACxformAcEAlphaInv_cxadd;
    fucxmul = VS_YUVACxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_YUVACxformAcEAlphaInv
void PS_YUVACxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique YUVACxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_YUVACxformAcEAlphaInv();
		PixelShader = PS_YUVACxformAcEAlphaInv();
	}
}


cbuffer CB_VS_Position3dYUV : register(b0) { 
float4 VS_Position3dYUV_mvp[4] : packoffset(c0);
float4 VS_Position3dYUV_texgen[2] : packoffset(c4);
};

//VS_Position3dYUV
void VS_Position3dYUV( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUV_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUV_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUV_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUV_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUV_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUV_texgen[1]);
    
}

//PS_Position3dYUV
void PS_Position3dYUV( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique Position3dYUV
{
	pass p0
	{
		VertexShader = VS_Position3dYUV();
		PixelShader = PS_Position3dYUV();
	}
}


cbuffer CB_VS_Position3dYUVTexDensity : register(b0) { 
float4 VS_Position3dYUVTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVTexDensity_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVTexDensity
void VS_Position3dYUVTexDensity( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVTexDensity_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVTexDensity_texgen[1]);
    
}

cbuffer CB_PS_Position3dYUVTexDensity : register(b0) { 
float PS_Position3dYUVTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dYUVTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dYUVTexDensity
void PS_Position3dYUVTexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dYUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dYUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dYUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dYUVTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dYUVTexDensity();
		PixelShader = PS_Position3dYUVTexDensity();
	}
}


cbuffer CB_VS_Position3dYUVMul : register(b0) { 
float4 VS_Position3dYUVMul_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVMul_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVMul
void VS_Position3dYUVMul( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVMul_texgen[1]);
    
}

//PS_Position3dYUVMul
void PS_Position3dYUVMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVMul();
		PixelShader = PS_Position3dYUVMul();
	}
}


cbuffer CB_VS_Position3dYUVEAlpha : register(b0) { 
float4 VS_Position3dYUVEAlpha_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVEAlpha_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVEAlpha
void VS_Position3dYUVEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVEAlpha_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dYUVEAlpha
void PS_Position3dYUVEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dYUVEAlpha();
		PixelShader = PS_Position3dYUVEAlpha();
	}
}


cbuffer CB_VS_Position3dYUVEAlphaTexDensity : register(b0) { 
float4 VS_Position3dYUVEAlphaTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVEAlphaTexDensity_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVEAlphaTexDensity
void VS_Position3dYUVEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVEAlphaTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVEAlphaTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVEAlphaTexDensity_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVEAlphaTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_Position3dYUVEAlphaTexDensity : register(b0) { 
float PS_Position3dYUVEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dYUVEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dYUVEAlphaTexDensity
void PS_Position3dYUVEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dYUVEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dYUVEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dYUVEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dYUVEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dYUVEAlphaTexDensity();
		PixelShader = PS_Position3dYUVEAlphaTexDensity();
	}
}


cbuffer CB_VS_Position3dYUVEAlphaMul : register(b0) { 
float4 VS_Position3dYUVEAlphaMul_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVEAlphaMul
void VS_Position3dYUVEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVEAlphaMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dYUVEAlphaMul
void PS_Position3dYUVEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVEAlphaMul();
		PixelShader = PS_Position3dYUVEAlphaMul();
	}
}


cbuffer CB_VS_Position3dYUVCxform : register(b0) { 
float4 VS_Position3dYUVCxform_cxadd : packoffset(c0);
float4 VS_Position3dYUVCxform_cxmul : packoffset(c1);
float4 VS_Position3dYUVCxform_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVCxform_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVCxform
void VS_Position3dYUVCxform( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVCxform_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVCxform_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVCxform_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVCxform_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVCxform_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVCxform_texgen[1]);
    

    fucxadd = VS_Position3dYUVCxform_cxadd;
    fucxmul = VS_Position3dYUVCxform_cxmul;
    
}

//PS_Position3dYUVCxform
void PS_Position3dYUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dYUVCxform
{
	pass p0
	{
		VertexShader = VS_Position3dYUVCxform();
		PixelShader = PS_Position3dYUVCxform();
	}
}


cbuffer CB_VS_Position3dYUVCxformMul : register(b0) { 
float4 VS_Position3dYUVCxformMul_cxadd : packoffset(c0);
float4 VS_Position3dYUVCxformMul_cxmul : packoffset(c1);
float4 VS_Position3dYUVCxformMul_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVCxformMul_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVCxformMul
void VS_Position3dYUVCxformMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVCxformMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVCxformMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVCxformMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVCxformMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVCxformMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVCxformMul_texgen[1]);
    

    fucxadd = VS_Position3dYUVCxformMul_cxadd;
    fucxmul = VS_Position3dYUVCxformMul_cxmul;
    
}

//PS_Position3dYUVCxformMul
void PS_Position3dYUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVCxformMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVCxformMul();
		PixelShader = PS_Position3dYUVCxformMul();
	}
}


cbuffer CB_VS_Position3dYUVCxformEAlpha : register(b0) { 
float4 VS_Position3dYUVCxformEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dYUVCxformEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dYUVCxformEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVCxformEAlpha_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVCxformEAlpha
void VS_Position3dYUVCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVCxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVCxformEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVCxformEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVCxformEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVCxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVCxformEAlpha_texgen[1]);
    

    fucxadd = VS_Position3dYUVCxformEAlpha_cxadd;
    fucxmul = VS_Position3dYUVCxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVCxformEAlpha
void PS_Position3dYUVCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dYUVCxformEAlpha();
		PixelShader = PS_Position3dYUVCxformEAlpha();
	}
}


cbuffer CB_VS_Position3dYUVCxformEAlphaMul : register(b0) { 
float4 VS_Position3dYUVCxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dYUVCxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dYUVCxformEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVCxformEAlphaMul_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVCxformEAlphaMul
void VS_Position3dYUVCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVCxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVCxformEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVCxformEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVCxformEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVCxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVCxformEAlphaMul_texgen[1]);
    

    fucxadd = VS_Position3dYUVCxformEAlphaMul_cxadd;
    fucxmul = VS_Position3dYUVCxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVCxformEAlphaMul
void PS_Position3dYUVCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVCxformEAlphaMul();
		PixelShader = PS_Position3dYUVCxformEAlphaMul();
	}
}


cbuffer CB_VS_Position3dYUVCxformAc : register(b0) { 
float4 VS_Position3dYUVCxformAc_cxadd : packoffset(c0);
float4 VS_Position3dYUVCxformAc_cxmul : packoffset(c1);
float4 VS_Position3dYUVCxformAc_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVCxformAc_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVCxformAc
void VS_Position3dYUVCxformAc( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVCxformAc_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVCxformAc_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVCxformAc_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVCxformAc_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVCxformAc_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVCxformAc_texgen[1]);
    

    fucxadd = VS_Position3dYUVCxformAc_cxadd;
    fucxmul = VS_Position3dYUVCxformAc_cxmul;
    
}

//PS_Position3dYUVCxformAc
void PS_Position3dYUVCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dYUVCxformAc
{
	pass p0
	{
		VertexShader = VS_Position3dYUVCxformAc();
		PixelShader = PS_Position3dYUVCxformAc();
	}
}


cbuffer CB_VS_Position3dYUVCxformAcMul : register(b0) { 
float4 VS_Position3dYUVCxformAcMul_cxadd : packoffset(c0);
float4 VS_Position3dYUVCxformAcMul_cxmul : packoffset(c1);
float4 VS_Position3dYUVCxformAcMul_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVCxformAcMul_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVCxformAcMul
void VS_Position3dYUVCxformAcMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVCxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVCxformAcMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVCxformAcMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVCxformAcMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVCxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVCxformAcMul_texgen[1]);
    

    fucxadd = VS_Position3dYUVCxformAcMul_cxadd;
    fucxmul = VS_Position3dYUVCxformAcMul_cxmul;
    
}

//PS_Position3dYUVCxformAcMul
void PS_Position3dYUVCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVCxformAcMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVCxformAcMul();
		PixelShader = PS_Position3dYUVCxformAcMul();
	}
}


cbuffer CB_VS_Position3dYUVCxformAcEAlpha : register(b0) { 
float4 VS_Position3dYUVCxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dYUVCxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dYUVCxformAcEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVCxformAcEAlpha_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVCxformAcEAlpha
void VS_Position3dYUVCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVCxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVCxformAcEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVCxformAcEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVCxformAcEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVCxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVCxformAcEAlpha_texgen[1]);
    

    fucxadd = VS_Position3dYUVCxformAcEAlpha_cxadd;
    fucxmul = VS_Position3dYUVCxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVCxformAcEAlpha
void PS_Position3dYUVCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dYUVCxformAcEAlpha();
		PixelShader = PS_Position3dYUVCxformAcEAlpha();
	}
}


cbuffer CB_VS_Position3dYUVCxformAcEAlphaMul : register(b0) { 
float4 VS_Position3dYUVCxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dYUVCxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dYUVCxformAcEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVCxformAcEAlphaMul_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVCxformAcEAlphaMul
void VS_Position3dYUVCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVCxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVCxformAcEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVCxformAcEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVCxformAcEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVCxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVCxformAcEAlphaMul_texgen[1]);
    

    fucxadd = VS_Position3dYUVCxformAcEAlphaMul_cxadd;
    fucxmul = VS_Position3dYUVCxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVCxformAcEAlphaMul
void PS_Position3dYUVCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVCxformAcEAlphaMul();
		PixelShader = PS_Position3dYUVCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_Position3dYUVA : register(b0) { 
float4 VS_Position3dYUVA_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVA_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVA
void VS_Position3dYUVA( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVA_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVA_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVA_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVA_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVA_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVA_texgen[1]);
    
}

//PS_Position3dYUVA
void PS_Position3dYUVA( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique Position3dYUVA
{
	pass p0
	{
		VertexShader = VS_Position3dYUVA();
		PixelShader = PS_Position3dYUVA();
	}
}


cbuffer CB_VS_Position3dYUVATexDensity : register(b0) { 
float4 VS_Position3dYUVATexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVATexDensity_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVATexDensity
void VS_Position3dYUVATexDensity( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVATexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVATexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVATexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVATexDensity_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVATexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVATexDensity_texgen[1]);
    
}

cbuffer CB_PS_Position3dYUVATexDensity : register(b0) { 
float PS_Position3dYUVATexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dYUVATexDensity_textureDims : packoffset(c1);
};

//PS_Position3dYUVATexDensity
void PS_Position3dYUVATexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dYUVATexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dYUVATexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dYUVATexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dYUVATexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dYUVATexDensity();
		PixelShader = PS_Position3dYUVATexDensity();
	}
}


cbuffer CB_VS_Position3dYUVAMul : register(b0) { 
float4 VS_Position3dYUVAMul_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVAMul_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVAMul
void VS_Position3dYUVAMul( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVAMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVAMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVAMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVAMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVAMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVAMul_texgen[1]);
    
}

//PS_Position3dYUVAMul
void PS_Position3dYUVAMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVAMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVAMul();
		PixelShader = PS_Position3dYUVAMul();
	}
}


cbuffer CB_VS_Position3dYUVAInv : register(b0) { 
float4 VS_Position3dYUVAInv_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVAInv_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVAInv
void VS_Position3dYUVAInv( float4 pos : POSITION,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVAInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVAInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVAInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVAInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVAInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVAInv_texgen[1]);
    
}

//PS_Position3dYUVAInv
void PS_Position3dYUVAInv( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dYUVAInv
{
	pass p0
	{
		VertexShader = VS_Position3dYUVAInv();
		PixelShader = PS_Position3dYUVAInv();
	}
}


cbuffer CB_VS_Position3dYUVAEAlpha : register(b0) { 
float4 VS_Position3dYUVAEAlpha_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVAEAlpha_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVAEAlpha
void VS_Position3dYUVAEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVAEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVAEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVAEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVAEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVAEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVAEAlpha_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dYUVAEAlpha
void PS_Position3dYUVAEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVAEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dYUVAEAlpha();
		PixelShader = PS_Position3dYUVAEAlpha();
	}
}


cbuffer CB_VS_Position3dYUVAEAlphaTexDensity : register(b0) { 
float4 VS_Position3dYUVAEAlphaTexDensity_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVAEAlphaTexDensity_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVAEAlphaTexDensity
void VS_Position3dYUVAEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVAEAlphaTexDensity_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVAEAlphaTexDensity_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVAEAlphaTexDensity_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVAEAlphaTexDensity_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVAEAlphaTexDensity_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVAEAlphaTexDensity_texgen[1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_Position3dYUVAEAlphaTexDensity : register(b0) { 
float PS_Position3dYUVAEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_Position3dYUVAEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_Position3dYUVAEAlphaTexDensity
void PS_Position3dYUVAEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_Position3dYUVAEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_Position3dYUVAEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_Position3dYUVAEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique Position3dYUVAEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_Position3dYUVAEAlphaTexDensity();
		PixelShader = PS_Position3dYUVAEAlphaTexDensity();
	}
}


cbuffer CB_VS_Position3dYUVAEAlphaMul : register(b0) { 
float4 VS_Position3dYUVAEAlphaMul_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVAEAlphaMul_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVAEAlphaMul
void VS_Position3dYUVAEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVAEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVAEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVAEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVAEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVAEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVAEAlphaMul_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dYUVAEAlphaMul
void PS_Position3dYUVAEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVAEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVAEAlphaMul();
		PixelShader = PS_Position3dYUVAEAlphaMul();
	}
}


cbuffer CB_VS_Position3dYUVAEAlphaInv : register(b0) { 
float4 VS_Position3dYUVAEAlphaInv_mvp[4] : packoffset(c0);
float4 VS_Position3dYUVAEAlphaInv_texgen[2] : packoffset(c4);
};

//VS_Position3dYUVAEAlphaInv
void VS_Position3dYUVAEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVAEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVAEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVAEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVAEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVAEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVAEAlphaInv_texgen[1]);
    

      factor = afactor;
    
}

//PS_Position3dYUVAEAlphaInv
void PS_Position3dYUVAEAlphaInv( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dYUVAEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dYUVAEAlphaInv();
		PixelShader = PS_Position3dYUVAEAlphaInv();
	}
}


cbuffer CB_VS_Position3dYUVACxform : register(b0) { 
float4 VS_Position3dYUVACxform_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxform_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxform_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxform_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxform
void VS_Position3dYUVACxform( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxform_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxform_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxform_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxform_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxform_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxform_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxform_cxadd;
    fucxmul = VS_Position3dYUVACxform_cxmul;
    
}

//PS_Position3dYUVACxform
void PS_Position3dYUVACxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxform
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxform();
		PixelShader = PS_Position3dYUVACxform();
	}
}


cbuffer CB_VS_Position3dYUVACxformMul : register(b0) { 
float4 VS_Position3dYUVACxformMul_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformMul_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformMul_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformMul_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformMul
void VS_Position3dYUVACxformMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformMul_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformMul_cxadd;
    fucxmul = VS_Position3dYUVACxformMul_cxmul;
    
}

//PS_Position3dYUVACxformMul
void PS_Position3dYUVACxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformMul();
		PixelShader = PS_Position3dYUVACxformMul();
	}
}


cbuffer CB_VS_Position3dYUVACxformInv : register(b0) { 
float4 VS_Position3dYUVACxformInv_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformInv_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformInv_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformInv_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformInv
void VS_Position3dYUVACxformInv( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformInv_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformInv_cxadd;
    fucxmul = VS_Position3dYUVACxformInv_cxmul;
    
}

//PS_Position3dYUVACxformInv
void PS_Position3dYUVACxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformInv
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformInv();
		PixelShader = PS_Position3dYUVACxformInv();
	}
}


cbuffer CB_VS_Position3dYUVACxformEAlpha : register(b0) { 
float4 VS_Position3dYUVACxformEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformEAlpha_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformEAlpha
void VS_Position3dYUVACxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformEAlpha_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformEAlpha_cxadd;
    fucxmul = VS_Position3dYUVACxformEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVACxformEAlpha
void PS_Position3dYUVACxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformEAlpha();
		PixelShader = PS_Position3dYUVACxformEAlpha();
	}
}


cbuffer CB_VS_Position3dYUVACxformEAlphaMul : register(b0) { 
float4 VS_Position3dYUVACxformEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformEAlphaMul_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformEAlphaMul
void VS_Position3dYUVACxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformEAlphaMul_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformEAlphaMul_cxadd;
    fucxmul = VS_Position3dYUVACxformEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVACxformEAlphaMul
void PS_Position3dYUVACxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformEAlphaMul();
		PixelShader = PS_Position3dYUVACxformEAlphaMul();
	}
}


cbuffer CB_VS_Position3dYUVACxformEAlphaInv : register(b0) { 
float4 VS_Position3dYUVACxformEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformEAlphaInv_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformEAlphaInv_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformEAlphaInv
void VS_Position3dYUVACxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformEAlphaInv_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformEAlphaInv_cxadd;
    fucxmul = VS_Position3dYUVACxformEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVACxformEAlphaInv
void PS_Position3dYUVACxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformEAlphaInv();
		PixelShader = PS_Position3dYUVACxformEAlphaInv();
	}
}


cbuffer CB_VS_Position3dYUVACxformAc : register(b0) { 
float4 VS_Position3dYUVACxformAc_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformAc_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformAc_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformAc_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformAc
void VS_Position3dYUVACxformAc( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformAc_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformAc_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformAc_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformAc_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformAc_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformAc_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformAc_cxadd;
    fucxmul = VS_Position3dYUVACxformAc_cxmul;
    
}

//PS_Position3dYUVACxformAc
void PS_Position3dYUVACxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformAc
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformAc();
		PixelShader = PS_Position3dYUVACxformAc();
	}
}


cbuffer CB_VS_Position3dYUVACxformAcMul : register(b0) { 
float4 VS_Position3dYUVACxformAcMul_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformAcMul_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformAcMul_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformAcMul_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformAcMul
void VS_Position3dYUVACxformAcMul( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformAcMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformAcMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformAcMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformAcMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformAcMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformAcMul_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformAcMul_cxadd;
    fucxmul = VS_Position3dYUVACxformAcMul_cxmul;
    
}

//PS_Position3dYUVACxformAcMul
void PS_Position3dYUVACxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformAcMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformAcMul();
		PixelShader = PS_Position3dYUVACxformAcMul();
	}
}


cbuffer CB_VS_Position3dYUVACxformAcInv : register(b0) { 
float4 VS_Position3dYUVACxformAcInv_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformAcInv_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformAcInv_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformAcInv_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformAcInv
void VS_Position3dYUVACxformAcInv( float4 pos : POSITION,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformAcInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformAcInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformAcInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformAcInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformAcInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformAcInv_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformAcInv_cxadd;
    fucxmul = VS_Position3dYUVACxformAcInv_cxmul;
    
}

//PS_Position3dYUVACxformAcInv
void PS_Position3dYUVACxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformAcInv
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformAcInv();
		PixelShader = PS_Position3dYUVACxformAcInv();
	}
}


cbuffer CB_VS_Position3dYUVACxformAcEAlpha : register(b0) { 
float4 VS_Position3dYUVACxformAcEAlpha_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformAcEAlpha_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformAcEAlpha_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformAcEAlpha_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformAcEAlpha
void VS_Position3dYUVACxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformAcEAlpha_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformAcEAlpha_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformAcEAlpha_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformAcEAlpha_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformAcEAlpha_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformAcEAlpha_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformAcEAlpha_cxadd;
    fucxmul = VS_Position3dYUVACxformAcEAlpha_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVACxformAcEAlpha
void PS_Position3dYUVACxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformAcEAlpha();
		PixelShader = PS_Position3dYUVACxformAcEAlpha();
	}
}


cbuffer CB_VS_Position3dYUVACxformAcEAlphaMul : register(b0) { 
float4 VS_Position3dYUVACxformAcEAlphaMul_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformAcEAlphaMul_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformAcEAlphaMul_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformAcEAlphaMul_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformAcEAlphaMul
void VS_Position3dYUVACxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformAcEAlphaMul_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformAcEAlphaMul_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformAcEAlphaMul_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformAcEAlphaMul_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformAcEAlphaMul_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformAcEAlphaMul_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformAcEAlphaMul_cxadd;
    fucxmul = VS_Position3dYUVACxformAcEAlphaMul_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVACxformAcEAlphaMul
void PS_Position3dYUVACxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformAcEAlphaMul();
		PixelShader = PS_Position3dYUVACxformAcEAlphaMul();
	}
}


cbuffer CB_VS_Position3dYUVACxformAcEAlphaInv : register(b0) { 
float4 VS_Position3dYUVACxformAcEAlphaInv_cxadd : packoffset(c0);
float4 VS_Position3dYUVACxformAcEAlphaInv_cxmul : packoffset(c1);
float4 VS_Position3dYUVACxformAcEAlphaInv_mvp[4] : packoffset(c2);
float4 VS_Position3dYUVACxformAcEAlphaInv_texgen[2] : packoffset(c6);
};

//VS_Position3dYUVACxformAcEAlphaInv
void VS_Position3dYUVACxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_Position3dYUVACxformAcEAlphaInv_mvp[0]);
    vpos.y = dot(pos, VS_Position3dYUVACxformAcEAlphaInv_mvp[1]);
    vpos.z = dot(pos, VS_Position3dYUVACxformAcEAlphaInv_mvp[2]);
    vpos.w = dot(pos, VS_Position3dYUVACxformAcEAlphaInv_mvp[3]);
    

    tc0.x = dot(pos, VS_Position3dYUVACxformAcEAlphaInv_texgen[0]);
    tc0.y = dot(pos, VS_Position3dYUVACxformAcEAlphaInv_texgen[1]);
    

    fucxadd = VS_Position3dYUVACxformAcEAlphaInv_cxadd;
    fucxmul = VS_Position3dYUVACxformAcEAlphaInv_cxmul;
    

      factor = afactor;
    
}

//PS_Position3dYUVACxformAcEAlphaInv
void PS_Position3dYUVACxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique Position3dYUVACxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_Position3dYUVACxformAcEAlphaInv();
		PixelShader = PS_Position3dYUVACxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchYUV : register(b0) { 
float4 VS_BatchYUV_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUV
void VS_BatchYUV( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUV_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUV_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_BatchYUV
void PS_BatchYUV( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique BatchYUV
{
	pass p0
	{
		VertexShader = VS_BatchYUV();
		PixelShader = PS_BatchYUV();
	}
}


cbuffer CB_VS_BatchYUVTexDensity : register(b0) { 
float4 VS_BatchYUVTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVTexDensity
void VS_BatchYUVTexDensity( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchYUVTexDensity : register(b0) { 
float PS_BatchYUVTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchYUVTexDensity_textureDims : packoffset(c1);
};

//PS_BatchYUVTexDensity
void PS_BatchYUVTexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchYUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchYUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchYUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchYUVTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchYUVTexDensity();
		PixelShader = PS_BatchYUVTexDensity();
	}
}


cbuffer CB_VS_BatchYUVMul : register(b0) { 
float4 VS_BatchYUVMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVMul
void VS_BatchYUVMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_BatchYUVMul
void PS_BatchYUVMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVMul();
		PixelShader = PS_BatchYUVMul();
	}
}


cbuffer CB_VS_BatchYUVEAlpha : register(b0) { 
float4 VS_BatchYUVEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVEAlpha
void VS_BatchYUVEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchYUVEAlpha
void PS_BatchYUVEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchYUVEAlpha();
		PixelShader = PS_BatchYUVEAlpha();
	}
}


cbuffer CB_VS_BatchYUVEAlphaTexDensity : register(b0) { 
float4 VS_BatchYUVEAlphaTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVEAlphaTexDensity
void VS_BatchYUVEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchYUVEAlphaTexDensity : register(b0) { 
float PS_BatchYUVEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchYUVEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchYUVEAlphaTexDensity
void PS_BatchYUVEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchYUVEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchYUVEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchYUVEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchYUVEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchYUVEAlphaTexDensity();
		PixelShader = PS_BatchYUVEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchYUVEAlphaMul : register(b0) { 
float4 VS_BatchYUVEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVEAlphaMul
void VS_BatchYUVEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchYUVEAlphaMul
void PS_BatchYUVEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVEAlphaMul();
		PixelShader = PS_BatchYUVEAlphaMul();
	}
}


cbuffer CB_VS_BatchYUVCxform : register(b0) { 
float4 VS_BatchYUVCxform_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVCxform
void VS_BatchYUVCxform( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVCxform
void PS_BatchYUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchYUVCxform
{
	pass p0
	{
		VertexShader = VS_BatchYUVCxform();
		PixelShader = PS_BatchYUVCxform();
	}
}


cbuffer CB_VS_BatchYUVCxformMul : register(b0) { 
float4 VS_BatchYUVCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVCxformMul
void VS_BatchYUVCxformMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVCxformMul
void PS_BatchYUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVCxformMul();
		PixelShader = PS_BatchYUVCxformMul();
	}
}


cbuffer CB_VS_BatchYUVCxformEAlpha : register(b0) { 
float4 VS_BatchYUVCxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVCxformEAlpha
void VS_BatchYUVCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVCxformEAlpha
void PS_BatchYUVCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchYUVCxformEAlpha();
		PixelShader = PS_BatchYUVCxformEAlpha();
	}
}


cbuffer CB_VS_BatchYUVCxformEAlphaMul : register(b0) { 
float4 VS_BatchYUVCxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVCxformEAlphaMul
void VS_BatchYUVCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVCxformEAlphaMul
void PS_BatchYUVCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVCxformEAlphaMul();
		PixelShader = PS_BatchYUVCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchYUVCxformAc : register(b0) { 
float4 VS_BatchYUVCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVCxformAc
void VS_BatchYUVCxformAc( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVCxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVCxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVCxformAc
void PS_BatchYUVCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchYUVCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchYUVCxformAc();
		PixelShader = PS_BatchYUVCxformAc();
	}
}


cbuffer CB_VS_BatchYUVCxformAcMul : register(b0) { 
float4 VS_BatchYUVCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVCxformAcMul
void VS_BatchYUVCxformAcMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVCxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVCxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVCxformAcMul
void PS_BatchYUVCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVCxformAcMul();
		PixelShader = PS_BatchYUVCxformAcMul();
	}
}


cbuffer CB_VS_BatchYUVCxformAcEAlpha : register(b0) { 
float4 VS_BatchYUVCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVCxformAcEAlpha
void VS_BatchYUVCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVCxformAcEAlpha
void PS_BatchYUVCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchYUVCxformAcEAlpha();
		PixelShader = PS_BatchYUVCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchYUVCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchYUVCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVCxformAcEAlphaMul
void VS_BatchYUVCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVCxformAcEAlphaMul
void PS_BatchYUVCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVCxformAcEAlphaMul();
		PixelShader = PS_BatchYUVCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchYUVA : register(b0) { 
float4 VS_BatchYUVA_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVA
void VS_BatchYUVA( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVA_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVA_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVA_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVA_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_BatchYUVA
void PS_BatchYUVA( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique BatchYUVA
{
	pass p0
	{
		VertexShader = VS_BatchYUVA();
		PixelShader = PS_BatchYUVA();
	}
}


cbuffer CB_VS_BatchYUVATexDensity : register(b0) { 
float4 VS_BatchYUVATexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVATexDensity
void VS_BatchYUVATexDensity( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVATexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVATexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVATexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVATexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchYUVATexDensity : register(b0) { 
float PS_BatchYUVATexDensity_mipLevels : packoffset(c0);
float2 PS_BatchYUVATexDensity_textureDims : packoffset(c1);
};

//PS_BatchYUVATexDensity
void PS_BatchYUVATexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchYUVATexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchYUVATexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchYUVATexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchYUVATexDensity
{
	pass p0
	{
		VertexShader = VS_BatchYUVATexDensity();
		PixelShader = PS_BatchYUVATexDensity();
	}
}


cbuffer CB_VS_BatchYUVAMul : register(b0) { 
float4 VS_BatchYUVAMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVAMul
void VS_BatchYUVAMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVAMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVAMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVAMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVAMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_BatchYUVAMul
void PS_BatchYUVAMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVAMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVAMul();
		PixelShader = PS_BatchYUVAMul();
	}
}


cbuffer CB_VS_BatchYUVAInv : register(b0) { 
float4 VS_BatchYUVAInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVAInv
void VS_BatchYUVAInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVAInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVAInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVAInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVAInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_BatchYUVAInv
void PS_BatchYUVAInv( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchYUVAInv
{
	pass p0
	{
		VertexShader = VS_BatchYUVAInv();
		PixelShader = PS_BatchYUVAInv();
	}
}


cbuffer CB_VS_BatchYUVAEAlpha : register(b0) { 
float4 VS_BatchYUVAEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVAEAlpha
void VS_BatchYUVAEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVAEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVAEAlpha_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVAEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVAEAlpha_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchYUVAEAlpha
void PS_BatchYUVAEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVAEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchYUVAEAlpha();
		PixelShader = PS_BatchYUVAEAlpha();
	}
}


cbuffer CB_VS_BatchYUVAEAlphaTexDensity : register(b0) { 
float4 VS_BatchYUVAEAlphaTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVAEAlphaTexDensity
void VS_BatchYUVAEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchYUVAEAlphaTexDensity : register(b0) { 
float PS_BatchYUVAEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchYUVAEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchYUVAEAlphaTexDensity
void PS_BatchYUVAEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchYUVAEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchYUVAEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchYUVAEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchYUVAEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchYUVAEAlphaTexDensity();
		PixelShader = PS_BatchYUVAEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchYUVAEAlphaMul : register(b0) { 
float4 VS_BatchYUVAEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVAEAlphaMul
void VS_BatchYUVAEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchYUVAEAlphaMul
void PS_BatchYUVAEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVAEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVAEAlphaMul();
		PixelShader = PS_BatchYUVAEAlphaMul();
	}
}


cbuffer CB_VS_BatchYUVAEAlphaInv : register(b0) { 
float4 VS_BatchYUVAEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_BatchYUVAEAlphaInv
void VS_BatchYUVAEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchYUVAEAlphaInv
void PS_BatchYUVAEAlphaInv( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchYUVAEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchYUVAEAlphaInv();
		PixelShader = PS_BatchYUVAEAlphaInv();
	}
}


cbuffer CB_VS_BatchYUVACxform : register(b0) { 
float4 VS_BatchYUVACxform_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxform
void VS_BatchYUVACxform( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVACxform
void PS_BatchYUVACxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchYUVACxform
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxform();
		PixelShader = PS_BatchYUVACxform();
	}
}


cbuffer CB_VS_BatchYUVACxformMul : register(b0) { 
float4 VS_BatchYUVACxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformMul
void VS_BatchYUVACxformMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVACxformMul
void PS_BatchYUVACxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformMul();
		PixelShader = PS_BatchYUVACxformMul();
	}
}


cbuffer CB_VS_BatchYUVACxformInv : register(b0) { 
float4 VS_BatchYUVACxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformInv
void VS_BatchYUVACxformInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVACxformInv
void PS_BatchYUVACxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformInv
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformInv();
		PixelShader = PS_BatchYUVACxformInv();
	}
}


cbuffer CB_VS_BatchYUVACxformEAlpha : register(b0) { 
float4 VS_BatchYUVACxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformEAlpha
void VS_BatchYUVACxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVACxformEAlpha
void PS_BatchYUVACxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformEAlpha();
		PixelShader = PS_BatchYUVACxformEAlpha();
	}
}


cbuffer CB_VS_BatchYUVACxformEAlphaMul : register(b0) { 
float4 VS_BatchYUVACxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformEAlphaMul
void VS_BatchYUVACxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVACxformEAlphaMul
void PS_BatchYUVACxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformEAlphaMul();
		PixelShader = PS_BatchYUVACxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchYUVACxformEAlphaInv : register(b0) { 
float4 VS_BatchYUVACxformEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformEAlphaInv
void VS_BatchYUVACxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVACxformEAlphaInv
void PS_BatchYUVACxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformEAlphaInv();
		PixelShader = PS_BatchYUVACxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchYUVACxformAc : register(b0) { 
float4 VS_BatchYUVACxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformAc
void VS_BatchYUVACxformAc( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVACxformAc
void PS_BatchYUVACxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformAc
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformAc();
		PixelShader = PS_BatchYUVACxformAc();
	}
}


cbuffer CB_VS_BatchYUVACxformAcMul : register(b0) { 
float4 VS_BatchYUVACxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformAcMul
void VS_BatchYUVACxformAcMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVACxformAcMul
void PS_BatchYUVACxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformAcMul();
		PixelShader = PS_BatchYUVACxformAcMul();
	}
}


cbuffer CB_VS_BatchYUVACxformAcInv : register(b0) { 
float4 VS_BatchYUVACxformAcInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformAcInv
void VS_BatchYUVACxformAcInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformAcInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformAcInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_BatchYUVACxformAcInv
void PS_BatchYUVACxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformAcInv();
		PixelShader = PS_BatchYUVACxformAcInv();
	}
}


cbuffer CB_VS_BatchYUVACxformAcEAlpha : register(b0) { 
float4 VS_BatchYUVACxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformAcEAlpha
void VS_BatchYUVACxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVACxformAcEAlpha
void PS_BatchYUVACxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformAcEAlpha();
		PixelShader = PS_BatchYUVACxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchYUVACxformAcEAlphaMul : register(b0) { 
float4 VS_BatchYUVACxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformAcEAlphaMul
void VS_BatchYUVACxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVACxformAcEAlphaMul
void PS_BatchYUVACxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformAcEAlphaMul();
		PixelShader = PS_BatchYUVACxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchYUVACxformAcEAlphaInv : register(b0) { 
float4 VS_BatchYUVACxformAcEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchYUVACxformAcEAlphaInv
void VS_BatchYUVACxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BatchYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BatchYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_BatchYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_BatchYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchYUVACxformAcEAlphaInv
void PS_BatchYUVACxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchYUVACxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchYUVACxformAcEAlphaInv();
		PixelShader = PS_BatchYUVACxformAcEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dYUV : register(b0) { 
float4 VS_BatchPosition3dYUV_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUV
void VS_BatchPosition3dYUV( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUV_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUV_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUV_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUV_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUV_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUV_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_BatchPosition3dYUV
void PS_BatchPosition3dYUV( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUV
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUV();
		PixelShader = PS_BatchPosition3dYUV();
	}
}


cbuffer CB_VS_BatchPosition3dYUVTexDensity : register(b0) { 
float4 VS_BatchPosition3dYUVTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVTexDensity
void VS_BatchPosition3dYUVTexDensity( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchPosition3dYUVTexDensity : register(b0) { 
float PS_BatchPosition3dYUVTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dYUVTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dYUVTexDensity
void PS_BatchPosition3dYUVTexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dYUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dYUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dYUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dYUVTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVTexDensity();
		PixelShader = PS_BatchPosition3dYUVTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dYUVMul : register(b0) { 
float4 VS_BatchPosition3dYUVMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVMul
void VS_BatchPosition3dYUVMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_BatchPosition3dYUVMul
void PS_BatchPosition3dYUVMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVMul();
		PixelShader = PS_BatchPosition3dYUVMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVEAlpha : register(b0) { 
float4 VS_BatchPosition3dYUVEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVEAlpha
void VS_BatchPosition3dYUVEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVEAlpha
void PS_BatchPosition3dYUVEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVEAlpha();
		PixelShader = PS_BatchPosition3dYUVEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dYUVEAlphaTexDensity : register(b0) { 
float4 VS_BatchPosition3dYUVEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVEAlphaTexDensity
void VS_BatchPosition3dYUVEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchPosition3dYUVEAlphaTexDensity : register(b0) { 
float PS_BatchPosition3dYUVEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dYUVEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dYUVEAlphaTexDensity
void PS_BatchPosition3dYUVEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dYUVEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dYUVEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dYUVEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dYUVEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVEAlphaTexDensity();
		PixelShader = PS_BatchPosition3dYUVEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dYUVEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dYUVEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVEAlphaMul
void VS_BatchPosition3dYUVEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVEAlphaMul
void PS_BatchPosition3dYUVEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVEAlphaMul();
		PixelShader = PS_BatchPosition3dYUVEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVCxform : register(b0) { 
float4 VS_BatchPosition3dYUVCxform_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVCxform
void VS_BatchPosition3dYUVCxform( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVCxform_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVCxform_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVCxform
void PS_BatchPosition3dYUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVCxform
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVCxform();
		PixelShader = PS_BatchPosition3dYUVCxform();
	}
}


cbuffer CB_VS_BatchPosition3dYUVCxformMul : register(b0) { 
float4 VS_BatchPosition3dYUVCxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVCxformMul
void VS_BatchPosition3dYUVCxformMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVCxformMul
void PS_BatchPosition3dYUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVCxformMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVCxformMul();
		PixelShader = PS_BatchPosition3dYUVCxformMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVCxformEAlpha : register(b0) { 
float4 VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVCxformEAlpha
void VS_BatchPosition3dYUVCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVCxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVCxformEAlpha
void PS_BatchPosition3dYUVCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVCxformEAlpha();
		PixelShader = PS_BatchPosition3dYUVCxformEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dYUVCxformEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVCxformEAlphaMul
void VS_BatchPosition3dYUVCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVCxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVCxformEAlphaMul
void PS_BatchPosition3dYUVCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVCxformEAlphaMul();
		PixelShader = PS_BatchPosition3dYUVCxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVCxformAc : register(b0) { 
float4 VS_BatchPosition3dYUVCxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVCxformAc
void VS_BatchPosition3dYUVCxformAc( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVCxformAc
void PS_BatchPosition3dYUVCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVCxformAc
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVCxformAc();
		PixelShader = PS_BatchPosition3dYUVCxformAc();
	}
}


cbuffer CB_VS_BatchPosition3dYUVCxformAcMul : register(b0) { 
float4 VS_BatchPosition3dYUVCxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVCxformAcMul
void VS_BatchPosition3dYUVCxformAcMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVCxformAcMul
void PS_BatchPosition3dYUVCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVCxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVCxformAcMul();
		PixelShader = PS_BatchPosition3dYUVCxformAcMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVCxformAcEAlpha : register(b0) { 
float4 VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVCxformAcEAlpha
void VS_BatchPosition3dYUVCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVCxformAcEAlpha
void PS_BatchPosition3dYUVCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVCxformAcEAlpha();
		PixelShader = PS_BatchPosition3dYUVCxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dYUVCxformAcEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVCxformAcEAlphaMul
void VS_BatchPosition3dYUVCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVCxformAcEAlphaMul
void PS_BatchPosition3dYUVCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVCxformAcEAlphaMul();
		PixelShader = PS_BatchPosition3dYUVCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVA : register(b0) { 
float4 VS_BatchPosition3dYUVA_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVA
void VS_BatchPosition3dYUVA( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVA_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVA_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVA_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVA_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVA_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVA_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_BatchPosition3dYUVA
void PS_BatchPosition3dYUVA( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVA
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVA();
		PixelShader = PS_BatchPosition3dYUVA();
	}
}


cbuffer CB_VS_BatchPosition3dYUVATexDensity : register(b0) { 
float4 VS_BatchPosition3dYUVATexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVATexDensity
void VS_BatchPosition3dYUVATexDensity( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

cbuffer CB_PS_BatchPosition3dYUVATexDensity : register(b0) { 
float PS_BatchPosition3dYUVATexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dYUVATexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dYUVATexDensity
void PS_BatchPosition3dYUVATexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dYUVATexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dYUVATexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dYUVATexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dYUVATexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVATexDensity();
		PixelShader = PS_BatchPosition3dYUVATexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dYUVAMul : register(b0) { 
float4 VS_BatchPosition3dYUVAMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVAMul
void VS_BatchPosition3dYUVAMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVAMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVAMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVAMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVAMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVAMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVAMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_BatchPosition3dYUVAMul
void PS_BatchPosition3dYUVAMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVAMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVAMul();
		PixelShader = PS_BatchPosition3dYUVAMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVAInv : register(b0) { 
float4 VS_BatchPosition3dYUVAInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVAInv
void VS_BatchPosition3dYUVAInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVAInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVAInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVAInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVAInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVAInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVAInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_BatchPosition3dYUVAInv
void PS_BatchPosition3dYUVAInv( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVAInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVAInv();
		PixelShader = PS_BatchPosition3dYUVAInv();
	}
}


cbuffer CB_VS_BatchPosition3dYUVAEAlpha : register(b0) { 
float4 VS_BatchPosition3dYUVAEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVAEAlpha
void VS_BatchPosition3dYUVAEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVAEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVAEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVAEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVAEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVAEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVAEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVAEAlpha
void PS_BatchPosition3dYUVAEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVAEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVAEAlpha();
		PixelShader = PS_BatchPosition3dYUVAEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dYUVAEAlphaTexDensity : register(b0) { 
float4 VS_BatchPosition3dYUVAEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVAEAlphaTexDensity
void VS_BatchPosition3dYUVAEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVAEAlphaTexDensity_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_BatchPosition3dYUVAEAlphaTexDensity : register(b0) { 
float PS_BatchPosition3dYUVAEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_BatchPosition3dYUVAEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_BatchPosition3dYUVAEAlphaTexDensity
void PS_BatchPosition3dYUVAEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_BatchPosition3dYUVAEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_BatchPosition3dYUVAEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_BatchPosition3dYUVAEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique BatchPosition3dYUVAEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVAEAlphaTexDensity();
		PixelShader = PS_BatchPosition3dYUVAEAlphaTexDensity();
	}
}


cbuffer CB_VS_BatchPosition3dYUVAEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dYUVAEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVAEAlphaMul
void VS_BatchPosition3dYUVAEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVAEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVAEAlphaMul
void PS_BatchPosition3dYUVAEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVAEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVAEAlphaMul();
		PixelShader = PS_BatchPosition3dYUVAEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVAEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dYUVAEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_BatchPosition3dYUVAEAlphaInv
void VS_BatchPosition3dYUVAEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVAEAlphaInv_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVAEAlphaInv
void PS_BatchPosition3dYUVAEAlphaInv( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVAEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVAEAlphaInv();
		PixelShader = PS_BatchPosition3dYUVAEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxform : register(b0) { 
float4 VS_BatchPosition3dYUVACxform_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxform
void VS_BatchPosition3dYUVACxform( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxform_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxform_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVACxform
void PS_BatchPosition3dYUVACxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxform
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxform();
		PixelShader = PS_BatchPosition3dYUVACxform();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformMul : register(b0) { 
float4 VS_BatchPosition3dYUVACxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformMul
void VS_BatchPosition3dYUVACxformMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVACxformMul
void PS_BatchPosition3dYUVACxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformMul();
		PixelShader = PS_BatchPosition3dYUVACxformMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformInv : register(b0) { 
float4 VS_BatchPosition3dYUVACxformInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformInv
void VS_BatchPosition3dYUVACxformInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVACxformInv
void PS_BatchPosition3dYUVACxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformInv();
		PixelShader = PS_BatchPosition3dYUVACxformInv();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformEAlpha : register(b0) { 
float4 VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformEAlpha
void VS_BatchPosition3dYUVACxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVACxformEAlpha
void PS_BatchPosition3dYUVACxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformEAlpha();
		PixelShader = PS_BatchPosition3dYUVACxformEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformEAlphaMul
void VS_BatchPosition3dYUVACxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVACxformEAlphaMul
void PS_BatchPosition3dYUVACxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformEAlphaMul();
		PixelShader = PS_BatchPosition3dYUVACxformEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformEAlphaInv
void VS_BatchPosition3dYUVACxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVACxformEAlphaInv
void PS_BatchPosition3dYUVACxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformEAlphaInv();
		PixelShader = PS_BatchPosition3dYUVACxformEAlphaInv();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformAc : register(b0) { 
float4 VS_BatchPosition3dYUVACxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformAc
void VS_BatchPosition3dYUVACxformAc( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVACxformAc
void PS_BatchPosition3dYUVACxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformAc
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformAc();
		PixelShader = PS_BatchPosition3dYUVACxformAc();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformAcMul : register(b0) { 
float4 VS_BatchPosition3dYUVACxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformAcMul
void VS_BatchPosition3dYUVACxformAcMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVACxformAcMul
void PS_BatchPosition3dYUVACxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformAcMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformAcMul();
		PixelShader = PS_BatchPosition3dYUVACxformAcMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformAcInv : register(b0) { 
float4 VS_BatchPosition3dYUVACxformAcInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformAcInv
void VS_BatchPosition3dYUVACxformAcInv( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BatchPosition3dYUVACxformAcInv
void PS_BatchPosition3dYUVACxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformAcInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformAcInv();
		PixelShader = PS_BatchPosition3dYUVACxformAcInv();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformAcEAlpha : register(b0) { 
float4 VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformAcEAlpha
void VS_BatchPosition3dYUVACxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformAcEAlpha_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVACxformAcEAlpha
void PS_BatchPosition3dYUVACxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformAcEAlpha();
		PixelShader = PS_BatchPosition3dYUVACxformAcEAlpha();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformAcEAlphaMul : register(b0) { 
float4 VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformAcEAlphaMul
void VS_BatchPosition3dYUVACxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVACxformAcEAlphaMul
void PS_BatchPosition3dYUVACxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformAcEAlphaMul();
		PixelShader = PS_BatchPosition3dYUVACxformAcEAlphaMul();
	}
}


cbuffer CB_VS_BatchPosition3dYUVACxformAcEAlphaInv : register(b0) { 
float4 VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_BatchPosition3dYUVACxformAcEAlphaInv
void VS_BatchPosition3dYUVACxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 0+ 0.1f];
    fucxmul = VS_BatchPosition3dYUVACxformAcEAlphaInv_vfuniforms[afactor.b*255.01f * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_BatchPosition3dYUVACxformAcEAlphaInv
void PS_BatchPosition3dYUVACxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique BatchPosition3dYUVACxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_BatchPosition3dYUVACxformAcEAlphaInv();
		PixelShader = PS_BatchPosition3dYUVACxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedYUV : register(b0) { 
float4 VS_InstancedYUV_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUV
void VS_InstancedYUV( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUV_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUV_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUV_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_InstancedYUV
void PS_InstancedYUV( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique InstancedYUV
{
	pass p0
	{
		VertexShader = VS_InstancedYUV();
		PixelShader = PS_InstancedYUV();
	}
}


cbuffer CB_VS_InstancedYUVTexDensity : register(b0) { 
float4 VS_InstancedYUVTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVTexDensity
void VS_InstancedYUVTexDensity( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedYUVTexDensity : register(b0) { 
float PS_InstancedYUVTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedYUVTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedYUVTexDensity
void PS_InstancedYUVTexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedYUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedYUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedYUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedYUVTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedYUVTexDensity();
		PixelShader = PS_InstancedYUVTexDensity();
	}
}


cbuffer CB_VS_InstancedYUVMul : register(b0) { 
float4 VS_InstancedYUVMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVMul
void VS_InstancedYUVMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_InstancedYUVMul
void PS_InstancedYUVMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVMul();
		PixelShader = PS_InstancedYUVMul();
	}
}


cbuffer CB_VS_InstancedYUVEAlpha : register(b0) { 
float4 VS_InstancedYUVEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVEAlpha
void VS_InstancedYUVEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedYUVEAlpha
void PS_InstancedYUVEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedYUVEAlpha();
		PixelShader = PS_InstancedYUVEAlpha();
	}
}


cbuffer CB_VS_InstancedYUVEAlphaTexDensity : register(b0) { 
float4 VS_InstancedYUVEAlphaTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVEAlphaTexDensity
void VS_InstancedYUVEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVEAlphaTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVEAlphaTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVEAlphaTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVEAlphaTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedYUVEAlphaTexDensity : register(b0) { 
float PS_InstancedYUVEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedYUVEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedYUVEAlphaTexDensity
void PS_InstancedYUVEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedYUVEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedYUVEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedYUVEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedYUVEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedYUVEAlphaTexDensity();
		PixelShader = PS_InstancedYUVEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedYUVEAlphaMul : register(b0) { 
float4 VS_InstancedYUVEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVEAlphaMul
void VS_InstancedYUVEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedYUVEAlphaMul
void PS_InstancedYUVEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVEAlphaMul();
		PixelShader = PS_InstancedYUVEAlphaMul();
	}
}


cbuffer CB_VS_InstancedYUVCxform : register(b0) { 
float4 VS_InstancedYUVCxform_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVCxform
void VS_InstancedYUVCxform( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVCxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVCxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVCxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVCxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVCxform
void PS_InstancedYUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedYUVCxform
{
	pass p0
	{
		VertexShader = VS_InstancedYUVCxform();
		PixelShader = PS_InstancedYUVCxform();
	}
}


cbuffer CB_VS_InstancedYUVCxformMul : register(b0) { 
float4 VS_InstancedYUVCxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVCxformMul
void VS_InstancedYUVCxformMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVCxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVCxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVCxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVCxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVCxformMul
void PS_InstancedYUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVCxformMul();
		PixelShader = PS_InstancedYUVCxformMul();
	}
}


cbuffer CB_VS_InstancedYUVCxformEAlpha : register(b0) { 
float4 VS_InstancedYUVCxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVCxformEAlpha
void VS_InstancedYUVCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVCxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVCxformEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVCxformEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVCxformEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVCxformEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVCxformEAlpha
void PS_InstancedYUVCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedYUVCxformEAlpha();
		PixelShader = PS_InstancedYUVCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedYUVCxformEAlphaMul : register(b0) { 
float4 VS_InstancedYUVCxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVCxformEAlphaMul
void VS_InstancedYUVCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVCxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVCxformEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVCxformEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVCxformEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVCxformEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVCxformEAlphaMul
void PS_InstancedYUVCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVCxformEAlphaMul();
		PixelShader = PS_InstancedYUVCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedYUVCxformAc : register(b0) { 
float4 VS_InstancedYUVCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVCxformAc
void VS_InstancedYUVCxformAc( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVCxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVCxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVCxformAc
void PS_InstancedYUVCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedYUVCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedYUVCxformAc();
		PixelShader = PS_InstancedYUVCxformAc();
	}
}


cbuffer CB_VS_InstancedYUVCxformAcMul : register(b0) { 
float4 VS_InstancedYUVCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVCxformAcMul
void VS_InstancedYUVCxformAcMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVCxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVCxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVCxformAcMul
void PS_InstancedYUVCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVCxformAcMul();
		PixelShader = PS_InstancedYUVCxformAcMul();
	}
}


cbuffer CB_VS_InstancedYUVCxformAcEAlpha : register(b0) { 
float4 VS_InstancedYUVCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVCxformAcEAlpha
void VS_InstancedYUVCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVCxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVCxformAcEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVCxformAcEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVCxformAcEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVCxformAcEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVCxformAcEAlpha
void PS_InstancedYUVCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedYUVCxformAcEAlpha();
		PixelShader = PS_InstancedYUVCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedYUVCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedYUVCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVCxformAcEAlphaMul
void VS_InstancedYUVCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVCxformAcEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVCxformAcEAlphaMul
void PS_InstancedYUVCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVCxformAcEAlphaMul();
		PixelShader = PS_InstancedYUVCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedYUVA : register(b0) { 
float4 VS_InstancedYUVA_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVA
void VS_InstancedYUVA( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVA_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVA_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVA_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVA_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_InstancedYUVA
void PS_InstancedYUVA( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique InstancedYUVA
{
	pass p0
	{
		VertexShader = VS_InstancedYUVA();
		PixelShader = PS_InstancedYUVA();
	}
}


cbuffer CB_VS_InstancedYUVATexDensity : register(b0) { 
float4 VS_InstancedYUVATexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVATexDensity
void VS_InstancedYUVATexDensity( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVATexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVATexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVATexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVATexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedYUVATexDensity : register(b0) { 
float PS_InstancedYUVATexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedYUVATexDensity_textureDims : packoffset(c1);
};

//PS_InstancedYUVATexDensity
void PS_InstancedYUVATexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedYUVATexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedYUVATexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedYUVATexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedYUVATexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedYUVATexDensity();
		PixelShader = PS_InstancedYUVATexDensity();
	}
}


cbuffer CB_VS_InstancedYUVAMul : register(b0) { 
float4 VS_InstancedYUVAMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVAMul
void VS_InstancedYUVAMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVAMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVAMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVAMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVAMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_InstancedYUVAMul
void PS_InstancedYUVAMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVAMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVAMul();
		PixelShader = PS_InstancedYUVAMul();
	}
}


cbuffer CB_VS_InstancedYUVAInv : register(b0) { 
float4 VS_InstancedYUVAInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVAInv
void VS_InstancedYUVAInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVAInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVAInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVAInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVAInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_InstancedYUVAInv
void PS_InstancedYUVAInv( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedYUVAInv
{
	pass p0
	{
		VertexShader = VS_InstancedYUVAInv();
		PixelShader = PS_InstancedYUVAInv();
	}
}


cbuffer CB_VS_InstancedYUVAEAlpha : register(b0) { 
float4 VS_InstancedYUVAEAlpha_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVAEAlpha
void VS_InstancedYUVAEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVAEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVAEAlpha_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVAEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVAEAlpha_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedYUVAEAlpha
void PS_InstancedYUVAEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVAEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedYUVAEAlpha();
		PixelShader = PS_InstancedYUVAEAlpha();
	}
}


cbuffer CB_VS_InstancedYUVAEAlphaTexDensity : register(b0) { 
float4 VS_InstancedYUVAEAlphaTexDensity_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVAEAlphaTexDensity
void VS_InstancedYUVAEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVAEAlphaTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVAEAlphaTexDensity_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVAEAlphaTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVAEAlphaTexDensity_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedYUVAEAlphaTexDensity : register(b0) { 
float PS_InstancedYUVAEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedYUVAEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedYUVAEAlphaTexDensity
void PS_InstancedYUVAEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedYUVAEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedYUVAEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedYUVAEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedYUVAEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedYUVAEAlphaTexDensity();
		PixelShader = PS_InstancedYUVAEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedYUVAEAlphaMul : register(b0) { 
float4 VS_InstancedYUVAEAlphaMul_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVAEAlphaMul
void VS_InstancedYUVAEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVAEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVAEAlphaMul_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVAEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVAEAlphaMul_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedYUVAEAlphaMul
void PS_InstancedYUVAEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVAEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVAEAlphaMul();
		PixelShader = PS_InstancedYUVAEAlphaMul();
	}
}


cbuffer CB_VS_InstancedYUVAEAlphaInv : register(b0) { 
float4 VS_InstancedYUVAEAlphaInv_vfuniforms[96] : packoffset(c0);
};

//VS_InstancedYUVAEAlphaInv
void VS_InstancedYUVAEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVAEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVAEAlphaInv_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVAEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVAEAlphaInv_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedYUVAEAlphaInv
void PS_InstancedYUVAEAlphaInv( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedYUVAEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedYUVAEAlphaInv();
		PixelShader = PS_InstancedYUVAEAlphaInv();
	}
}


cbuffer CB_VS_InstancedYUVACxform : register(b0) { 
float4 VS_InstancedYUVACxform_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxform
void VS_InstancedYUVACxform( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxform_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxform_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxform_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxform_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVACxform
void PS_InstancedYUVACxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxform
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxform();
		PixelShader = PS_InstancedYUVACxform();
	}
}


cbuffer CB_VS_InstancedYUVACxformMul : register(b0) { 
float4 VS_InstancedYUVACxformMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformMul
void VS_InstancedYUVACxformMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVACxformMul
void PS_InstancedYUVACxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformMul();
		PixelShader = PS_InstancedYUVACxformMul();
	}
}


cbuffer CB_VS_InstancedYUVACxformInv : register(b0) { 
float4 VS_InstancedYUVACxformInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformInv
void VS_InstancedYUVACxformInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVACxformInv
void PS_InstancedYUVACxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformInv();
		PixelShader = PS_InstancedYUVACxformInv();
	}
}


cbuffer CB_VS_InstancedYUVACxformEAlpha : register(b0) { 
float4 VS_InstancedYUVACxformEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformEAlpha
void VS_InstancedYUVACxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVACxformEAlpha
void PS_InstancedYUVACxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformEAlpha();
		PixelShader = PS_InstancedYUVACxformEAlpha();
	}
}


cbuffer CB_VS_InstancedYUVACxformEAlphaMul : register(b0) { 
float4 VS_InstancedYUVACxformEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformEAlphaMul
void VS_InstancedYUVACxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVACxformEAlphaMul
void PS_InstancedYUVACxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformEAlphaMul();
		PixelShader = PS_InstancedYUVACxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedYUVACxformEAlphaInv : register(b0) { 
float4 VS_InstancedYUVACxformEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformEAlphaInv
void VS_InstancedYUVACxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformEAlphaInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVACxformEAlphaInv
void PS_InstancedYUVACxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformEAlphaInv();
		PixelShader = PS_InstancedYUVACxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedYUVACxformAc : register(b0) { 
float4 VS_InstancedYUVACxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformAc
void VS_InstancedYUVACxformAc( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVACxformAc
void PS_InstancedYUVACxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformAc();
		PixelShader = PS_InstancedYUVACxformAc();
	}
}


cbuffer CB_VS_InstancedYUVACxformAcMul : register(b0) { 
float4 VS_InstancedYUVACxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformAcMul
void VS_InstancedYUVACxformAcMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVACxformAcMul
void PS_InstancedYUVACxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformAcMul();
		PixelShader = PS_InstancedYUVACxformAcMul();
	}
}


cbuffer CB_VS_InstancedYUVACxformAcInv : register(b0) { 
float4 VS_InstancedYUVACxformAcInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformAcInv
void VS_InstancedYUVACxformAcInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformAcInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformAcInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformAcInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformAcInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

//PS_InstancedYUVACxformAcInv
void PS_InstancedYUVACxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformAcInv();
		PixelShader = PS_InstancedYUVACxformAcInv();
	}
}


cbuffer CB_VS_InstancedYUVACxformAcEAlpha : register(b0) { 
float4 VS_InstancedYUVACxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformAcEAlpha
void VS_InstancedYUVACxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformAcEAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformAcEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformAcEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformAcEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformAcEAlpha_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVACxformAcEAlpha
void PS_InstancedYUVACxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformAcEAlpha();
		PixelShader = PS_InstancedYUVACxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedYUVACxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedYUVACxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformAcEAlphaMul
void VS_InstancedYUVACxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformAcEAlphaMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformAcEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformAcEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformAcEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformAcEAlphaMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVACxformAcEAlphaMul
void PS_InstancedYUVACxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformAcEAlphaMul();
		PixelShader = PS_InstancedYUVACxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedYUVACxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedYUVACxformAcEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedYUVACxformAcEAlphaInv
void VS_InstancedYUVACxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_InstancedYUVACxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedYUVACxformAcEAlphaInv_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_InstancedYUVACxformAcEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedYUVACxformAcEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_InstancedYUVACxformAcEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_InstancedYUVACxformAcEAlphaInv_vfuniforms[vbatch * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedYUVACxformAcEAlphaInv
void PS_InstancedYUVACxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedYUVACxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedYUVACxformAcEAlphaInv();
		PixelShader = PS_InstancedYUVACxformAcEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dYUV : register(b0) { 
float4 VS_InstancedPosition3dYUV_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUV
void VS_InstancedPosition3dYUV( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUV_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUV_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUV_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUV_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUV_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUV_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_InstancedPosition3dYUV
void PS_InstancedPosition3dYUV( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUV
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUV();
		PixelShader = PS_InstancedPosition3dYUV();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVTexDensity : register(b0) { 
float4 VS_InstancedPosition3dYUVTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVTexDensity
void VS_InstancedPosition3dYUVTexDensity( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedPosition3dYUVTexDensity : register(b0) { 
float PS_InstancedPosition3dYUVTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dYUVTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dYUVTexDensity
void PS_InstancedPosition3dYUVTexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dYUVTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dYUVTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dYUVTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dYUVTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVTexDensity();
		PixelShader = PS_InstancedPosition3dYUVTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVMul : register(b0) { 
float4 VS_InstancedPosition3dYUVMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVMul
void VS_InstancedPosition3dYUVMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_InstancedPosition3dYUVMul
void PS_InstancedPosition3dYUVMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVMul();
		PixelShader = PS_InstancedPosition3dYUVMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVEAlpha : register(b0) { 
float4 VS_InstancedPosition3dYUVEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVEAlpha
void VS_InstancedPosition3dYUVEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVEAlpha
void PS_InstancedPosition3dYUVEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVEAlpha();
		PixelShader = PS_InstancedPosition3dYUVEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVEAlphaTexDensity : register(b0) { 
float4 VS_InstancedPosition3dYUVEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVEAlphaTexDensity
void VS_InstancedPosition3dYUVEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVEAlphaTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVEAlphaTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedPosition3dYUVEAlphaTexDensity : register(b0) { 
float PS_InstancedPosition3dYUVEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dYUVEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dYUVEAlphaTexDensity
void PS_InstancedPosition3dYUVEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dYUVEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dYUVEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dYUVEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dYUVEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVEAlphaTexDensity();
		PixelShader = PS_InstancedPosition3dYUVEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dYUVEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVEAlphaMul
void VS_InstancedPosition3dYUVEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVEAlphaMul
void PS_InstancedPosition3dYUVEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVEAlphaMul();
		PixelShader = PS_InstancedPosition3dYUVEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVCxform : register(b0) { 
float4 VS_InstancedPosition3dYUVCxform_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVCxform
void VS_InstancedPosition3dYUVCxform( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVCxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVCxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVCxform_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVCxform_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVCxform
void PS_InstancedPosition3dYUVCxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVCxform
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVCxform();
		PixelShader = PS_InstancedPosition3dYUVCxform();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVCxformMul : register(b0) { 
float4 VS_InstancedPosition3dYUVCxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVCxformMul
void VS_InstancedPosition3dYUVCxformMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVCxformMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVCxformMul
void PS_InstancedPosition3dYUVCxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVCxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVCxformMul();
		PixelShader = PS_InstancedPosition3dYUVCxformMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVCxformEAlpha : register(b0) { 
float4 VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVCxformEAlpha
void VS_InstancedPosition3dYUVCxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVCxformEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVCxformEAlpha
void PS_InstancedPosition3dYUVCxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVCxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVCxformEAlpha();
		PixelShader = PS_InstancedPosition3dYUVCxformEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVCxformEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVCxformEAlphaMul
void VS_InstancedPosition3dYUVCxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVCxformEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVCxformEAlphaMul
void PS_InstancedPosition3dYUVCxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVCxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVCxformEAlphaMul();
		PixelShader = PS_InstancedPosition3dYUVCxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVCxformAc : register(b0) { 
float4 VS_InstancedPosition3dYUVCxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVCxformAc
void VS_InstancedPosition3dYUVCxformAc( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVCxformAc_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVCxformAc
void PS_InstancedPosition3dYUVCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVCxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVCxformAc();
		PixelShader = PS_InstancedPosition3dYUVCxformAc();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVCxformAcMul : register(b0) { 
float4 VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVCxformAcMul
void VS_InstancedPosition3dYUVCxformAcMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVCxformAcMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVCxformAcMul
void PS_InstancedPosition3dYUVCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVCxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVCxformAcMul();
		PixelShader = PS_InstancedPosition3dYUVCxformAcMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVCxformAcEAlpha : register(b0) { 
float4 VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVCxformAcEAlpha
void VS_InstancedPosition3dYUVCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVCxformAcEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVCxformAcEAlpha
void PS_InstancedPosition3dYUVCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVCxformAcEAlpha();
		PixelShader = PS_InstancedPosition3dYUVCxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVCxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVCxformAcEAlphaMul
void VS_InstancedPosition3dYUVCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVCxformAcEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVCxformAcEAlphaMul
void PS_InstancedPosition3dYUVCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = 1.0;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVCxformAcEAlphaMul();
		PixelShader = PS_InstancedPosition3dYUVCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVA : register(b0) { 
float4 VS_InstancedPosition3dYUVA_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVA
void VS_InstancedPosition3dYUVA( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVA_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVA_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVA_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVA_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVA_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVA_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_InstancedPosition3dYUVA
void PS_InstancedPosition3dYUVA( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVA
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVA();
		PixelShader = PS_InstancedPosition3dYUVA();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVATexDensity : register(b0) { 
float4 VS_InstancedPosition3dYUVATexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVATexDensity
void VS_InstancedPosition3dYUVATexDensity( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVATexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

cbuffer CB_PS_InstancedPosition3dYUVATexDensity : register(b0) { 
float PS_InstancedPosition3dYUVATexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dYUVATexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dYUVATexDensity
void PS_InstancedPosition3dYUVATexDensity( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dYUVATexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dYUVATexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dYUVATexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dYUVATexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVATexDensity();
		PixelShader = PS_InstancedPosition3dYUVATexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVAMul : register(b0) { 
float4 VS_InstancedPosition3dYUVAMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVAMul
void VS_InstancedPosition3dYUVAMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVAMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVAMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVAMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVAMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVAMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVAMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_InstancedPosition3dYUVAMul
void PS_InstancedPosition3dYUVAMul( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVAMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVAMul();
		PixelShader = PS_InstancedPosition3dYUVAMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVAInv : register(b0) { 
float4 VS_InstancedPosition3dYUVAInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVAInv
void VS_InstancedPosition3dYUVAInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVAInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVAInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVAInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVAInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVAInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVAInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    
}

//PS_InstancedPosition3dYUVAInv
void PS_InstancedPosition3dYUVAInv( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVAInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVAInv();
		PixelShader = PS_InstancedPosition3dYUVAInv();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVAEAlpha : register(b0) { 
float4 VS_InstancedPosition3dYUVAEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVAEAlpha
void VS_InstancedPosition3dYUVAEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVAEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVAEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVAEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVAEAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVAEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVAEAlpha_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVAEAlpha
void PS_InstancedPosition3dYUVAEAlpha( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVAEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVAEAlpha();
		PixelShader = PS_InstancedPosition3dYUVAEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVAEAlphaTexDensity : register(b0) { 
float4 VS_InstancedPosition3dYUVAEAlphaTexDensity_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVAEAlphaTexDensity
void VS_InstancedPosition3dYUVAEAlphaTexDensity( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVAEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVAEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVAEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVAEAlphaTexDensity_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVAEAlphaTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVAEAlphaTexDensity_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

cbuffer CB_PS_InstancedPosition3dYUVAEAlphaTexDensity : register(b0) { 
float PS_InstancedPosition3dYUVAEAlphaTexDensity_mipLevels : packoffset(c0);
float2 PS_InstancedPosition3dYUVAEAlphaTexDensity_textureDims : packoffset(c1);
};

//PS_InstancedPosition3dYUVAEAlphaTexDensity
void PS_InstancedPosition3dYUVAEAlphaTexDensity( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    

    float2 dx = ddx(tc0 * PS_InstancedPosition3dYUVAEAlphaTexDensity_textureDims.x);
    float2 dy = ddy(tc0 * PS_InstancedPosition3dYUVAEAlphaTexDensity_textureDims.y);
    float d  = max(dot(dx, dx), dot(dy, dy));
    float mip = clamp(0.5f * log2(d) - 1, 0.0f, PS_InstancedPosition3dYUVAEAlphaTexDensity_mipLevels-1); // [0..mip-1]
    dx /= pow(2, mip);
    dy /= pow(2, mip);
    float H = clamp(1.0f - 0.5f * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0f, 1.0f) * (80.0f/255.0f);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    // NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,
    // because it would no longer contribute to the outputs of the shader.
    fcolor = fcolor*0.001f + clamp(float4(R,G,B, 1), 0.0f, 1.0f);
    
}

technique InstancedPosition3dYUVAEAlphaTexDensity
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVAEAlphaTexDensity();
		PixelShader = PS_InstancedPosition3dYUVAEAlphaTexDensity();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVAEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dYUVAEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVAEAlphaMul
void VS_InstancedPosition3dYUVAEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVAEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVAEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVAEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVAEAlphaMul_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVAEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVAEAlphaMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVAEAlphaMul
void PS_InstancedPosition3dYUVAEAlphaMul( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVAEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVAEAlphaMul();
		PixelShader = PS_InstancedPosition3dYUVAEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVAEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dYUVAEAlphaInv_vfuniforms[144] : packoffset(c0);
};

//VS_InstancedPosition3dYUVAEAlphaInv
void VS_InstancedPosition3dYUVAEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVAEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVAEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVAEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVAEAlphaInv_vfuniforms[vbatch * 6 + 0+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVAEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVAEAlphaInv_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVAEAlphaInv
void PS_InstancedPosition3dYUVAEAlphaInv( float4 factor : COLOR0,
           float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVAEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVAEAlphaInv();
		PixelShader = PS_InstancedPosition3dYUVAEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxform : register(b0) { 
float4 VS_InstancedPosition3dYUVACxform_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxform
void VS_InstancedPosition3dYUVACxform( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxform_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxform_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxform_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxform_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVACxform
void PS_InstancedPosition3dYUVACxform( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxform
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxform();
		PixelShader = PS_InstancedPosition3dYUVACxform();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformMul : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformMul
void VS_InstancedPosition3dYUVACxformMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVACxformMul
void PS_InstancedPosition3dYUVACxformMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformMul();
		PixelShader = PS_InstancedPosition3dYUVACxformMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformInv : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformInv
void VS_InstancedPosition3dYUVACxformInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVACxformInv
void PS_InstancedPosition3dYUVACxformInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformInv();
		PixelShader = PS_InstancedPosition3dYUVACxformInv();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformEAlpha : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformEAlpha
void VS_InstancedPosition3dYUVACxformEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVACxformEAlpha
void PS_InstancedPosition3dYUVACxformEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformEAlpha();
		PixelShader = PS_InstancedPosition3dYUVACxformEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformEAlphaMul
void VS_InstancedPosition3dYUVACxformEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVACxformEAlphaMul
void PS_InstancedPosition3dYUVACxformEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformEAlphaMul();
		PixelShader = PS_InstancedPosition3dYUVACxformEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformEAlphaInv
void VS_InstancedPosition3dYUVACxformEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformEAlphaInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVACxformEAlphaInv
void PS_InstancedPosition3dYUVACxformEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

    fcolor = clamp(fcolor * fucxmul + fucxadd, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformEAlphaInv();
		PixelShader = PS_InstancedPosition3dYUVACxformEAlphaInv();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformAc : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformAc_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformAc
void VS_InstancedPosition3dYUVACxformAc( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformAc_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVACxformAc
void PS_InstancedPosition3dYUVACxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformAc
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformAc();
		PixelShader = PS_InstancedPosition3dYUVACxformAc();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformAcMul : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformAcMul
void VS_InstancedPosition3dYUVACxformAcMul( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformAcMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVACxformAcMul
void PS_InstancedPosition3dYUVACxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformAcMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformAcMul();
		PixelShader = PS_InstancedPosition3dYUVACxformAcMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformAcInv : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformAcInv
void VS_InstancedPosition3dYUVACxformAcInv( float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformAcInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_InstancedPosition3dYUVACxformAcInv
void PS_InstancedPosition3dYUVACxformAcInv( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformAcInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformAcInv();
		PixelShader = PS_InstancedPosition3dYUVACxformAcInv();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformAcEAlpha : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformAcEAlpha
void VS_InstancedPosition3dYUVACxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformAcEAlpha_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVACxformAcEAlpha
void PS_InstancedPosition3dYUVACxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformAcEAlpha();
		PixelShader = PS_InstancedPosition3dYUVACxformAcEAlpha();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformAcEAlphaMul : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformAcEAlphaMul
void VS_InstancedPosition3dYUVACxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformAcEAlphaMul_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVACxformAcEAlphaMul
void PS_InstancedPosition3dYUVACxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformAcEAlphaMul();
		PixelShader = PS_InstancedPosition3dYUVACxformAcEAlphaMul();
	}
}


cbuffer CB_VS_InstancedPosition3dYUVACxformAcEAlphaInv : register(b0) { 
float4 VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[192] : packoffset(c0);
};

//VS_InstancedPosition3dYUVACxformAcEAlphaInv
void VS_InstancedPosition3dYUVACxformAcEAlphaInv( half4 afactor : COLOR0,
           float4 pos : POSITION,
           uint vbatch : SV_InstanceID,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos.x = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    vpos.z = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    vpos.w = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    

    tc0.x = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 0]);
    tc0.y = dot(pos, VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[vbatch * 8 + 6+ 0.1f + 1]);
    

    fucxadd = VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_InstancedPosition3dYUVACxformAcEAlphaInv_vfuniforms[vbatch * 8 + 1+ 0.1f];
    

      factor = afactor;
    
}

//PS_InstancedPosition3dYUVACxformAcEAlphaInv
void PS_InstancedPosition3dYUVACxformAcEAlphaInv( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float c0 = float((cry_tex0.Sample(cry_sampler0, tc0).r - 16./255.) * 1.164);
    float U0 = float(cry_tex1.Sample(cry_sampler1, tc0).r - 128./255.);
    float V0 = float(cry_tex2.Sample(cry_sampler2, tc0).r - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = cry_tex3.Sample(cry_sampler3, tc0).r;
    fcolor = c;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = float3(fcolor.a, fcolor.a, fcolor.a);
    

      fcolor = fcolor;
    
}

technique InstancedPosition3dYUVACxformAcEAlphaInv
{
	pass p0
	{
		VertexShader = VS_InstancedPosition3dYUVACxformAcEAlphaInv();
		PixelShader = PS_InstancedPosition3dYUVACxformAcEAlphaInv();
	}
}


cbuffer CB_VS_TexTGCMatrixAcCxformAc : register(b0) { 
float4 VS_TexTGCMatrixAcCxformAc_vfuniforms[144] : packoffset(c0);
};

//VS_TexTGCMatrixAcCxformAc
void VS_TexTGCMatrixAcCxformAc( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCMatrixAcCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_TexTGCMatrixAcCxformAc_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_TexTGCMatrixAcCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_TexTGCMatrixAcCxformAc_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_TexTGCMatrixAcCxformAc_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_TexTGCMatrixAcCxformAc_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_TexTGCMatrixAcCxformAc : register(b0) { 
float4 PS_TexTGCMatrixAcCxformAc_cmatadd : packoffset(c0);
float4x4 PS_TexTGCMatrixAcCxformAc_cmatmul : packoffset(c1);
};

//PS_TexTGCMatrixAcCxformAc
void PS_TexTGCMatrixAcCxformAc( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    
    
    fcolor = clamp(mul(fcolor,PS_TexTGCMatrixAcCxformAc_cmatmul) + PS_TexTGCMatrixAcCxformAc_cmatadd * clamp(fcolor.a + PS_TexTGCMatrixAcCxformAc_cmatadd.a, 0.0f, 1.0f), 0.0f, 1.0f);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique TexTGCMatrixAcCxformAc
{
	pass p0
	{
		VertexShader = VS_TexTGCMatrixAcCxformAc();
		PixelShader = PS_TexTGCMatrixAcCxformAc();
	}
}


cbuffer CB_VS_TexTGCMatrixAcCxformAcMul : register(b0) { 
float4 VS_TexTGCMatrixAcCxformAcMul_vfuniforms[144] : packoffset(c0);
};

//VS_TexTGCMatrixAcCxformAcMul
void VS_TexTGCMatrixAcCxformAcMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCMatrixAcCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_TexTGCMatrixAcCxformAcMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_TexTGCMatrixAcCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_TexTGCMatrixAcCxformAcMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_TexTGCMatrixAcCxformAcMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_TexTGCMatrixAcCxformAcMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_TexTGCMatrixAcCxformAcMul : register(b0) { 
float4 PS_TexTGCMatrixAcCxformAcMul_cmatadd : packoffset(c0);
float4x4 PS_TexTGCMatrixAcCxformAcMul_cmatmul : packoffset(c1);
};

//PS_TexTGCMatrixAcCxformAcMul
void PS_TexTGCMatrixAcCxformAcMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    
    
    fcolor = clamp(mul(fcolor,PS_TexTGCMatrixAcCxformAcMul_cmatmul) + PS_TexTGCMatrixAcCxformAcMul_cmatadd * clamp(fcolor.a + PS_TexTGCMatrixAcCxformAcMul_cmatadd.a, 0.0f, 1.0f), 0.0f, 1.0f);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCMatrixAcCxformAcMul
{
	pass p0
	{
		VertexShader = VS_TexTGCMatrixAcCxformAcMul();
		PixelShader = PS_TexTGCMatrixAcCxformAcMul();
	}
}


cbuffer CB_VS_TexTGCMatrixAcCxformAcEAlpha : register(b0) { 
float4 VS_TexTGCMatrixAcCxformAcEAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_TexTGCMatrixAcCxformAcEAlpha
void VS_TexTGCMatrixAcCxformAcEAlpha( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCMatrixAcCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_TexTGCMatrixAcCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_TexTGCMatrixAcCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_TexTGCMatrixAcCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_TexTGCMatrixAcCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_TexTGCMatrixAcCxformAcEAlpha_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

cbuffer CB_PS_TexTGCMatrixAcCxformAcEAlpha : register(b0) { 
float4 PS_TexTGCMatrixAcCxformAcEAlpha_cmatadd : packoffset(c0);
float4x4 PS_TexTGCMatrixAcCxformAcEAlpha_cmatmul : packoffset(c1);
};

//PS_TexTGCMatrixAcCxformAcEAlpha
void PS_TexTGCMatrixAcCxformAcEAlpha( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    
    
    fcolor = clamp(mul(fcolor,PS_TexTGCMatrixAcCxformAcEAlpha_cmatmul) + PS_TexTGCMatrixAcCxformAcEAlpha_cmatadd * clamp(fcolor.a + PS_TexTGCMatrixAcCxformAcEAlpha_cmatadd.a, 0.0f, 1.0f), 0.0f, 1.0f);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCMatrixAcCxformAcEAlpha
{
	pass p0
	{
		VertexShader = VS_TexTGCMatrixAcCxformAcEAlpha();
		PixelShader = PS_TexTGCMatrixAcCxformAcEAlpha();
	}
}


cbuffer CB_VS_TexTGCMatrixAcCxformAcEAlphaMul : register(b0) { 
float4 VS_TexTGCMatrixAcCxformAcEAlphaMul_vfuniforms[144] : packoffset(c0);
};

//VS_TexTGCMatrixAcCxformAcEAlphaMul
void VS_TexTGCMatrixAcCxformAcEAlphaMul( half4 afactor : COLOR0,
           float4 pos : POSITION,
           out half4 factor : COLOR0,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_TexTGCMatrixAcCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_TexTGCMatrixAcCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_TexTGCMatrixAcCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_TexTGCMatrixAcCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_TexTGCMatrixAcCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 0+ 0.1f];
    fucxmul = VS_TexTGCMatrixAcCxformAcEAlphaMul_vfuniforms[afactor.b*255.01f * 6 + 1+ 0.1f];
    

      factor = afactor;
    
}

cbuffer CB_PS_TexTGCMatrixAcCxformAcEAlphaMul : register(b0) { 
float4 PS_TexTGCMatrixAcCxformAcEAlphaMul_cmatadd : packoffset(c0);
float4x4 PS_TexTGCMatrixAcCxformAcEAlphaMul_cmatmul : packoffset(c1);
};

//PS_TexTGCMatrixAcCxformAcEAlphaMul
void PS_TexTGCMatrixAcCxformAcEAlphaMul( float4 factor : COLOR0,
           float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor = cry_tex0.Sample(cry_sampler0,tc0);
    
    
    fcolor = clamp(mul(fcolor,PS_TexTGCMatrixAcCxformAcEAlphaMul_cmatmul) + PS_TexTGCMatrixAcCxformAcEAlphaMul_cmatadd * clamp(fcolor.a + PS_TexTGCMatrixAcCxformAcEAlphaMul_cmatadd.a, 0.0f, 1.0f), 0.0f, 1.0f);
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.a *= factor.a;
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique TexTGCMatrixAcCxformAcEAlphaMul
{
	pass p0
	{
		VertexShader = VS_TexTGCMatrixAcCxformAcEAlphaMul();
		PixelShader = PS_TexTGCMatrixAcCxformAcEAlphaMul();
	}
}


cbuffer CB_VS_Box1Blur : register(b0) { 
float4 VS_Box1Blur_vfuniforms[144] : packoffset(c0);
};

//VS_Box1Blur
void VS_Box1Blur( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_Box1Blur_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_Box1Blur_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_Box1Blur_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_Box1Blur_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_Box1Blur_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_Box1Blur_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_Box1Blur : register(b0) { 
float4 PS_Box1Blur_fsize : packoffset(c0);
float4 PS_Box1Blur_texscale : packoffset(c1);
};

//PS_Box1Blur
void PS_Box1Blur( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
      fcolor       = float4(0, 0, 0, 0);
      float4 color = float4(0, 0, 0, 0);
      for (float ix = -PS_Box1Blur_fsize.x; ix <= PS_Box1Blur_fsize.x; ix++)
      {{
        float2 i = float2(ix, ix);
    

    color += cry_tex0.Sample(cry_sampler0, tc0 + i * PS_Box1Blur_texscale.xy);
    }} // EndBox1/2.
    fcolor = color * PS_Box1Blur_fsize.w;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
}

technique Box1Blur
{
	pass p0
	{
		VertexShader = VS_Box1Blur();
		PixelShader = PS_Box1Blur();
	}
}


cbuffer CB_VS_Box1BlurMul : register(b0) { 
float4 VS_Box1BlurMul_vfuniforms[144] : packoffset(c0);
};

//VS_Box1BlurMul
void VS_Box1BlurMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_Box1BlurMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_Box1BlurMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_Box1BlurMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_Box1BlurMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_Box1BlurMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_Box1BlurMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_Box1BlurMul : register(b0) { 
float4 PS_Box1BlurMul_fsize : packoffset(c0);
float4 PS_Box1BlurMul_texscale : packoffset(c1);
};

//PS_Box1BlurMul
void PS_Box1BlurMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
      fcolor       = float4(0, 0, 0, 0);
      float4 color = float4(0, 0, 0, 0);
      for (float ix = -PS_Box1BlurMul_fsize.x; ix <= PS_Box1BlurMul_fsize.x; ix++)
      {{
        float2 i = float2(ix, ix);
    

    color += cry_tex0.Sample(cry_sampler0, tc0 + i * PS_Box1BlurMul_texscale.xy);
    }} // EndBox1/2.
    fcolor = color * PS_Box1BlurMul_fsize.w;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Box1BlurMul
{
	pass p0
	{
		VertexShader = VS_Box1BlurMul();
		PixelShader = PS_Box1BlurMul();
	}
}


cbuffer CB_VS_Box2Blur : register(b0) { 
float4 VS_Box2Blur_vfuniforms[144] : packoffset(c0);
};

//VS_Box2Blur
void VS_Box2Blur( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_Box2Blur_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_Box2Blur_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_Box2Blur_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_Box2Blur_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_Box2Blur_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_Box2Blur_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_Box2Blur : register(b0) { 
float4 PS_Box2Blur_fsize : packoffset(c0);
float4 PS_Box2Blur_texscale : packoffset(c1);
};

//PS_Box2Blur
void PS_Box2Blur( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_Box2Blur_fsize.x; ix <= PS_Box2Blur_fsize.x; ix++)
    {
      for (float iy = -PS_Box2Blur_fsize.y; iy <= PS_Box2Blur_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex0.Sample(cry_sampler0, tc0 + i * PS_Box2Blur_texscale.xy);
    }} // EndBox1/2.
    fcolor = color * PS_Box2Blur_fsize.w;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique Box2Blur
{
	pass p0
	{
		VertexShader = VS_Box2Blur();
		PixelShader = PS_Box2Blur();
	}
}


cbuffer CB_VS_Box2BlurMul : register(b0) { 
float4 VS_Box2BlurMul_vfuniforms[144] : packoffset(c0);
};

//VS_Box2BlurMul
void VS_Box2BlurMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_Box2BlurMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_Box2BlurMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_Box2BlurMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_Box2BlurMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_Box2BlurMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_Box2BlurMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_Box2BlurMul : register(b0) { 
float4 PS_Box2BlurMul_fsize : packoffset(c0);
float4 PS_Box2BlurMul_texscale : packoffset(c1);
};

//PS_Box2BlurMul
void PS_Box2BlurMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           float2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_Box2BlurMul_fsize.x; ix <= PS_Box2BlurMul_fsize.x; ix++)
    {
      for (float iy = -PS_Box2BlurMul_fsize.y; iy <= PS_Box2BlurMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex0.Sample(cry_sampler0, tc0 + i * PS_Box2BlurMul_texscale.xy);
    }} // EndBox1/2.
    fcolor = color * PS_Box2BlurMul_fsize.w;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique Box2BlurMul
{
	pass p0
	{
		VertexShader = VS_Box2BlurMul();
		PixelShader = PS_Box2BlurMul();
	}
}


cbuffer CB_VS_SColorOuterBevel : register(b0) { 
float4 VS_SColorOuterBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColorOuterBevel
void VS_SColorOuterBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorOuterBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorOuterBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorOuterBevel : register(b0) { 
float4 PS_SColorOuterBevel_fsize : packoffset(c0);
float4 PS_SColorOuterBevel_offset : packoffset(c1);
float4 PS_SColorOuterBevel_scolor : packoffset(c2);
float4 PS_SColorOuterBevel_srctexscale : packoffset(c3);
float4 PS_SColorOuterBevel_texscale : packoffset(c4);
};

//PS_SColorOuterBevel
void PS_SColorOuterBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorOuterBevel_fsize.x; ix <= PS_SColorOuterBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColorOuterBevel_fsize.y; iy <= PS_SColorOuterBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorOuterBevel_offset.xy + i) * PS_SColorOuterBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorOuterBevel_fsize.w;
    

    float4 shadowColor = PS_SColorOuterBevel_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorOuterBevel_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorOuterBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColorOuterBevel
{
	pass p0
	{
		VertexShader = VS_SColorOuterBevel();
		PixelShader = PS_SColorOuterBevel();
	}
}


cbuffer CB_VS_SColorOuterBevelMul : register(b0) { 
float4 VS_SColorOuterBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColorOuterBevelMul
void VS_SColorOuterBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorOuterBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorOuterBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorOuterBevelMul : register(b0) { 
float4 PS_SColorOuterBevelMul_fsize : packoffset(c0);
float4 PS_SColorOuterBevelMul_offset : packoffset(c1);
float4 PS_SColorOuterBevelMul_scolor : packoffset(c2);
float4 PS_SColorOuterBevelMul_srctexscale : packoffset(c3);
float4 PS_SColorOuterBevelMul_texscale : packoffset(c4);
};

//PS_SColorOuterBevelMul
void PS_SColorOuterBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorOuterBevelMul_fsize.x; ix <= PS_SColorOuterBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColorOuterBevelMul_fsize.y; iy <= PS_SColorOuterBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorOuterBevelMul_offset.xy + i) * PS_SColorOuterBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorOuterBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColorOuterBevelMul_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorOuterBevelMul_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorOuterBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColorOuterBevelMul
{
	pass p0
	{
		VertexShader = VS_SColorOuterBevelMul();
		PixelShader = PS_SColorOuterBevelMul();
	}
}


cbuffer CB_VS_SColorInnerShadow : register(b0) { 
float4 VS_SColorInnerShadow_vfuniforms[144] : packoffset(c0);
};

//VS_SColorInnerShadow
void VS_SColorInnerShadow( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorInnerShadow_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorInnerShadow_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorInnerShadow_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorInnerShadow_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorInnerShadow_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorInnerShadow_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorInnerShadow : register(b0) { 
float4 PS_SColorInnerShadow_fsize : packoffset(c0);
float4 PS_SColorInnerShadow_offset : packoffset(c1);
float4 PS_SColorInnerShadow_scolor : packoffset(c2);
float4 PS_SColorInnerShadow_srctexscale : packoffset(c3);
float4 PS_SColorInnerShadow_texscale : packoffset(c4);
};

//PS_SColorInnerShadow
void PS_SColorInnerShadow( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorInnerShadow_fsize.x; ix <= PS_SColorInnerShadow_fsize.x; ix++)
    {
      for (float iy = -PS_SColorInnerShadow_fsize.y; iy <= PS_SColorInnerShadow_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorInnerShadow_offset.xy + i) * PS_SColorInnerShadow_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorInnerShadow_fsize.w;
    

    float4 shadowColor = PS_SColorInnerShadow_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorInnerShadow_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorInnerShadow_srctexscale.xy);
    float4 baseValue = base;
    

    float lerpval = clamp((base.a*PS_SColorInnerShadow_fsize.z - fcolor.a), 0.0f, 1.0f);
    lerpval *= shadowColor.a;
    fcolor = lerp(baseValue, shadowColor, lerpval) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColorInnerShadow
{
	pass p0
	{
		VertexShader = VS_SColorInnerShadow();
		PixelShader = PS_SColorInnerShadow();
	}
}


cbuffer CB_VS_SColorInnerShadowMul : register(b0) { 
float4 VS_SColorInnerShadowMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColorInnerShadowMul
void VS_SColorInnerShadowMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorInnerShadowMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorInnerShadowMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorInnerShadowMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorInnerShadowMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorInnerShadowMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorInnerShadowMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorInnerShadowMul : register(b0) { 
float4 PS_SColorInnerShadowMul_fsize : packoffset(c0);
float4 PS_SColorInnerShadowMul_offset : packoffset(c1);
float4 PS_SColorInnerShadowMul_scolor : packoffset(c2);
float4 PS_SColorInnerShadowMul_srctexscale : packoffset(c3);
float4 PS_SColorInnerShadowMul_texscale : packoffset(c4);
};

//PS_SColorInnerShadowMul
void PS_SColorInnerShadowMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorInnerShadowMul_fsize.x; ix <= PS_SColorInnerShadowMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColorInnerShadowMul_fsize.y; iy <= PS_SColorInnerShadowMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorInnerShadowMul_offset.xy + i) * PS_SColorInnerShadowMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorInnerShadowMul_fsize.w;
    

    float4 shadowColor = PS_SColorInnerShadowMul_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorInnerShadowMul_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorInnerShadowMul_srctexscale.xy);
    float4 baseValue = base;
    

    float lerpval = clamp((base.a*PS_SColorInnerShadowMul_fsize.z - fcolor.a), 0.0f, 1.0f);
    lerpval *= shadowColor.a;
    fcolor = lerp(baseValue, shadowColor, lerpval) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColorInnerShadowMul
{
	pass p0
	{
		VertexShader = VS_SColorInnerShadowMul();
		PixelShader = PS_SColorInnerShadowMul();
	}
}


cbuffer CB_VS_SColorFullBevel : register(b0) { 
float4 VS_SColorFullBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColorFullBevel
void VS_SColorFullBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorFullBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorFullBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorFullBevel : register(b0) { 
float4 PS_SColorFullBevel_fsize : packoffset(c0);
float4 PS_SColorFullBevel_offset : packoffset(c1);
float4 PS_SColorFullBevel_scolor : packoffset(c2);
float4 PS_SColorFullBevel_srctexscale : packoffset(c3);
float4 PS_SColorFullBevel_texscale : packoffset(c4);
};

//PS_SColorFullBevel
void PS_SColorFullBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorFullBevel_fsize.x; ix <= PS_SColorFullBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColorFullBevel_fsize.y; iy <= PS_SColorFullBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorFullBevel_offset.xy + i) * PS_SColorFullBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorFullBevel_fsize.w;
    

    float4 shadowColor = PS_SColorFullBevel_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorFullBevel_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorFullBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColorFullBevel
{
	pass p0
	{
		VertexShader = VS_SColorFullBevel();
		PixelShader = PS_SColorFullBevel();
	}
}


cbuffer CB_VS_SColorFullBevelMul : register(b0) { 
float4 VS_SColorFullBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColorFullBevelMul
void VS_SColorFullBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorFullBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorFullBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorFullBevelMul : register(b0) { 
float4 PS_SColorFullBevelMul_fsize : packoffset(c0);
float4 PS_SColorFullBevelMul_offset : packoffset(c1);
float4 PS_SColorFullBevelMul_scolor : packoffset(c2);
float4 PS_SColorFullBevelMul_srctexscale : packoffset(c3);
float4 PS_SColorFullBevelMul_texscale : packoffset(c4);
};

//PS_SColorFullBevelMul
void PS_SColorFullBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorFullBevelMul_fsize.x; ix <= PS_SColorFullBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColorFullBevelMul_fsize.y; iy <= PS_SColorFullBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorFullBevelMul_offset.xy + i) * PS_SColorFullBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorFullBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColorFullBevelMul_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorFullBevelMul_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorFullBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColorFullBevelMul
{
	pass p0
	{
		VertexShader = VS_SColorFullBevelMul();
		PixelShader = PS_SColorFullBevelMul();
	}
}


cbuffer CB_VS_SColorHideBaseOuterBevel : register(b0) { 
float4 VS_SColorHideBaseOuterBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColorHideBaseOuterBevel
void VS_SColorHideBaseOuterBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorHideBaseOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorHideBaseOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorHideBaseOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorHideBaseOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorHideBaseOuterBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorHideBaseOuterBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorHideBaseOuterBevel : register(b0) { 
float4 PS_SColorHideBaseOuterBevel_fsize : packoffset(c0);
float4 PS_SColorHideBaseOuterBevel_offset : packoffset(c1);
float4 PS_SColorHideBaseOuterBevel_scolor : packoffset(c2);
float4 PS_SColorHideBaseOuterBevel_srctexscale : packoffset(c3);
float4 PS_SColorHideBaseOuterBevel_texscale : packoffset(c4);
};

//PS_SColorHideBaseOuterBevel
void PS_SColorHideBaseOuterBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorHideBaseOuterBevel_fsize.x; ix <= PS_SColorHideBaseOuterBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColorHideBaseOuterBevel_fsize.y; iy <= PS_SColorHideBaseOuterBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorHideBaseOuterBevel_offset.xy + i) * PS_SColorHideBaseOuterBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorHideBaseOuterBevel_fsize.w;
    

    float4 shadowColor = PS_SColorHideBaseOuterBevel_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorHideBaseOuterBevel_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorHideBaseOuterBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColorHideBaseOuterBevel
{
	pass p0
	{
		VertexShader = VS_SColorHideBaseOuterBevel();
		PixelShader = PS_SColorHideBaseOuterBevel();
	}
}


cbuffer CB_VS_SColorHideBaseOuterBevelMul : register(b0) { 
float4 VS_SColorHideBaseOuterBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColorHideBaseOuterBevelMul
void VS_SColorHideBaseOuterBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorHideBaseOuterBevelMul : register(b0) { 
float4 PS_SColorHideBaseOuterBevelMul_fsize : packoffset(c0);
float4 PS_SColorHideBaseOuterBevelMul_offset : packoffset(c1);
float4 PS_SColorHideBaseOuterBevelMul_scolor : packoffset(c2);
float4 PS_SColorHideBaseOuterBevelMul_srctexscale : packoffset(c3);
float4 PS_SColorHideBaseOuterBevelMul_texscale : packoffset(c4);
};

//PS_SColorHideBaseOuterBevelMul
void PS_SColorHideBaseOuterBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorHideBaseOuterBevelMul_fsize.x; ix <= PS_SColorHideBaseOuterBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColorHideBaseOuterBevelMul_fsize.y; iy <= PS_SColorHideBaseOuterBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorHideBaseOuterBevelMul_offset.xy + i) * PS_SColorHideBaseOuterBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorHideBaseOuterBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColorHideBaseOuterBevelMul_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorHideBaseOuterBevelMul_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorHideBaseOuterBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColorHideBaseOuterBevelMul
{
	pass p0
	{
		VertexShader = VS_SColorHideBaseOuterBevelMul();
		PixelShader = PS_SColorHideBaseOuterBevelMul();
	}
}


cbuffer CB_VS_SColorHideBaseInnerShadow : register(b0) { 
float4 VS_SColorHideBaseInnerShadow_vfuniforms[144] : packoffset(c0);
};

//VS_SColorHideBaseInnerShadow
void VS_SColorHideBaseInnerShadow( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorHideBaseInnerShadow_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorHideBaseInnerShadow_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorHideBaseInnerShadow_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorHideBaseInnerShadow_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorHideBaseInnerShadow_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorHideBaseInnerShadow_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorHideBaseInnerShadow : register(b0) { 
float4 PS_SColorHideBaseInnerShadow_fsize : packoffset(c0);
float4 PS_SColorHideBaseInnerShadow_offset : packoffset(c1);
float4 PS_SColorHideBaseInnerShadow_scolor : packoffset(c2);
float4 PS_SColorHideBaseInnerShadow_srctexscale : packoffset(c3);
float4 PS_SColorHideBaseInnerShadow_texscale : packoffset(c4);
};

//PS_SColorHideBaseInnerShadow
void PS_SColorHideBaseInnerShadow( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorHideBaseInnerShadow_fsize.x; ix <= PS_SColorHideBaseInnerShadow_fsize.x; ix++)
    {
      for (float iy = -PS_SColorHideBaseInnerShadow_fsize.y; iy <= PS_SColorHideBaseInnerShadow_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorHideBaseInnerShadow_offset.xy + i) * PS_SColorHideBaseInnerShadow_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorHideBaseInnerShadow_fsize.w;
    

    float4 shadowColor = PS_SColorHideBaseInnerShadow_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorHideBaseInnerShadow_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorHideBaseInnerShadow_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float lerpval = clamp((base.a*PS_SColorHideBaseInnerShadow_fsize.z - fcolor.a), 0.0f, 1.0f);
    lerpval *= shadowColor.a;
    fcolor = lerp(baseValue, shadowColor, lerpval) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColorHideBaseInnerShadow
{
	pass p0
	{
		VertexShader = VS_SColorHideBaseInnerShadow();
		PixelShader = PS_SColorHideBaseInnerShadow();
	}
}


cbuffer CB_VS_SColorHideBaseInnerShadowMul : register(b0) { 
float4 VS_SColorHideBaseInnerShadowMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColorHideBaseInnerShadowMul
void VS_SColorHideBaseInnerShadowMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorHideBaseInnerShadowMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorHideBaseInnerShadowMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorHideBaseInnerShadowMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorHideBaseInnerShadowMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorHideBaseInnerShadowMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorHideBaseInnerShadowMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorHideBaseInnerShadowMul : register(b0) { 
float4 PS_SColorHideBaseInnerShadowMul_fsize : packoffset(c0);
float4 PS_SColorHideBaseInnerShadowMul_offset : packoffset(c1);
float4 PS_SColorHideBaseInnerShadowMul_scolor : packoffset(c2);
float4 PS_SColorHideBaseInnerShadowMul_srctexscale : packoffset(c3);
float4 PS_SColorHideBaseInnerShadowMul_texscale : packoffset(c4);
};

//PS_SColorHideBaseInnerShadowMul
void PS_SColorHideBaseInnerShadowMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorHideBaseInnerShadowMul_fsize.x; ix <= PS_SColorHideBaseInnerShadowMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColorHideBaseInnerShadowMul_fsize.y; iy <= PS_SColorHideBaseInnerShadowMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorHideBaseInnerShadowMul_offset.xy + i) * PS_SColorHideBaseInnerShadowMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorHideBaseInnerShadowMul_fsize.w;
    

    float4 shadowColor = PS_SColorHideBaseInnerShadowMul_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorHideBaseInnerShadowMul_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorHideBaseInnerShadowMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float lerpval = clamp((base.a*PS_SColorHideBaseInnerShadowMul_fsize.z - fcolor.a), 0.0f, 1.0f);
    lerpval *= shadowColor.a;
    fcolor = lerp(baseValue, shadowColor, lerpval) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColorHideBaseInnerShadowMul
{
	pass p0
	{
		VertexShader = VS_SColorHideBaseInnerShadowMul();
		PixelShader = PS_SColorHideBaseInnerShadowMul();
	}
}


cbuffer CB_VS_SColorHideBaseFullBevel : register(b0) { 
float4 VS_SColorHideBaseFullBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColorHideBaseFullBevel
void VS_SColorHideBaseFullBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorHideBaseFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorHideBaseFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorHideBaseFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorHideBaseFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorHideBaseFullBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorHideBaseFullBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorHideBaseFullBevel : register(b0) { 
float4 PS_SColorHideBaseFullBevel_fsize : packoffset(c0);
float4 PS_SColorHideBaseFullBevel_offset : packoffset(c1);
float4 PS_SColorHideBaseFullBevel_scolor : packoffset(c2);
float4 PS_SColorHideBaseFullBevel_srctexscale : packoffset(c3);
float4 PS_SColorHideBaseFullBevel_texscale : packoffset(c4);
};

//PS_SColorHideBaseFullBevel
void PS_SColorHideBaseFullBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorHideBaseFullBevel_fsize.x; ix <= PS_SColorHideBaseFullBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColorHideBaseFullBevel_fsize.y; iy <= PS_SColorHideBaseFullBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorHideBaseFullBevel_offset.xy + i) * PS_SColorHideBaseFullBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorHideBaseFullBevel_fsize.w;
    

    float4 shadowColor = PS_SColorHideBaseFullBevel_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorHideBaseFullBevel_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorHideBaseFullBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColorHideBaseFullBevel
{
	pass p0
	{
		VertexShader = VS_SColorHideBaseFullBevel();
		PixelShader = PS_SColorHideBaseFullBevel();
	}
}


cbuffer CB_VS_SColorHideBaseFullBevelMul : register(b0) { 
float4 VS_SColorHideBaseFullBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColorHideBaseFullBevelMul
void VS_SColorHideBaseFullBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColorHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColorHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColorHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColorHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColorHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColorHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColorHideBaseFullBevelMul : register(b0) { 
float4 PS_SColorHideBaseFullBevelMul_fsize : packoffset(c0);
float4 PS_SColorHideBaseFullBevelMul_offset : packoffset(c1);
float4 PS_SColorHideBaseFullBevelMul_scolor : packoffset(c2);
float4 PS_SColorHideBaseFullBevelMul_srctexscale : packoffset(c3);
float4 PS_SColorHideBaseFullBevelMul_texscale : packoffset(c4);
};

//PS_SColorHideBaseFullBevelMul
void PS_SColorHideBaseFullBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColorHideBaseFullBevelMul_fsize.x; ix <= PS_SColorHideBaseFullBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColorHideBaseFullBevelMul_fsize.y; iy <= PS_SColorHideBaseFullBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColorHideBaseFullBevelMul_offset.xy + i) * PS_SColorHideBaseFullBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SColorHideBaseFullBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColorHideBaseFullBevelMul_scolor;
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = fcolor.a * PS_SColorHideBaseFullBevelMul_fsize.z;
    fcolor.r = 0.0f;
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColorHideBaseFullBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColorHideBaseFullBevelMul
{
	pass p0
	{
		VertexShader = VS_SColorHideBaseFullBevelMul();
		PixelShader = PS_SColorHideBaseFullBevelMul();
	}
}


cbuffer CB_VS_SGradOuterBevel : register(b0) { 
float4 VS_SGradOuterBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGradOuterBevel
void VS_SGradOuterBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradOuterBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradOuterBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradOuterBevel : register(b0) { 
float4 PS_SGradOuterBevel_fsize : packoffset(c0);
float4 PS_SGradOuterBevel_offset : packoffset(c1);
float4 PS_SGradOuterBevel_srctexscale : packoffset(c2);
float4 PS_SGradOuterBevel_texscale : packoffset(c3);
};

//PS_SGradOuterBevel
void PS_SGradOuterBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradOuterBevel_fsize.x; ix <= PS_SGradOuterBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGradOuterBevel_fsize.y; iy <= PS_SGradOuterBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradOuterBevel_offset.xy + i) * PS_SGradOuterBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradOuterBevel_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradOuterBevel_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradOuterBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGradOuterBevel
{
	pass p0
	{
		VertexShader = VS_SGradOuterBevel();
		PixelShader = PS_SGradOuterBevel();
	}
}


cbuffer CB_VS_SGradOuterBevelMul : register(b0) { 
float4 VS_SGradOuterBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGradOuterBevelMul
void VS_SGradOuterBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradOuterBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradOuterBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradOuterBevelMul : register(b0) { 
float4 PS_SGradOuterBevelMul_fsize : packoffset(c0);
float4 PS_SGradOuterBevelMul_offset : packoffset(c1);
float4 PS_SGradOuterBevelMul_srctexscale : packoffset(c2);
float4 PS_SGradOuterBevelMul_texscale : packoffset(c3);
};

//PS_SGradOuterBevelMul
void PS_SGradOuterBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradOuterBevelMul_fsize.x; ix <= PS_SGradOuterBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGradOuterBevelMul_fsize.y; iy <= PS_SGradOuterBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradOuterBevelMul_offset.xy + i) * PS_SGradOuterBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradOuterBevelMul_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradOuterBevelMul_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradOuterBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGradOuterBevelMul
{
	pass p0
	{
		VertexShader = VS_SGradOuterBevelMul();
		PixelShader = PS_SGradOuterBevelMul();
	}
}


cbuffer CB_VS_SGradInnerBevel : register(b0) { 
float4 VS_SGradInnerBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGradInnerBevel
void VS_SGradInnerBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradInnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradInnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradInnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradInnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradInnerBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradInnerBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradInnerBevel : register(b0) { 
float4 PS_SGradInnerBevel_fsize : packoffset(c0);
float4 PS_SGradInnerBevel_offset : packoffset(c1);
float4 PS_SGradInnerBevel_srctexscale : packoffset(c2);
float4 PS_SGradInnerBevel_texscale : packoffset(c3);
};

//PS_SGradInnerBevel
void PS_SGradInnerBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradInnerBevel_fsize.x; ix <= PS_SGradInnerBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGradInnerBevel_fsize.y; iy <= PS_SGradInnerBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradInnerBevel_offset.xy + i) * PS_SGradInnerBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradInnerBevel_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradInnerBevel_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradInnerBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGradInnerBevel
{
	pass p0
	{
		VertexShader = VS_SGradInnerBevel();
		PixelShader = PS_SGradInnerBevel();
	}
}


cbuffer CB_VS_SGradInnerBevelMul : register(b0) { 
float4 VS_SGradInnerBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGradInnerBevelMul
void VS_SGradInnerBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradInnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradInnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradInnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradInnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradInnerBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradInnerBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradInnerBevelMul : register(b0) { 
float4 PS_SGradInnerBevelMul_fsize : packoffset(c0);
float4 PS_SGradInnerBevelMul_offset : packoffset(c1);
float4 PS_SGradInnerBevelMul_srctexscale : packoffset(c2);
float4 PS_SGradInnerBevelMul_texscale : packoffset(c3);
};

//PS_SGradInnerBevelMul
void PS_SGradInnerBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradInnerBevelMul_fsize.x; ix <= PS_SGradInnerBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGradInnerBevelMul_fsize.y; iy <= PS_SGradInnerBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradInnerBevelMul_offset.xy + i) * PS_SGradInnerBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradInnerBevelMul_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradInnerBevelMul_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradInnerBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGradInnerBevelMul
{
	pass p0
	{
		VertexShader = VS_SGradInnerBevelMul();
		PixelShader = PS_SGradInnerBevelMul();
	}
}


cbuffer CB_VS_SGradFullBevel : register(b0) { 
float4 VS_SGradFullBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGradFullBevel
void VS_SGradFullBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradFullBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradFullBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradFullBevel : register(b0) { 
float4 PS_SGradFullBevel_fsize : packoffset(c0);
float4 PS_SGradFullBevel_offset : packoffset(c1);
float4 PS_SGradFullBevel_srctexscale : packoffset(c2);
float4 PS_SGradFullBevel_texscale : packoffset(c3);
};

//PS_SGradFullBevel
void PS_SGradFullBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradFullBevel_fsize.x; ix <= PS_SGradFullBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGradFullBevel_fsize.y; iy <= PS_SGradFullBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradFullBevel_offset.xy + i) * PS_SGradFullBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradFullBevel_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradFullBevel_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradFullBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGradFullBevel
{
	pass p0
	{
		VertexShader = VS_SGradFullBevel();
		PixelShader = PS_SGradFullBevel();
	}
}


cbuffer CB_VS_SGradFullBevelMul : register(b0) { 
float4 VS_SGradFullBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGradFullBevelMul
void VS_SGradFullBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradFullBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradFullBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradFullBevelMul : register(b0) { 
float4 PS_SGradFullBevelMul_fsize : packoffset(c0);
float4 PS_SGradFullBevelMul_offset : packoffset(c1);
float4 PS_SGradFullBevelMul_srctexscale : packoffset(c2);
float4 PS_SGradFullBevelMul_texscale : packoffset(c3);
};

//PS_SGradFullBevelMul
void PS_SGradFullBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradFullBevelMul_fsize.x; ix <= PS_SGradFullBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGradFullBevelMul_fsize.y; iy <= PS_SGradFullBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradFullBevelMul_offset.xy + i) * PS_SGradFullBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradFullBevelMul_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradFullBevelMul_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradFullBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGradFullBevelMul
{
	pass p0
	{
		VertexShader = VS_SGradFullBevelMul();
		PixelShader = PS_SGradFullBevelMul();
	}
}


cbuffer CB_VS_SGradHideBaseOuterBevel : register(b0) { 
float4 VS_SGradHideBaseOuterBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGradHideBaseOuterBevel
void VS_SGradHideBaseOuterBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradHideBaseOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradHideBaseOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradHideBaseOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradHideBaseOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradHideBaseOuterBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradHideBaseOuterBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradHideBaseOuterBevel : register(b0) { 
float4 PS_SGradHideBaseOuterBevel_fsize : packoffset(c0);
float4 PS_SGradHideBaseOuterBevel_offset : packoffset(c1);
float4 PS_SGradHideBaseOuterBevel_srctexscale : packoffset(c2);
float4 PS_SGradHideBaseOuterBevel_texscale : packoffset(c3);
};

//PS_SGradHideBaseOuterBevel
void PS_SGradHideBaseOuterBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradHideBaseOuterBevel_fsize.x; ix <= PS_SGradHideBaseOuterBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGradHideBaseOuterBevel_fsize.y; iy <= PS_SGradHideBaseOuterBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradHideBaseOuterBevel_offset.xy + i) * PS_SGradHideBaseOuterBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradHideBaseOuterBevel_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradHideBaseOuterBevel_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradHideBaseOuterBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGradHideBaseOuterBevel
{
	pass p0
	{
		VertexShader = VS_SGradHideBaseOuterBevel();
		PixelShader = PS_SGradHideBaseOuterBevel();
	}
}


cbuffer CB_VS_SGradHideBaseOuterBevelMul : register(b0) { 
float4 VS_SGradHideBaseOuterBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGradHideBaseOuterBevelMul
void VS_SGradHideBaseOuterBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradHideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradHideBaseOuterBevelMul : register(b0) { 
float4 PS_SGradHideBaseOuterBevelMul_fsize : packoffset(c0);
float4 PS_SGradHideBaseOuterBevelMul_offset : packoffset(c1);
float4 PS_SGradHideBaseOuterBevelMul_srctexscale : packoffset(c2);
float4 PS_SGradHideBaseOuterBevelMul_texscale : packoffset(c3);
};

//PS_SGradHideBaseOuterBevelMul
void PS_SGradHideBaseOuterBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradHideBaseOuterBevelMul_fsize.x; ix <= PS_SGradHideBaseOuterBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGradHideBaseOuterBevelMul_fsize.y; iy <= PS_SGradHideBaseOuterBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradHideBaseOuterBevelMul_offset.xy + i) * PS_SGradHideBaseOuterBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradHideBaseOuterBevelMul_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradHideBaseOuterBevelMul_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradHideBaseOuterBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGradHideBaseOuterBevelMul
{
	pass p0
	{
		VertexShader = VS_SGradHideBaseOuterBevelMul();
		PixelShader = PS_SGradHideBaseOuterBevelMul();
	}
}


cbuffer CB_VS_SGradHideBaseInnerBevel : register(b0) { 
float4 VS_SGradHideBaseInnerBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGradHideBaseInnerBevel
void VS_SGradHideBaseInnerBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradHideBaseInnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradHideBaseInnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradHideBaseInnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradHideBaseInnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradHideBaseInnerBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradHideBaseInnerBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradHideBaseInnerBevel : register(b0) { 
float4 PS_SGradHideBaseInnerBevel_fsize : packoffset(c0);
float4 PS_SGradHideBaseInnerBevel_offset : packoffset(c1);
float4 PS_SGradHideBaseInnerBevel_srctexscale : packoffset(c2);
float4 PS_SGradHideBaseInnerBevel_texscale : packoffset(c3);
};

//PS_SGradHideBaseInnerBevel
void PS_SGradHideBaseInnerBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradHideBaseInnerBevel_fsize.x; ix <= PS_SGradHideBaseInnerBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGradHideBaseInnerBevel_fsize.y; iy <= PS_SGradHideBaseInnerBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradHideBaseInnerBevel_offset.xy + i) * PS_SGradHideBaseInnerBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradHideBaseInnerBevel_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradHideBaseInnerBevel_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradHideBaseInnerBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGradHideBaseInnerBevel
{
	pass p0
	{
		VertexShader = VS_SGradHideBaseInnerBevel();
		PixelShader = PS_SGradHideBaseInnerBevel();
	}
}


cbuffer CB_VS_SGradHideBaseInnerBevelMul : register(b0) { 
float4 VS_SGradHideBaseInnerBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGradHideBaseInnerBevelMul
void VS_SGradHideBaseInnerBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradHideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradHideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradHideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradHideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradHideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradHideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradHideBaseInnerBevelMul : register(b0) { 
float4 PS_SGradHideBaseInnerBevelMul_fsize : packoffset(c0);
float4 PS_SGradHideBaseInnerBevelMul_offset : packoffset(c1);
float4 PS_SGradHideBaseInnerBevelMul_srctexscale : packoffset(c2);
float4 PS_SGradHideBaseInnerBevelMul_texscale : packoffset(c3);
};

//PS_SGradHideBaseInnerBevelMul
void PS_SGradHideBaseInnerBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradHideBaseInnerBevelMul_fsize.x; ix <= PS_SGradHideBaseInnerBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGradHideBaseInnerBevelMul_fsize.y; iy <= PS_SGradHideBaseInnerBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradHideBaseInnerBevelMul_offset.xy + i) * PS_SGradHideBaseInnerBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradHideBaseInnerBevelMul_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradHideBaseInnerBevelMul_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradHideBaseInnerBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGradHideBaseInnerBevelMul
{
	pass p0
	{
		VertexShader = VS_SGradHideBaseInnerBevelMul();
		PixelShader = PS_SGradHideBaseInnerBevelMul();
	}
}


cbuffer CB_VS_SGradHideBaseFullBevel : register(b0) { 
float4 VS_SGradHideBaseFullBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGradHideBaseFullBevel
void VS_SGradHideBaseFullBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradHideBaseFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradHideBaseFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradHideBaseFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradHideBaseFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradHideBaseFullBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradHideBaseFullBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradHideBaseFullBevel : register(b0) { 
float4 PS_SGradHideBaseFullBevel_fsize : packoffset(c0);
float4 PS_SGradHideBaseFullBevel_offset : packoffset(c1);
float4 PS_SGradHideBaseFullBevel_srctexscale : packoffset(c2);
float4 PS_SGradHideBaseFullBevel_texscale : packoffset(c3);
};

//PS_SGradHideBaseFullBevel
void PS_SGradHideBaseFullBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradHideBaseFullBevel_fsize.x; ix <= PS_SGradHideBaseFullBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGradHideBaseFullBevel_fsize.y; iy <= PS_SGradHideBaseFullBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradHideBaseFullBevel_offset.xy + i) * PS_SGradHideBaseFullBevel_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradHideBaseFullBevel_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradHideBaseFullBevel_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradHideBaseFullBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGradHideBaseFullBevel
{
	pass p0
	{
		VertexShader = VS_SGradHideBaseFullBevel();
		PixelShader = PS_SGradHideBaseFullBevel();
	}
}


cbuffer CB_VS_SGradHideBaseFullBevelMul : register(b0) { 
float4 VS_SGradHideBaseFullBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGradHideBaseFullBevelMul
void VS_SGradHideBaseFullBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGradHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGradHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGradHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGradHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGradHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGradHideBaseFullBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGradHideBaseFullBevelMul : register(b0) { 
float4 PS_SGradHideBaseFullBevelMul_fsize : packoffset(c0);
float4 PS_SGradHideBaseFullBevelMul_offset : packoffset(c1);
float4 PS_SGradHideBaseFullBevelMul_srctexscale : packoffset(c2);
float4 PS_SGradHideBaseFullBevelMul_texscale : packoffset(c3);
};

//PS_SGradHideBaseFullBevelMul
void PS_SGradHideBaseFullBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGradHideBaseFullBevelMul_fsize.x; ix <= PS_SGradHideBaseFullBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGradHideBaseFullBevelMul_fsize.y; iy <= PS_SGradHideBaseFullBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGradHideBaseFullBevelMul_offset.xy + i) * PS_SGradHideBaseFullBevelMul_texscale.xy);
    }
    } // EndBox2.

    fcolor = color * PS_SGradHideBaseFullBevelMul_fsize.w;
    

    float4 shadowColor = cry_tex0.Sample(cry_sampler0, float2(clamp(fcolor.a* PS_SGradHideBaseFullBevelMul_fsize.z,0.0f,1.0f), 0.0f));
    float4 shadowColor2 = float4(0,0,0,0);
    fcolor.a = shadowColor.a;
    fcolor.r = 0.0f;
    shadowColor.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGradHideBaseFullBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGradHideBaseFullBevelMul
{
	pass p0
	{
		VertexShader = VS_SGradHideBaseFullBevelMul();
		PixelShader = PS_SGradHideBaseFullBevelMul();
	}
}


cbuffer CB_VS_SColor2OuterBevel : register(b0) { 
float4 VS_SColor2OuterBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2OuterBevel
void VS_SColor2OuterBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2OuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2OuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2OuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2OuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2OuterBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2OuterBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2OuterBevel : register(b0) { 
float4 PS_SColor2OuterBevel_fsize : packoffset(c0);
float4 PS_SColor2OuterBevel_offset : packoffset(c1);
float4 PS_SColor2OuterBevel_scolor : packoffset(c2);
float4 PS_SColor2OuterBevel_scolor2 : packoffset(c3);
float4 PS_SColor2OuterBevel_srctexscale : packoffset(c4);
float4 PS_SColor2OuterBevel_texscale : packoffset(c5);
};

//PS_SColor2OuterBevel
void PS_SColor2OuterBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2OuterBevel_fsize.x; ix <= PS_SColor2OuterBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2OuterBevel_fsize.y; iy <= PS_SColor2OuterBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2OuterBevel_offset.xy + i) * PS_SColor2OuterBevel_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2OuterBevel_offset.xy + i) * PS_SColor2OuterBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2OuterBevel_fsize.w;
    

    float4 shadowColor = PS_SColor2OuterBevel_scolor;
    float4 shadowColor2 = PS_SColor2OuterBevel_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2OuterBevel_fsize.z) - (1.0 - fcolor.ra * PS_SColor2OuterBevel_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2OuterBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColor2OuterBevel
{
	pass p0
	{
		VertexShader = VS_SColor2OuterBevel();
		PixelShader = PS_SColor2OuterBevel();
	}
}


cbuffer CB_VS_SColor2OuterBevelMul : register(b0) { 
float4 VS_SColor2OuterBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2OuterBevelMul
void VS_SColor2OuterBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2OuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2OuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2OuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2OuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2OuterBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2OuterBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2OuterBevelMul : register(b0) { 
float4 PS_SColor2OuterBevelMul_fsize : packoffset(c0);
float4 PS_SColor2OuterBevelMul_offset : packoffset(c1);
float4 PS_SColor2OuterBevelMul_scolor : packoffset(c2);
float4 PS_SColor2OuterBevelMul_scolor2 : packoffset(c3);
float4 PS_SColor2OuterBevelMul_srctexscale : packoffset(c4);
float4 PS_SColor2OuterBevelMul_texscale : packoffset(c5);
};

//PS_SColor2OuterBevelMul
void PS_SColor2OuterBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2OuterBevelMul_fsize.x; ix <= PS_SColor2OuterBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2OuterBevelMul_fsize.y; iy <= PS_SColor2OuterBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2OuterBevelMul_offset.xy + i) * PS_SColor2OuterBevelMul_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2OuterBevelMul_offset.xy + i) * PS_SColor2OuterBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2OuterBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColor2OuterBevelMul_scolor;
    float4 shadowColor2 = PS_SColor2OuterBevelMul_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2OuterBevelMul_fsize.z) - (1.0 - fcolor.ra * PS_SColor2OuterBevelMul_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2OuterBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColor2OuterBevelMul
{
	pass p0
	{
		VertexShader = VS_SColor2OuterBevelMul();
		PixelShader = PS_SColor2OuterBevelMul();
	}
}


cbuffer CB_VS_SColor2InnerBevel : register(b0) { 
float4 VS_SColor2InnerBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2InnerBevel
void VS_SColor2InnerBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2InnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2InnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2InnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2InnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2InnerBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2InnerBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2InnerBevel : register(b0) { 
float4 PS_SColor2InnerBevel_fsize : packoffset(c0);
float4 PS_SColor2InnerBevel_offset : packoffset(c1);
float4 PS_SColor2InnerBevel_scolor : packoffset(c2);
float4 PS_SColor2InnerBevel_scolor2 : packoffset(c3);
float4 PS_SColor2InnerBevel_srctexscale : packoffset(c4);
float4 PS_SColor2InnerBevel_texscale : packoffset(c5);
};

//PS_SColor2InnerBevel
void PS_SColor2InnerBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2InnerBevel_fsize.x; ix <= PS_SColor2InnerBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2InnerBevel_fsize.y; iy <= PS_SColor2InnerBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2InnerBevel_offset.xy + i) * PS_SColor2InnerBevel_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2InnerBevel_offset.xy + i) * PS_SColor2InnerBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2InnerBevel_fsize.w;
    

    float4 shadowColor = PS_SColor2InnerBevel_scolor;
    float4 shadowColor2 = PS_SColor2InnerBevel_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2InnerBevel_fsize.z) - (1.0 - fcolor.ra * PS_SColor2InnerBevel_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2InnerBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColor2InnerBevel
{
	pass p0
	{
		VertexShader = VS_SColor2InnerBevel();
		PixelShader = PS_SColor2InnerBevel();
	}
}


cbuffer CB_VS_SColor2InnerBevelMul : register(b0) { 
float4 VS_SColor2InnerBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2InnerBevelMul
void VS_SColor2InnerBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2InnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2InnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2InnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2InnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2InnerBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2InnerBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2InnerBevelMul : register(b0) { 
float4 PS_SColor2InnerBevelMul_fsize : packoffset(c0);
float4 PS_SColor2InnerBevelMul_offset : packoffset(c1);
float4 PS_SColor2InnerBevelMul_scolor : packoffset(c2);
float4 PS_SColor2InnerBevelMul_scolor2 : packoffset(c3);
float4 PS_SColor2InnerBevelMul_srctexscale : packoffset(c4);
float4 PS_SColor2InnerBevelMul_texscale : packoffset(c5);
};

//PS_SColor2InnerBevelMul
void PS_SColor2InnerBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2InnerBevelMul_fsize.x; ix <= PS_SColor2InnerBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2InnerBevelMul_fsize.y; iy <= PS_SColor2InnerBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2InnerBevelMul_offset.xy + i) * PS_SColor2InnerBevelMul_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2InnerBevelMul_offset.xy + i) * PS_SColor2InnerBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2InnerBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColor2InnerBevelMul_scolor;
    float4 shadowColor2 = PS_SColor2InnerBevelMul_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2InnerBevelMul_fsize.z) - (1.0 - fcolor.ra * PS_SColor2InnerBevelMul_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2InnerBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColor2InnerBevelMul
{
	pass p0
	{
		VertexShader = VS_SColor2InnerBevelMul();
		PixelShader = PS_SColor2InnerBevelMul();
	}
}


cbuffer CB_VS_SColor2FullBevel : register(b0) { 
float4 VS_SColor2FullBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2FullBevel
void VS_SColor2FullBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2FullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2FullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2FullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2FullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2FullBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2FullBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2FullBevel : register(b0) { 
float4 PS_SColor2FullBevel_fsize : packoffset(c0);
float4 PS_SColor2FullBevel_offset : packoffset(c1);
float4 PS_SColor2FullBevel_scolor : packoffset(c2);
float4 PS_SColor2FullBevel_scolor2 : packoffset(c3);
float4 PS_SColor2FullBevel_srctexscale : packoffset(c4);
float4 PS_SColor2FullBevel_texscale : packoffset(c5);
};

//PS_SColor2FullBevel
void PS_SColor2FullBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2FullBevel_fsize.x; ix <= PS_SColor2FullBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2FullBevel_fsize.y; iy <= PS_SColor2FullBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2FullBevel_offset.xy + i) * PS_SColor2FullBevel_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2FullBevel_offset.xy + i) * PS_SColor2FullBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2FullBevel_fsize.w;
    

    float4 shadowColor = PS_SColor2FullBevel_scolor;
    float4 shadowColor2 = PS_SColor2FullBevel_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2FullBevel_fsize.z) - (1.0 - fcolor.ra * PS_SColor2FullBevel_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2FullBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColor2FullBevel
{
	pass p0
	{
		VertexShader = VS_SColor2FullBevel();
		PixelShader = PS_SColor2FullBevel();
	}
}


cbuffer CB_VS_SColor2FullBevelMul : register(b0) { 
float4 VS_SColor2FullBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2FullBevelMul
void VS_SColor2FullBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2FullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2FullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2FullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2FullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2FullBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2FullBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2FullBevelMul : register(b0) { 
float4 PS_SColor2FullBevelMul_fsize : packoffset(c0);
float4 PS_SColor2FullBevelMul_offset : packoffset(c1);
float4 PS_SColor2FullBevelMul_scolor : packoffset(c2);
float4 PS_SColor2FullBevelMul_scolor2 : packoffset(c3);
float4 PS_SColor2FullBevelMul_srctexscale : packoffset(c4);
float4 PS_SColor2FullBevelMul_texscale : packoffset(c5);
};

//PS_SColor2FullBevelMul
void PS_SColor2FullBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2FullBevelMul_fsize.x; ix <= PS_SColor2FullBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2FullBevelMul_fsize.y; iy <= PS_SColor2FullBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2FullBevelMul_offset.xy + i) * PS_SColor2FullBevelMul_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2FullBevelMul_offset.xy + i) * PS_SColor2FullBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2FullBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColor2FullBevelMul_scolor;
    float4 shadowColor2 = PS_SColor2FullBevelMul_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2FullBevelMul_fsize.z) - (1.0 - fcolor.ra * PS_SColor2FullBevelMul_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2FullBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColor2FullBevelMul
{
	pass p0
	{
		VertexShader = VS_SColor2FullBevelMul();
		PixelShader = PS_SColor2FullBevelMul();
	}
}


cbuffer CB_VS_SColor2HideBaseOuterBevel : register(b0) { 
float4 VS_SColor2HideBaseOuterBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2HideBaseOuterBevel
void VS_SColor2HideBaseOuterBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2HideBaseOuterBevel : register(b0) { 
float4 PS_SColor2HideBaseOuterBevel_fsize : packoffset(c0);
float4 PS_SColor2HideBaseOuterBevel_offset : packoffset(c1);
float4 PS_SColor2HideBaseOuterBevel_scolor : packoffset(c2);
float4 PS_SColor2HideBaseOuterBevel_scolor2 : packoffset(c3);
float4 PS_SColor2HideBaseOuterBevel_srctexscale : packoffset(c4);
float4 PS_SColor2HideBaseOuterBevel_texscale : packoffset(c5);
};

//PS_SColor2HideBaseOuterBevel
void PS_SColor2HideBaseOuterBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2HideBaseOuterBevel_fsize.x; ix <= PS_SColor2HideBaseOuterBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2HideBaseOuterBevel_fsize.y; iy <= PS_SColor2HideBaseOuterBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2HideBaseOuterBevel_offset.xy + i) * PS_SColor2HideBaseOuterBevel_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2HideBaseOuterBevel_offset.xy + i) * PS_SColor2HideBaseOuterBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2HideBaseOuterBevel_fsize.w;
    

    float4 shadowColor = PS_SColor2HideBaseOuterBevel_scolor;
    float4 shadowColor2 = PS_SColor2HideBaseOuterBevel_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2HideBaseOuterBevel_fsize.z) - (1.0 - fcolor.ra * PS_SColor2HideBaseOuterBevel_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2HideBaseOuterBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColor2HideBaseOuterBevel
{
	pass p0
	{
		VertexShader = VS_SColor2HideBaseOuterBevel();
		PixelShader = PS_SColor2HideBaseOuterBevel();
	}
}


cbuffer CB_VS_SColor2HideBaseOuterBevelMul : register(b0) { 
float4 VS_SColor2HideBaseOuterBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2HideBaseOuterBevelMul
void VS_SColor2HideBaseOuterBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2HideBaseOuterBevelMul : register(b0) { 
float4 PS_SColor2HideBaseOuterBevelMul_fsize : packoffset(c0);
float4 PS_SColor2HideBaseOuterBevelMul_offset : packoffset(c1);
float4 PS_SColor2HideBaseOuterBevelMul_scolor : packoffset(c2);
float4 PS_SColor2HideBaseOuterBevelMul_scolor2 : packoffset(c3);
float4 PS_SColor2HideBaseOuterBevelMul_srctexscale : packoffset(c4);
float4 PS_SColor2HideBaseOuterBevelMul_texscale : packoffset(c5);
};

//PS_SColor2HideBaseOuterBevelMul
void PS_SColor2HideBaseOuterBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2HideBaseOuterBevelMul_fsize.x; ix <= PS_SColor2HideBaseOuterBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2HideBaseOuterBevelMul_fsize.y; iy <= PS_SColor2HideBaseOuterBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2HideBaseOuterBevelMul_offset.xy + i) * PS_SColor2HideBaseOuterBevelMul_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2HideBaseOuterBevelMul_offset.xy + i) * PS_SColor2HideBaseOuterBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2HideBaseOuterBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColor2HideBaseOuterBevelMul_scolor;
    float4 shadowColor2 = PS_SColor2HideBaseOuterBevelMul_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2HideBaseOuterBevelMul_fsize.z) - (1.0 - fcolor.ra * PS_SColor2HideBaseOuterBevelMul_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2HideBaseOuterBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColor2HideBaseOuterBevelMul
{
	pass p0
	{
		VertexShader = VS_SColor2HideBaseOuterBevelMul();
		PixelShader = PS_SColor2HideBaseOuterBevelMul();
	}
}


cbuffer CB_VS_SColor2HideBaseInnerBevel : register(b0) { 
float4 VS_SColor2HideBaseInnerBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2HideBaseInnerBevel
void VS_SColor2HideBaseInnerBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2HideBaseInnerBevel : register(b0) { 
float4 PS_SColor2HideBaseInnerBevel_fsize : packoffset(c0);
float4 PS_SColor2HideBaseInnerBevel_offset : packoffset(c1);
float4 PS_SColor2HideBaseInnerBevel_scolor : packoffset(c2);
float4 PS_SColor2HideBaseInnerBevel_scolor2 : packoffset(c3);
float4 PS_SColor2HideBaseInnerBevel_srctexscale : packoffset(c4);
float4 PS_SColor2HideBaseInnerBevel_texscale : packoffset(c5);
};

//PS_SColor2HideBaseInnerBevel
void PS_SColor2HideBaseInnerBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2HideBaseInnerBevel_fsize.x; ix <= PS_SColor2HideBaseInnerBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2HideBaseInnerBevel_fsize.y; iy <= PS_SColor2HideBaseInnerBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2HideBaseInnerBevel_offset.xy + i) * PS_SColor2HideBaseInnerBevel_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2HideBaseInnerBevel_offset.xy + i) * PS_SColor2HideBaseInnerBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2HideBaseInnerBevel_fsize.w;
    

    float4 shadowColor = PS_SColor2HideBaseInnerBevel_scolor;
    float4 shadowColor2 = PS_SColor2HideBaseInnerBevel_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2HideBaseInnerBevel_fsize.z) - (1.0 - fcolor.ra * PS_SColor2HideBaseInnerBevel_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2HideBaseInnerBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColor2HideBaseInnerBevel
{
	pass p0
	{
		VertexShader = VS_SColor2HideBaseInnerBevel();
		PixelShader = PS_SColor2HideBaseInnerBevel();
	}
}


cbuffer CB_VS_SColor2HideBaseInnerBevelMul : register(b0) { 
float4 VS_SColor2HideBaseInnerBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2HideBaseInnerBevelMul
void VS_SColor2HideBaseInnerBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2HideBaseInnerBevelMul : register(b0) { 
float4 PS_SColor2HideBaseInnerBevelMul_fsize : packoffset(c0);
float4 PS_SColor2HideBaseInnerBevelMul_offset : packoffset(c1);
float4 PS_SColor2HideBaseInnerBevelMul_scolor : packoffset(c2);
float4 PS_SColor2HideBaseInnerBevelMul_scolor2 : packoffset(c3);
float4 PS_SColor2HideBaseInnerBevelMul_srctexscale : packoffset(c4);
float4 PS_SColor2HideBaseInnerBevelMul_texscale : packoffset(c5);
};

//PS_SColor2HideBaseInnerBevelMul
void PS_SColor2HideBaseInnerBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2HideBaseInnerBevelMul_fsize.x; ix <= PS_SColor2HideBaseInnerBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2HideBaseInnerBevelMul_fsize.y; iy <= PS_SColor2HideBaseInnerBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2HideBaseInnerBevelMul_offset.xy + i) * PS_SColor2HideBaseInnerBevelMul_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2HideBaseInnerBevelMul_offset.xy + i) * PS_SColor2HideBaseInnerBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2HideBaseInnerBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColor2HideBaseInnerBevelMul_scolor;
    float4 shadowColor2 = PS_SColor2HideBaseInnerBevelMul_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2HideBaseInnerBevelMul_fsize.z) - (1.0 - fcolor.ra * PS_SColor2HideBaseInnerBevelMul_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2HideBaseInnerBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColor2HideBaseInnerBevelMul
{
	pass p0
	{
		VertexShader = VS_SColor2HideBaseInnerBevelMul();
		PixelShader = PS_SColor2HideBaseInnerBevelMul();
	}
}


cbuffer CB_VS_SColor2HideBaseFullBevel : register(b0) { 
float4 VS_SColor2HideBaseFullBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2HideBaseFullBevel
void VS_SColor2HideBaseFullBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2HideBaseFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2HideBaseFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2HideBaseFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2HideBaseFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2HideBaseFullBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2HideBaseFullBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2HideBaseFullBevel : register(b0) { 
float4 PS_SColor2HideBaseFullBevel_fsize : packoffset(c0);
float4 PS_SColor2HideBaseFullBevel_offset : packoffset(c1);
float4 PS_SColor2HideBaseFullBevel_scolor : packoffset(c2);
float4 PS_SColor2HideBaseFullBevel_scolor2 : packoffset(c3);
float4 PS_SColor2HideBaseFullBevel_srctexscale : packoffset(c4);
float4 PS_SColor2HideBaseFullBevel_texscale : packoffset(c5);
};

//PS_SColor2HideBaseFullBevel
void PS_SColor2HideBaseFullBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2HideBaseFullBevel_fsize.x; ix <= PS_SColor2HideBaseFullBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2HideBaseFullBevel_fsize.y; iy <= PS_SColor2HideBaseFullBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2HideBaseFullBevel_offset.xy + i) * PS_SColor2HideBaseFullBevel_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2HideBaseFullBevel_offset.xy + i) * PS_SColor2HideBaseFullBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2HideBaseFullBevel_fsize.w;
    

    float4 shadowColor = PS_SColor2HideBaseFullBevel_scolor;
    float4 shadowColor2 = PS_SColor2HideBaseFullBevel_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2HideBaseFullBevel_fsize.z) - (1.0 - fcolor.ra * PS_SColor2HideBaseFullBevel_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2HideBaseFullBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SColor2HideBaseFullBevel
{
	pass p0
	{
		VertexShader = VS_SColor2HideBaseFullBevel();
		PixelShader = PS_SColor2HideBaseFullBevel();
	}
}


cbuffer CB_VS_SColor2HideBaseFullBevelMul : register(b0) { 
float4 VS_SColor2HideBaseFullBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SColor2HideBaseFullBevelMul
void VS_SColor2HideBaseFullBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SColor2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SColor2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SColor2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SColor2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SColor2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SColor2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SColor2HideBaseFullBevelMul : register(b0) { 
float4 PS_SColor2HideBaseFullBevelMul_fsize : packoffset(c0);
float4 PS_SColor2HideBaseFullBevelMul_offset : packoffset(c1);
float4 PS_SColor2HideBaseFullBevelMul_scolor : packoffset(c2);
float4 PS_SColor2HideBaseFullBevelMul_scolor2 : packoffset(c3);
float4 PS_SColor2HideBaseFullBevelMul_srctexscale : packoffset(c4);
float4 PS_SColor2HideBaseFullBevelMul_texscale : packoffset(c5);
};

//PS_SColor2HideBaseFullBevelMul
void PS_SColor2HideBaseFullBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SColor2HideBaseFullBevelMul_fsize.x; ix <= PS_SColor2HideBaseFullBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SColor2HideBaseFullBevelMul_fsize.y; iy <= PS_SColor2HideBaseFullBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex1.Sample(cry_sampler1, tc0 + (PS_SColor2HideBaseFullBevelMul_offset.xy + i) * PS_SColor2HideBaseFullBevelMul_texscale.xy).a;
    color.r += cry_tex1.Sample(cry_sampler1, tc0 - (PS_SColor2HideBaseFullBevelMul_offset.xy + i) * PS_SColor2HideBaseFullBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SColor2HideBaseFullBevelMul_fsize.w;
    

    float4 shadowColor = PS_SColor2HideBaseFullBevelMul_scolor;
    float4 shadowColor2 = PS_SColor2HideBaseFullBevelMul_scolor2;
    fcolor.ar = (1.0 - fcolor.ar * PS_SColor2HideBaseFullBevelMul_fsize.z) - (1.0 - fcolor.ra * PS_SColor2HideBaseFullBevelMul_fsize.z);
    

    float4 base = cry_tex0.Sample(cry_sampler0, tc0 * PS_SColor2HideBaseFullBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SColor2HideBaseFullBevelMul
{
	pass p0
	{
		VertexShader = VS_SColor2HideBaseFullBevelMul();
		PixelShader = PS_SColor2HideBaseFullBevelMul();
	}
}


cbuffer CB_VS_SGrad2OuterBevel : register(b0) { 
float4 VS_SGrad2OuterBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2OuterBevel
void VS_SGrad2OuterBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2OuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2OuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2OuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2OuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2OuterBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2OuterBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2OuterBevel : register(b0) { 
float4 PS_SGrad2OuterBevel_fsize : packoffset(c0);
float4 PS_SGrad2OuterBevel_offset : packoffset(c1);
float4 PS_SGrad2OuterBevel_srctexscale : packoffset(c2);
float4 PS_SGrad2OuterBevel_texscale : packoffset(c3);
};

//PS_SGrad2OuterBevel
void PS_SGrad2OuterBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2OuterBevel_fsize.x; ix <= PS_SGrad2OuterBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2OuterBevel_fsize.y; iy <= PS_SGrad2OuterBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2OuterBevel_offset.xy + i) * PS_SGrad2OuterBevel_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2OuterBevel_offset.xy + i) * PS_SGrad2OuterBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2OuterBevel_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2OuterBevel_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2OuterBevel_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2OuterBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGrad2OuterBevel
{
	pass p0
	{
		VertexShader = VS_SGrad2OuterBevel();
		PixelShader = PS_SGrad2OuterBevel();
	}
}


cbuffer CB_VS_SGrad2OuterBevelMul : register(b0) { 
float4 VS_SGrad2OuterBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2OuterBevelMul
void VS_SGrad2OuterBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2OuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2OuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2OuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2OuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2OuterBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2OuterBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2OuterBevelMul : register(b0) { 
float4 PS_SGrad2OuterBevelMul_fsize : packoffset(c0);
float4 PS_SGrad2OuterBevelMul_offset : packoffset(c1);
float4 PS_SGrad2OuterBevelMul_srctexscale : packoffset(c2);
float4 PS_SGrad2OuterBevelMul_texscale : packoffset(c3);
};

//PS_SGrad2OuterBevelMul
void PS_SGrad2OuterBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2OuterBevelMul_fsize.x; ix <= PS_SGrad2OuterBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2OuterBevelMul_fsize.y; iy <= PS_SGrad2OuterBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2OuterBevelMul_offset.xy + i) * PS_SGrad2OuterBevelMul_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2OuterBevelMul_offset.xy + i) * PS_SGrad2OuterBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2OuterBevelMul_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2OuterBevelMul_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2OuterBevelMul_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2OuterBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGrad2OuterBevelMul
{
	pass p0
	{
		VertexShader = VS_SGrad2OuterBevelMul();
		PixelShader = PS_SGrad2OuterBevelMul();
	}
}


cbuffer CB_VS_SGrad2InnerBevel : register(b0) { 
float4 VS_SGrad2InnerBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2InnerBevel
void VS_SGrad2InnerBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2InnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2InnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2InnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2InnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2InnerBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2InnerBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2InnerBevel : register(b0) { 
float4 PS_SGrad2InnerBevel_fsize : packoffset(c0);
float4 PS_SGrad2InnerBevel_offset : packoffset(c1);
float4 PS_SGrad2InnerBevel_srctexscale : packoffset(c2);
float4 PS_SGrad2InnerBevel_texscale : packoffset(c3);
};

//PS_SGrad2InnerBevel
void PS_SGrad2InnerBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2InnerBevel_fsize.x; ix <= PS_SGrad2InnerBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2InnerBevel_fsize.y; iy <= PS_SGrad2InnerBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2InnerBevel_offset.xy + i) * PS_SGrad2InnerBevel_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2InnerBevel_offset.xy + i) * PS_SGrad2InnerBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2InnerBevel_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2InnerBevel_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2InnerBevel_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2InnerBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGrad2InnerBevel
{
	pass p0
	{
		VertexShader = VS_SGrad2InnerBevel();
		PixelShader = PS_SGrad2InnerBevel();
	}
}


cbuffer CB_VS_SGrad2InnerBevelMul : register(b0) { 
float4 VS_SGrad2InnerBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2InnerBevelMul
void VS_SGrad2InnerBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2InnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2InnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2InnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2InnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2InnerBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2InnerBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2InnerBevelMul : register(b0) { 
float4 PS_SGrad2InnerBevelMul_fsize : packoffset(c0);
float4 PS_SGrad2InnerBevelMul_offset : packoffset(c1);
float4 PS_SGrad2InnerBevelMul_srctexscale : packoffset(c2);
float4 PS_SGrad2InnerBevelMul_texscale : packoffset(c3);
};

//PS_SGrad2InnerBevelMul
void PS_SGrad2InnerBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2InnerBevelMul_fsize.x; ix <= PS_SGrad2InnerBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2InnerBevelMul_fsize.y; iy <= PS_SGrad2InnerBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2InnerBevelMul_offset.xy + i) * PS_SGrad2InnerBevelMul_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2InnerBevelMul_offset.xy + i) * PS_SGrad2InnerBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2InnerBevelMul_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2InnerBevelMul_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2InnerBevelMul_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2InnerBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGrad2InnerBevelMul
{
	pass p0
	{
		VertexShader = VS_SGrad2InnerBevelMul();
		PixelShader = PS_SGrad2InnerBevelMul();
	}
}


cbuffer CB_VS_SGrad2FullBevel : register(b0) { 
float4 VS_SGrad2FullBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2FullBevel
void VS_SGrad2FullBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2FullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2FullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2FullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2FullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2FullBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2FullBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2FullBevel : register(b0) { 
float4 PS_SGrad2FullBevel_fsize : packoffset(c0);
float4 PS_SGrad2FullBevel_offset : packoffset(c1);
float4 PS_SGrad2FullBevel_srctexscale : packoffset(c2);
float4 PS_SGrad2FullBevel_texscale : packoffset(c3);
};

//PS_SGrad2FullBevel
void PS_SGrad2FullBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2FullBevel_fsize.x; ix <= PS_SGrad2FullBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2FullBevel_fsize.y; iy <= PS_SGrad2FullBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2FullBevel_offset.xy + i) * PS_SGrad2FullBevel_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2FullBevel_offset.xy + i) * PS_SGrad2FullBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2FullBevel_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2FullBevel_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2FullBevel_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2FullBevel_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGrad2FullBevel
{
	pass p0
	{
		VertexShader = VS_SGrad2FullBevel();
		PixelShader = PS_SGrad2FullBevel();
	}
}


cbuffer CB_VS_SGrad2FullBevelMul : register(b0) { 
float4 VS_SGrad2FullBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2FullBevelMul
void VS_SGrad2FullBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2FullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2FullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2FullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2FullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2FullBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2FullBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2FullBevelMul : register(b0) { 
float4 PS_SGrad2FullBevelMul_fsize : packoffset(c0);
float4 PS_SGrad2FullBevelMul_offset : packoffset(c1);
float4 PS_SGrad2FullBevelMul_srctexscale : packoffset(c2);
float4 PS_SGrad2FullBevelMul_texscale : packoffset(c3);
};

//PS_SGrad2FullBevelMul
void PS_SGrad2FullBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2FullBevelMul_fsize.x; ix <= PS_SGrad2FullBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2FullBevelMul_fsize.y; iy <= PS_SGrad2FullBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2FullBevelMul_offset.xy + i) * PS_SGrad2FullBevelMul_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2FullBevelMul_offset.xy + i) * PS_SGrad2FullBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2FullBevelMul_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2FullBevelMul_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2FullBevelMul_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2FullBevelMul_srctexscale.xy);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGrad2FullBevelMul
{
	pass p0
	{
		VertexShader = VS_SGrad2FullBevelMul();
		PixelShader = PS_SGrad2FullBevelMul();
	}
}


cbuffer CB_VS_SGrad2HideBaseOuterBevel : register(b0) { 
float4 VS_SGrad2HideBaseOuterBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2HideBaseOuterBevel
void VS_SGrad2HideBaseOuterBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2HideBaseOuterBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2HideBaseOuterBevel : register(b0) { 
float4 PS_SGrad2HideBaseOuterBevel_fsize : packoffset(c0);
float4 PS_SGrad2HideBaseOuterBevel_offset : packoffset(c1);
float4 PS_SGrad2HideBaseOuterBevel_srctexscale : packoffset(c2);
float4 PS_SGrad2HideBaseOuterBevel_texscale : packoffset(c3);
};

//PS_SGrad2HideBaseOuterBevel
void PS_SGrad2HideBaseOuterBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2HideBaseOuterBevel_fsize.x; ix <= PS_SGrad2HideBaseOuterBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2HideBaseOuterBevel_fsize.y; iy <= PS_SGrad2HideBaseOuterBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2HideBaseOuterBevel_offset.xy + i) * PS_SGrad2HideBaseOuterBevel_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2HideBaseOuterBevel_offset.xy + i) * PS_SGrad2HideBaseOuterBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2HideBaseOuterBevel_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2HideBaseOuterBevel_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2HideBaseOuterBevel_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2HideBaseOuterBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGrad2HideBaseOuterBevel
{
	pass p0
	{
		VertexShader = VS_SGrad2HideBaseOuterBevel();
		PixelShader = PS_SGrad2HideBaseOuterBevel();
	}
}


cbuffer CB_VS_SGrad2HideBaseOuterBevelMul : register(b0) { 
float4 VS_SGrad2HideBaseOuterBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2HideBaseOuterBevelMul
void VS_SGrad2HideBaseOuterBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2HideBaseOuterBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2HideBaseOuterBevelMul : register(b0) { 
float4 PS_SGrad2HideBaseOuterBevelMul_fsize : packoffset(c0);
float4 PS_SGrad2HideBaseOuterBevelMul_offset : packoffset(c1);
float4 PS_SGrad2HideBaseOuterBevelMul_srctexscale : packoffset(c2);
float4 PS_SGrad2HideBaseOuterBevelMul_texscale : packoffset(c3);
};

//PS_SGrad2HideBaseOuterBevelMul
void PS_SGrad2HideBaseOuterBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2HideBaseOuterBevelMul_fsize.x; ix <= PS_SGrad2HideBaseOuterBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2HideBaseOuterBevelMul_fsize.y; iy <= PS_SGrad2HideBaseOuterBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2HideBaseOuterBevelMul_offset.xy + i) * PS_SGrad2HideBaseOuterBevelMul_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2HideBaseOuterBevelMul_offset.xy + i) * PS_SGrad2HideBaseOuterBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2HideBaseOuterBevelMul_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2HideBaseOuterBevelMul_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2HideBaseOuterBevelMul_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2HideBaseOuterBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGrad2HideBaseOuterBevelMul
{
	pass p0
	{
		VertexShader = VS_SGrad2HideBaseOuterBevelMul();
		PixelShader = PS_SGrad2HideBaseOuterBevelMul();
	}
}


cbuffer CB_VS_SGrad2HideBaseInnerBevel : register(b0) { 
float4 VS_SGrad2HideBaseInnerBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2HideBaseInnerBevel
void VS_SGrad2HideBaseInnerBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2HideBaseInnerBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2HideBaseInnerBevel : register(b0) { 
float4 PS_SGrad2HideBaseInnerBevel_fsize : packoffset(c0);
float4 PS_SGrad2HideBaseInnerBevel_offset : packoffset(c1);
float4 PS_SGrad2HideBaseInnerBevel_srctexscale : packoffset(c2);
float4 PS_SGrad2HideBaseInnerBevel_texscale : packoffset(c3);
};

//PS_SGrad2HideBaseInnerBevel
void PS_SGrad2HideBaseInnerBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2HideBaseInnerBevel_fsize.x; ix <= PS_SGrad2HideBaseInnerBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2HideBaseInnerBevel_fsize.y; iy <= PS_SGrad2HideBaseInnerBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2HideBaseInnerBevel_offset.xy + i) * PS_SGrad2HideBaseInnerBevel_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2HideBaseInnerBevel_offset.xy + i) * PS_SGrad2HideBaseInnerBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2HideBaseInnerBevel_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2HideBaseInnerBevel_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2HideBaseInnerBevel_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2HideBaseInnerBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGrad2HideBaseInnerBevel
{
	pass p0
	{
		VertexShader = VS_SGrad2HideBaseInnerBevel();
		PixelShader = PS_SGrad2HideBaseInnerBevel();
	}
}


cbuffer CB_VS_SGrad2HideBaseInnerBevelMul : register(b0) { 
float4 VS_SGrad2HideBaseInnerBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2HideBaseInnerBevelMul
void VS_SGrad2HideBaseInnerBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2HideBaseInnerBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2HideBaseInnerBevelMul : register(b0) { 
float4 PS_SGrad2HideBaseInnerBevelMul_fsize : packoffset(c0);
float4 PS_SGrad2HideBaseInnerBevelMul_offset : packoffset(c1);
float4 PS_SGrad2HideBaseInnerBevelMul_srctexscale : packoffset(c2);
float4 PS_SGrad2HideBaseInnerBevelMul_texscale : packoffset(c3);
};

//PS_SGrad2HideBaseInnerBevelMul
void PS_SGrad2HideBaseInnerBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2HideBaseInnerBevelMul_fsize.x; ix <= PS_SGrad2HideBaseInnerBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2HideBaseInnerBevelMul_fsize.y; iy <= PS_SGrad2HideBaseInnerBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2HideBaseInnerBevelMul_offset.xy + i) * PS_SGrad2HideBaseInnerBevelMul_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2HideBaseInnerBevelMul_offset.xy + i) * PS_SGrad2HideBaseInnerBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2HideBaseInnerBevelMul_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2HideBaseInnerBevelMul_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2HideBaseInnerBevelMul_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2HideBaseInnerBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGrad2HideBaseInnerBevelMul
{
	pass p0
	{
		VertexShader = VS_SGrad2HideBaseInnerBevelMul();
		PixelShader = PS_SGrad2HideBaseInnerBevelMul();
	}
}


cbuffer CB_VS_SGrad2HideBaseFullBevel : register(b0) { 
float4 VS_SGrad2HideBaseFullBevel_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2HideBaseFullBevel
void VS_SGrad2HideBaseFullBevel( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2HideBaseFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2HideBaseFullBevel_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2HideBaseFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2HideBaseFullBevel_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2HideBaseFullBevel_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2HideBaseFullBevel_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2HideBaseFullBevel : register(b0) { 
float4 PS_SGrad2HideBaseFullBevel_fsize : packoffset(c0);
float4 PS_SGrad2HideBaseFullBevel_offset : packoffset(c1);
float4 PS_SGrad2HideBaseFullBevel_srctexscale : packoffset(c2);
float4 PS_SGrad2HideBaseFullBevel_texscale : packoffset(c3);
};

//PS_SGrad2HideBaseFullBevel
void PS_SGrad2HideBaseFullBevel( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2HideBaseFullBevel_fsize.x; ix <= PS_SGrad2HideBaseFullBevel_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2HideBaseFullBevel_fsize.y; iy <= PS_SGrad2HideBaseFullBevel_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2HideBaseFullBevel_offset.xy + i) * PS_SGrad2HideBaseFullBevel_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2HideBaseFullBevel_offset.xy + i) * PS_SGrad2HideBaseFullBevel_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2HideBaseFullBevel_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2HideBaseFullBevel_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2HideBaseFullBevel_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2HideBaseFullBevel_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

      fcolor = fcolor;
    
}

technique SGrad2HideBaseFullBevel
{
	pass p0
	{
		VertexShader = VS_SGrad2HideBaseFullBevel();
		PixelShader = PS_SGrad2HideBaseFullBevel();
	}
}


cbuffer CB_VS_SGrad2HideBaseFullBevelMul : register(b0) { 
float4 VS_SGrad2HideBaseFullBevelMul_vfuniforms[144] : packoffset(c0);
};

//VS_SGrad2HideBaseFullBevelMul
void VS_SGrad2HideBaseFullBevelMul( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_SGrad2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_SGrad2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_SGrad2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_SGrad2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 4+ 0.1f + 1]);
    

    fucxadd = VS_SGrad2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 0+ 0.1f];
    fucxmul = VS_SGrad2HideBaseFullBevelMul_vfuniforms[vbatch * 6 + 1+ 0.1f];
    
}

cbuffer CB_PS_SGrad2HideBaseFullBevelMul : register(b0) { 
float4 PS_SGrad2HideBaseFullBevelMul_fsize : packoffset(c0);
float4 PS_SGrad2HideBaseFullBevelMul_offset : packoffset(c1);
float4 PS_SGrad2HideBaseFullBevelMul_srctexscale : packoffset(c2);
float4 PS_SGrad2HideBaseFullBevelMul_texscale : packoffset(c3);
};

//PS_SGrad2HideBaseFullBevelMul
void PS_SGrad2HideBaseFullBevelMul( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    for (float ix = -PS_SGrad2HideBaseFullBevelMul_fsize.x; ix <= PS_SGrad2HideBaseFullBevelMul_fsize.x; ix++)
    {
      for (float iy = -PS_SGrad2HideBaseFullBevelMul_fsize.y; iy <= PS_SGrad2HideBaseFullBevelMul_fsize.y; iy++)
      {
        float2 i = float2(ix,iy);
    

    color.a += cry_tex2.Sample(cry_sampler2, tc0 + (PS_SGrad2HideBaseFullBevelMul_offset.xy + i) * PS_SGrad2HideBaseFullBevelMul_texscale.xy).a;
    color.r += cry_tex2.Sample(cry_sampler2, tc0 - (PS_SGrad2HideBaseFullBevelMul_offset.xy + i) * PS_SGrad2HideBaseFullBevelMul_texscale.xy).a;
    }
    } // EndBox2.
    fcolor = color * PS_SGrad2HideBaseFullBevelMul_fsize.w;
    

    fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);
    float4 shadowColor = cry_tex0.Sample(cry_sampler0,  float2(clamp(0.0f + 0.5f * (1.0f-fcolor.r * PS_SGrad2HideBaseFullBevelMul_fsize.z) , 0.0f, 0.5f), 0.0f));
    float4 shadowColor2 = cry_tex0.Sample(cry_sampler0, float2(clamp(0.5f + 0.5f * fcolor.a * PS_SGrad2HideBaseFullBevelMul_fsize.z, 0.5f, 1.0f), 0.0f));
    fcolor.a = shadowColor.a;
    fcolor.r = shadowColor2.a;
    shadowColor.a = 1.0f;
    shadowColor2.a = 1.0f;
    

    float4 base = cry_tex1.Sample(cry_sampler1, tc0 * PS_SGrad2HideBaseFullBevelMul_srctexscale.xy);
    float4 baseValue = float4(0,0,0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    fcolor.ar = clamp(fcolor.ar, 0.0f, 1.0f) * alphas;
    fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    

    fcolor.rgb = fcolor.rgb * fcolor.a;
    

      fcolor = fcolor;
    
}

technique SGrad2HideBaseFullBevelMul
{
	pass p0
	{
		VertexShader = VS_SGrad2HideBaseFullBevelMul();
		PixelShader = PS_SGrad2HideBaseFullBevelMul();
	}
}


cbuffer CB_VS_DisplacementMap : register(b0) { 
float4 VS_DisplacementMap_vfuniforms[96] : packoffset(c0);
};

//VS_DisplacementMap
void VS_DisplacementMap( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DisplacementMap_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DisplacementMap_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DisplacementMap_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DisplacementMap_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_DisplacementMap : register(b0) { 
float4 PS_DisplacementMap_compx : packoffset(c0);
float4 PS_DisplacementMap_compy : packoffset(c1);
float4 PS_DisplacementMap_mapScale : packoffset(c2);
float4 PS_DisplacementMap_scale : packoffset(c3);
};

//PS_DisplacementMap
void PS_DisplacementMap( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float2 mapTC = tc0*PS_DisplacementMap_mapScale.xy - PS_DisplacementMap_mapScale.zw;
    float mapInBoundsLowX  = step(mapTC.x, 0.0f);
    float mapInBoundsHighX = step(1.0f, mapTC.x);
    float mapInBoundsLowY  = step(mapTC.y, 0.0f);
    float mapInBoundsHighY = step(1.0f, mapTC.y);
    float mapInBounds = 1 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0f);
    float4 mapOffset = cry_tex0.Sample(cry_sampler0,mapTC * PS_DisplacementMap_scale.zw) * mapInBounds + float4(0.5f,0.5f,0.5f,0.5f) * (1-mapInBounds);

    float2 tc1;
    float2 componentChannel;
    componentChannel.x = dot(float4(1,1,1,1), PS_DisplacementMap_compx * mapOffset);
    componentChannel.y = dot(float4(1,1,1,1), PS_DisplacementMap_compy * mapOffset);
    tc1 = tc0 + (componentChannel - 0.5f) * PS_DisplacementMap_scale.xy;
    fcolor = cry_tex1.Sample(cry_sampler1, tc1);
    

      fcolor = fcolor;
    
}

technique DisplacementMap
{
	pass p0
	{
		VertexShader = VS_DisplacementMap();
		PixelShader = PS_DisplacementMap();
	}
}


cbuffer CB_VS_DisplacementMapDMIgnore : register(b0) { 
float4 VS_DisplacementMapDMIgnore_vfuniforms[96] : packoffset(c0);
};

//VS_DisplacementMapDMIgnore
void VS_DisplacementMapDMIgnore( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DisplacementMapDMIgnore_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DisplacementMapDMIgnore_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DisplacementMapDMIgnore_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DisplacementMapDMIgnore_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_DisplacementMapDMIgnore : register(b0) { 
float4 PS_DisplacementMapDMIgnore_compx : packoffset(c0);
float4 PS_DisplacementMapDMIgnore_compy : packoffset(c1);
float4 PS_DisplacementMapDMIgnore_mapScale : packoffset(c2);
float4 PS_DisplacementMapDMIgnore_scale : packoffset(c3);
};

//PS_DisplacementMapDMIgnore
void PS_DisplacementMapDMIgnore( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float2 mapTC = tc0*PS_DisplacementMapDMIgnore_mapScale.xy - PS_DisplacementMapDMIgnore_mapScale.zw;
    float mapInBoundsLowX  = step(mapTC.x, 0.0f);
    float mapInBoundsHighX = step(1.0f, mapTC.x);
    float mapInBoundsLowY  = step(mapTC.y, 0.0f);
    float mapInBoundsHighY = step(1.0f, mapTC.y);
    float mapInBounds = 1 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0f);
    float4 mapOffset = cry_tex0.Sample(cry_sampler0,mapTC * PS_DisplacementMapDMIgnore_scale.zw) * mapInBounds + float4(0.5f,0.5f,0.5f,0.5f) * (1-mapInBounds);

    float2 tc1;
    float2 componentChannel;
    componentChannel.x = dot(float4(1,1,1,1), PS_DisplacementMapDMIgnore_compx * mapOffset);
    componentChannel.y = dot(float4(1,1,1,1), PS_DisplacementMapDMIgnore_compy * mapOffset);
    tc1 = tc0 + (componentChannel - 0.5f) * PS_DisplacementMapDMIgnore_scale.xy;
    fcolor = cry_tex1.Sample(cry_sampler1, tc1);
    

    float srcInBoundsLowX  = step(tc1.x, 0.0f);
    float srcInBoundsHighX = step(1.0f, tc1.x);
    float srcInBoundsLowY  = step(tc1.y, 0.0f);
    float srcInBoundsHighY = step(1.0f, tc1.y);
    float srcInBounds     = 1 - clamp(srcInBoundsLowX + srcInBoundsHighX + srcInBoundsLowY + srcInBoundsHighY, 0.0, 1.0f);
    fcolor = (fcolor * srcInBounds) + cry_tex1.Sample(cry_sampler1, tc0) * (1-srcInBounds);
    

      fcolor = fcolor;
    
}

technique DisplacementMapDMIgnore
{
	pass p0
	{
		VertexShader = VS_DisplacementMapDMIgnore();
		PixelShader = PS_DisplacementMapDMIgnore();
	}
}


cbuffer CB_VS_DisplacementMapDMColor : register(b0) { 
float4 VS_DisplacementMapDMColor_vfuniforms[96] : packoffset(c0);
};

//VS_DisplacementMapDMColor
void VS_DisplacementMapDMColor( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DisplacementMapDMColor_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DisplacementMapDMColor_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DisplacementMapDMColor_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DisplacementMapDMColor_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

cbuffer CB_PS_DisplacementMapDMColor : register(b0) { 
float4 PS_DisplacementMapDMColor_boundColor : packoffset(c0);
float4 PS_DisplacementMapDMColor_compx : packoffset(c1);
float4 PS_DisplacementMapDMColor_compy : packoffset(c2);
float4 PS_DisplacementMapDMColor_mapScale : packoffset(c3);
float4 PS_DisplacementMapDMColor_scale : packoffset(c4);
};

//PS_DisplacementMapDMColor
void PS_DisplacementMapDMColor( half2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float2 mapTC = tc0*PS_DisplacementMapDMColor_mapScale.xy - PS_DisplacementMapDMColor_mapScale.zw;
    float mapInBoundsLowX  = step(mapTC.x, 0.0f);
    float mapInBoundsHighX = step(1.0f, mapTC.x);
    float mapInBoundsLowY  = step(mapTC.y, 0.0f);
    float mapInBoundsHighY = step(1.0f, mapTC.y);
    float mapInBounds = 1 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0f);
    float4 mapOffset = cry_tex0.Sample(cry_sampler0,mapTC * PS_DisplacementMapDMColor_scale.zw) * mapInBounds + float4(0.5f,0.5f,0.5f,0.5f) * (1-mapInBounds);

    float2 tc1;
    float2 componentChannel;
    componentChannel.x = dot(float4(1,1,1,1), PS_DisplacementMapDMColor_compx * mapOffset);
    componentChannel.y = dot(float4(1,1,1,1), PS_DisplacementMapDMColor_compy * mapOffset);
    tc1 = tc0 + (componentChannel - 0.5f) * PS_DisplacementMapDMColor_scale.xy;
    fcolor = cry_tex1.Sample(cry_sampler1, tc1);
    

    float srcInBoundsLowX  = step(tc1.x, 0.0f);
    float srcInBoundsHighX = step(1.0f, tc1.x);
    float srcInBoundsLowY  = step(tc1.y, 0.0f);
    float srcInBoundsHighY = step(1.0f, tc1.y);
    float srcInBounds     = 1 - clamp(srcInBoundsLowX + srcInBoundsHighX + srcInBoundsLowY + srcInBoundsHighY, 0.0, 1.0f);
    fcolor = (fcolor * srcInBounds) + PS_DisplacementMapDMColor_boundColor * (1-srcInBounds);
    

      fcolor = fcolor;
    
}

technique DisplacementMapDMColor
{
	pass p0
	{
		VertexShader = VS_DisplacementMapDMColor();
		PixelShader = PS_DisplacementMapDMColor();
	}
}


cbuffer CB_VS_DrawableCopyPixels : register(b0) { 
float4 VS_DrawableCopyPixels_vfuniforms[144] : packoffset(c0);
};

//VS_DrawableCopyPixels
void VS_DrawableCopyPixels( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawableCopyPixels_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawableCopyPixels_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawableCopyPixels_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawableCopyPixels_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_DrawableCopyPixels_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_DrawableCopyPixels_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

//PS_DrawableCopyPixels
void PS_DrawableCopyPixels( float2 tc0 : TEXCOORD0,
           float2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor_org = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor_src = cry_tex1.Sample(cry_sampler1, tc1);
    float inAlpha = fcolor_src.a;
    

    fcolor.a = inAlpha;
    

    fcolor.rgb = lerp(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
    
}

technique DrawableCopyPixels
{
	pass p0
	{
		VertexShader = VS_DrawableCopyPixels();
		PixelShader = PS_DrawableCopyPixels();
	}
}


cbuffer CB_VS_DrawableCopyPixelsMergeAlpha : register(b0) { 
float4 VS_DrawableCopyPixelsMergeAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_DrawableCopyPixelsMergeAlpha
void VS_DrawableCopyPixelsMergeAlpha( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawableCopyPixelsMergeAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawableCopyPixelsMergeAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawableCopyPixelsMergeAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawableCopyPixelsMergeAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_DrawableCopyPixelsMergeAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_DrawableCopyPixelsMergeAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

//PS_DrawableCopyPixelsMergeAlpha
void PS_DrawableCopyPixelsMergeAlpha( float2 tc0 : TEXCOORD0,
           float2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor_org = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor_src = cry_tex1.Sample(cry_sampler1, tc1);
    float inAlpha = fcolor_src.a;
    

    fcolor.a = lerp(inAlpha, 1.0f, fcolor_org.a);
    

    fcolor.rgb = lerp(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
    
}

technique DrawableCopyPixelsMergeAlpha
{
	pass p0
	{
		VertexShader = VS_DrawableCopyPixelsMergeAlpha();
		PixelShader = PS_DrawableCopyPixelsMergeAlpha();
	}
}


cbuffer CB_VS_DrawableCopyPixelsNoDestAlpha : register(b0) { 
float4 VS_DrawableCopyPixelsNoDestAlpha_vfuniforms[144] : packoffset(c0);
};

//VS_DrawableCopyPixelsNoDestAlpha
void VS_DrawableCopyPixelsNoDestAlpha( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawableCopyPixelsNoDestAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawableCopyPixelsNoDestAlpha_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawableCopyPixelsNoDestAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawableCopyPixelsNoDestAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_DrawableCopyPixelsNoDestAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_DrawableCopyPixelsNoDestAlpha_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

//PS_DrawableCopyPixelsNoDestAlpha
void PS_DrawableCopyPixelsNoDestAlpha( float2 tc0 : TEXCOORD0,
           float2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor_org = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor_src = cry_tex1.Sample(cry_sampler1, tc1);
    float inAlpha = fcolor_src.a;
    

    fcolor.a = 1.0f;
    

    fcolor.rgb = lerp(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
    
}

technique DrawableCopyPixelsNoDestAlpha
{
	pass p0
	{
		VertexShader = VS_DrawableCopyPixelsNoDestAlpha();
		PixelShader = PS_DrawableCopyPixelsNoDestAlpha();
	}
}


cbuffer CB_VS_DrawableCopyPixelsAlpha : register(b0) { 
float4 VS_DrawableCopyPixelsAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_DrawableCopyPixelsAlpha
void VS_DrawableCopyPixelsAlpha( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out half2 tc2 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawableCopyPixelsAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawableCopyPixelsAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawableCopyPixelsAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawableCopyPixelsAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_DrawableCopyPixelsAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_DrawableCopyPixelsAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    tc2.x = dot(pos, VS_DrawableCopyPixelsAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 4]);
    tc2.y = dot(pos, VS_DrawableCopyPixelsAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 5]);
    
}

//PS_DrawableCopyPixelsAlpha
void PS_DrawableCopyPixelsAlpha( float2 tc0 : TEXCOORD0,
           float2 tc1 : TEXCOORD1,
           float2 tc2 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor_org = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor_src = cry_tex1.Sample(cry_sampler1, tc1);
    float4 fcolor_alp = cry_tex2.Sample(cry_sampler2, tc2);
    float inAlpha = fcolor_src.a * fcolor_alp.a;
    

    fcolor.a = inAlpha;
    

    fcolor.rgb = lerp(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
    
}

technique DrawableCopyPixelsAlpha
{
	pass p0
	{
		VertexShader = VS_DrawableCopyPixelsAlpha();
		PixelShader = PS_DrawableCopyPixelsAlpha();
	}
}


cbuffer CB_VS_DrawableCopyPixelsAlphaMergeAlpha : register(b0) { 
float4 VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_DrawableCopyPixelsAlphaMergeAlpha
void VS_DrawableCopyPixelsAlphaMergeAlpha( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out half2 tc2 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    tc2.x = dot(pos, VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 4]);
    tc2.y = dot(pos, VS_DrawableCopyPixelsAlphaMergeAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 5]);
    
}

//PS_DrawableCopyPixelsAlphaMergeAlpha
void PS_DrawableCopyPixelsAlphaMergeAlpha( float2 tc0 : TEXCOORD0,
           float2 tc1 : TEXCOORD1,
           float2 tc2 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor_org = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor_src = cry_tex1.Sample(cry_sampler1, tc1);
    float4 fcolor_alp = cry_tex2.Sample(cry_sampler2, tc2);
    float inAlpha = fcolor_src.a * fcolor_alp.a;
    

    fcolor.a = lerp(inAlpha, 1.0f, fcolor_org.a);
    

    fcolor.rgb = lerp(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
    
}

technique DrawableCopyPixelsAlphaMergeAlpha
{
	pass p0
	{
		VertexShader = VS_DrawableCopyPixelsAlphaMergeAlpha();
		PixelShader = PS_DrawableCopyPixelsAlphaMergeAlpha();
	}
}


cbuffer CB_VS_DrawableCopyPixelsAlphaNoDestAlpha : register(b0) { 
float4 VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[192] : packoffset(c0);
};

//VS_DrawableCopyPixelsAlphaNoDestAlpha
void VS_DrawableCopyPixelsAlphaNoDestAlpha( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out half2 tc2 : TEXCOORD2,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[vbatch * 8 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 3]);
    tc2.x = dot(pos, VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 4]);
    tc2.y = dot(pos, VS_DrawableCopyPixelsAlphaNoDestAlpha_vfuniforms[vbatch * 8 + 2+ 0.1f + 5]);
    
}

//PS_DrawableCopyPixelsAlphaNoDestAlpha
void PS_DrawableCopyPixelsAlphaNoDestAlpha( float2 tc0 : TEXCOORD0,
           float2 tc1 : TEXCOORD1,
           float2 tc2 : TEXCOORD2,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor_org = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor_src = cry_tex1.Sample(cry_sampler1, tc1);
    float4 fcolor_alp = cry_tex2.Sample(cry_sampler2, tc2);
    float inAlpha = fcolor_src.a * fcolor_alp.a;
    

    fcolor.a = 1.0f;
    

    fcolor.rgb = lerp(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
    
}

technique DrawableCopyPixelsAlphaNoDestAlpha
{
	pass p0
	{
		VertexShader = VS_DrawableCopyPixelsAlphaNoDestAlpha();
		PixelShader = PS_DrawableCopyPixelsAlphaNoDestAlpha();
	}
}


cbuffer CB_VS_DrawableMerge : register(b0) { 
float4 VS_DrawableMerge_vfuniforms[144] : packoffset(c0);
};

//VS_DrawableMerge
void VS_DrawableMerge( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawableMerge_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawableMerge_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawableMerge_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawableMerge_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_DrawableMerge_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_DrawableMerge_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

cbuffer CB_PS_DrawableMerge : register(b0) { 
float4x4 PS_DrawableMerge_cxmul : packoffset(c0);
float4x4 PS_DrawableMerge_cxmul1 : packoffset(c4);
};

//PS_DrawableMerge
void PS_DrawableMerge( float2 tc0 : TEXCOORD0,
           float2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor_original = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor_source   = cry_tex1.Sample(cry_sampler1, tc1);
    fcolor = mul(fcolor_original, PS_DrawableMerge_cxmul) + mul(fcolor_source, PS_DrawableMerge_cxmul1);
    
}

technique DrawableMerge
{
	pass p0
	{
		VertexShader = VS_DrawableMerge();
		PixelShader = PS_DrawableMerge();
	}
}


cbuffer CB_VS_DrawableCompare : register(b0) { 
float4 VS_DrawableCompare_vfuniforms[144] : packoffset(c0);
};

//VS_DrawableCompare
void VS_DrawableCompare( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawableCompare_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawableCompare_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawableCompare_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawableCompare_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_DrawableCompare_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_DrawableCompare_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

//PS_DrawableCompare
void PS_DrawableCompare( float2 tc0 : TEXCOORD0,
           float2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 fcolor0 = cry_tex0.Sample(cry_sampler0, tc0);
    float4 fcolor1 = cry_tex1.Sample(cry_sampler1, tc1);

    float4 diff = fcolor0 - fcolor1;
    float4 oneValue = float4(1.0f/255.0f, 1.0f/255.0f, 1.0f/255.0f, 1.0f/255.0f );
    float4 ltZero = (sign(diff)+float4(1,1,1,1))*-0.25f;
    float4 partDiff = oneValue * (sign(ltZero)+float4(1,1,1,1));
    float4 wrapDiff = frac(diff + float4(1,1,1,1)) + partDiff;
    float rgbdiff = sign(dot(wrapDiff.rgb, float3(1,1,1)));
    fcolor = lerp( float4(1,1,1, wrapDiff.a), float4(wrapDiff.rgb, 1), rgbdiff );
    
}

technique DrawableCompare
{
	pass p0
	{
		VertexShader = VS_DrawableCompare();
		PixelShader = PS_DrawableCompare();
	}
}


cbuffer CB_VS_DrawablePaletteMap : register(b0) { 
float4 VS_DrawablePaletteMap_vfuniforms[96] : packoffset(c0);
};

//VS_DrawablePaletteMap
void VS_DrawablePaletteMap( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_DrawablePaletteMap_vfuniforms[vbatch * 4 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_DrawablePaletteMap_vfuniforms[vbatch * 4 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_DrawablePaletteMap_vfuniforms[vbatch * 4 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_DrawablePaletteMap_vfuniforms[vbatch * 4 + 2+ 0.1f + 1]);
    
}

//PS_DrawablePaletteMap
void PS_DrawablePaletteMap( float2 tc0 : TEXCOORD0,
           out float4 fcolor : SV_Target0)
{
    float4 fchannels = cry_tex1.Sample(cry_sampler1, tc0);
    fcolor  = cry_tex0.Sample(cry_sampler0, float2(fchannels.r, 0.125f));
    fcolor += cry_tex0.Sample(cry_sampler0, float2(fchannels.g, 0.375f));
    fcolor += cry_tex0.Sample(cry_sampler0, float2(fchannels.b, 0.625f));
    fcolor += cry_tex0.Sample(cry_sampler0, float2(fchannels.a, 0.875f));
    
}

technique DrawablePaletteMap
{
	pass p0
	{
		VertexShader = VS_DrawablePaletteMap();
		PixelShader = PS_DrawablePaletteMap();
	}
}


cbuffer CB_VS_BlendLighten : register(b0) { 
float4 VS_BlendLighten_vfuniforms[144] : packoffset(c0);
};

//VS_BlendLighten
void VS_BlendLighten( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BlendLighten_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BlendLighten_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BlendLighten_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BlendLighten_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BlendLighten_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BlendLighten_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

cbuffer CB_PS_BlendLighten : register(b0) { 
float4 PS_BlendLighten_cxadd : packoffset(c0);
float4 PS_BlendLighten_cxmul : packoffset(c1);
};

//PS_BlendLighten
void PS_BlendLighten( half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
    float4 src = cry_tex1.Sample(cry_sampler1, tc0);
    src = clamp(src * PS_BlendLighten_cxmul + PS_BlendLighten_cxadd, 0.0f, 1.0f);
    float4 dst = cry_tex0.Sample(cry_sampler0, tc1);
    fcolor     = max(src,dst) * src.a + (1-src.a)*dst;
    fcolor.a   = src.a + (1.0-src.a)*dst.a;
    
}

technique BlendLighten
{
	pass p0
	{
		VertexShader = VS_BlendLighten();
		PixelShader = PS_BlendLighten();
	}
}


cbuffer CB_VS_BlendDarken : register(b0) { 
float4 VS_BlendDarken_vfuniforms[144] : packoffset(c0);
};

//VS_BlendDarken
void VS_BlendDarken( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BlendDarken_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BlendDarken_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BlendDarken_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BlendDarken_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BlendDarken_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BlendDarken_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

cbuffer CB_PS_BlendDarken : register(b0) { 
float4 PS_BlendDarken_cxadd : packoffset(c0);
float4 PS_BlendDarken_cxmul : packoffset(c1);
};

//PS_BlendDarken
void PS_BlendDarken( half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
        float4 src = cry_tex1.Sample(cry_sampler1, tc0);
        src = clamp(src * PS_BlendDarken_cxmul + PS_BlendDarken_cxadd, 0.0f, 1.0f);
        float4 dst = cry_tex0.Sample(cry_sampler0, tc1);
        float3 clr = min(src.rgb, dst.rgb);
        fcolor.rgb = (clr * (dst.a) + (1-dst.a)*src.rgb)*src.a + dst.rgb*(1-src.a);        
        fcolor.a   = src.a + (1.0-src.a)*dst.a;
    
}

technique BlendDarken
{
	pass p0
	{
		VertexShader = VS_BlendDarken();
		PixelShader = PS_BlendDarken();
	}
}


cbuffer CB_VS_BlendOverlay : register(b0) { 
float4 VS_BlendOverlay_vfuniforms[144] : packoffset(c0);
};

//VS_BlendOverlay
void VS_BlendOverlay( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BlendOverlay_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BlendOverlay_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BlendOverlay_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BlendOverlay_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BlendOverlay_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BlendOverlay_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

cbuffer CB_PS_BlendOverlay : register(b0) { 
float4 PS_BlendOverlay_cxadd : packoffset(c0);
float4 PS_BlendOverlay_cxmul : packoffset(c1);
};

//PS_BlendOverlay
void PS_BlendOverlay( half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
        float4 src = cry_tex1.Sample(cry_sampler1, tc0);
        src = clamp(src * PS_BlendOverlay_cxmul + PS_BlendOverlay_cxadd, 0.0f, 1.0f);
        float4 dst = cry_tex0.Sample(cry_sampler0, tc1);
        float3 screen = 1.0f - 2.0*(1.0f - src.rgb)*(1.0f - dst.rgb);
        float3 mult = 2.0 * src.rgb * dst.rgb;
        float3 select = step(float3(0.5, 0.5, 0.5), dst.rgb);
        fcolor.rgb = ((screen * select + mult * (float3(1,1,1) - select)) + src.rgb * (1 - dst.a)) * src.a + dst.rgb * (1 - src.a);
        fcolor.a   = src.a + (1.0-src.a)*dst.a;
    
}

technique BlendOverlay
{
	pass p0
	{
		VertexShader = VS_BlendOverlay();
		PixelShader = PS_BlendOverlay();
	}
}


cbuffer CB_VS_BlendHardlight : register(b0) { 
float4 VS_BlendHardlight_vfuniforms[144] : packoffset(c0);
};

//VS_BlendHardlight
void VS_BlendHardlight( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BlendHardlight_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BlendHardlight_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BlendHardlight_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BlendHardlight_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BlendHardlight_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BlendHardlight_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

cbuffer CB_PS_BlendHardlight : register(b0) { 
float4 PS_BlendHardlight_cxadd : packoffset(c0);
float4 PS_BlendHardlight_cxmul : packoffset(c1);
};

//PS_BlendHardlight
void PS_BlendHardlight( half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
        float4 src = cry_tex1.Sample(cry_sampler1, tc0);
        src = clamp(src * PS_BlendHardlight_cxmul + PS_BlendHardlight_cxadd, 0.0f, 1.0f);
        float4 dst = cry_tex0.Sample(cry_sampler0, tc1);
        float3 screen = 1.0f - 2.0*(1.0f - src.rgb)*(1.0f - dst.rgb);
        float3 mult = 2.0 * src.rgb * dst.rgb;
        float3 select = step(float3(0.5, 0.5, 0.5), dst.rgb);
        fcolor.rgb = ((mult * select + screen * (float3(1,1,1) - select)) + src.rgb * (1 - dst.a)) * src.a + dst.rgb * (1 - src.a);
        fcolor.a   = src.a + (1.0-src.a)*dst.a;
    
}

technique BlendHardlight
{
	pass p0
	{
		VertexShader = VS_BlendHardlight();
		PixelShader = PS_BlendHardlight();
	}
}


cbuffer CB_VS_BlendDifference : register(b0) { 
float4 VS_BlendDifference_vfuniforms[144] : packoffset(c0);
};

//VS_BlendDifference
void VS_BlendDifference( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out half2 tc0 : TEXCOORD0,
           out half2 tc1 : TEXCOORD1,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BlendDifference_vfuniforms[vbatch * 6 + 0+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BlendDifference_vfuniforms[vbatch * 6 + 0+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BlendDifference_vfuniforms[vbatch * 6 + 2+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BlendDifference_vfuniforms[vbatch * 6 + 2+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BlendDifference_vfuniforms[vbatch * 6 + 2+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BlendDifference_vfuniforms[vbatch * 6 + 2+ 0.1f + 3]);
    
}

cbuffer CB_PS_BlendDifference : register(b0) { 
float4 PS_BlendDifference_cxadd : packoffset(c0);
float4 PS_BlendDifference_cxmul : packoffset(c1);
};

//PS_BlendDifference
void PS_BlendDifference( half2 tc0 : TEXCOORD0,
           half2 tc1 : TEXCOORD1,
           out float4 fcolor : SV_Target0)
{
        float4 src = cry_tex1.Sample(cry_sampler1, tc0);
        src = clamp(src * PS_BlendDifference_cxmul + PS_BlendDifference_cxadd, 0.0f, 1.0f);
        float4 dst = cry_tex0.Sample(cry_sampler0, tc1);
        fcolor     = max(src - dst, dst - src)* src.a + (1-src.a)*dst;
        fcolor.a   = src.a + (1.0-src.a)*dst.a;
    
}

technique BlendDifference
{
	pass p0
	{
		VertexShader = VS_BlendDifference();
		PixelShader = PS_BlendDifference();
	}
}


cbuffer CB_VS_BlendLayer : register(b0) { 
float4 VS_BlendLayer_vfuniforms[192] : packoffset(c0);
};

//VS_BlendLayer
void VS_BlendLayer( float4 pos : POSITION,
           uint vbatch : COLOR1,
           out float4 fucxadd : TEXCOORD0,
           out float4 fucxmul : TEXCOORD1,
           out half2 tc0 : TEXCOORD2,
           out half2 tc1 : TEXCOORD3,
           out float4 vpos : SV_Position)
{
    vpos = float4(0,0,0,1);
    vpos.x = dot(pos, VS_BlendLayer_vfuniforms[vbatch * 8 + 2+ 0.1f + 0]);
    vpos.y = dot(pos, VS_BlendLayer_vfuniforms[vbatch * 8 + 2+ 0.1f + 1]);
    

    tc0.x = dot(pos, VS_BlendLayer_vfuniforms[vbatch * 8 + 4+ 0.1f + 0]);
    tc0.y = dot(pos, VS_BlendLayer_vfuniforms[vbatch * 8 + 4+ 0.1f + 1]);
    tc1.x = dot(pos, VS_BlendLayer_vfuniforms[vbatch * 8 + 4+ 0.1f + 2]);
    tc1.y = dot(pos, VS_BlendLayer_vfuniforms[vbatch * 8 + 4+ 0.1f + 3]);
    

    fucxadd = VS_BlendLayer_vfuniforms[vbatch * 8 + 0+ 0.1f];
    fucxmul = VS_BlendLayer_vfuniforms[vbatch * 8 + 1+ 0.1f];
    
}

//PS_BlendLayer
void PS_BlendLayer( float4 fucxadd : TEXCOORD0,
           float4 fucxmul : TEXCOORD1,
           half2 tc0 : TEXCOORD2,
           half2 tc1 : TEXCOORD3,
           out float4 fcolor : SV_Target0)
{
    float alp = cry_tex0.Sample(cry_sampler0, tc1).a;
    fcolor    = cry_tex1.Sample(cry_sampler1, tc0);
    fcolor    *= alp;
    

      fcolor = (fcolor * float4(fucxmul.rgb,1)) * fucxmul.a;
      fcolor += fucxadd * fcolor.a;
      fcolor = clamp(fcolor, 0.0f, 1.0f);
    
}

technique BlendLayer
{
	pass p0
	{
		VertexShader = VS_BlendLayer();
		PixelShader = PS_BlendLayer();
	}
}


